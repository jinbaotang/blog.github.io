{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/watermark.py","path":"watermark.py","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/article/2.jpeg","path":"medias/article/2.jpeg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatars/jinbao.jpg","path":"medias/avatars/jinbao.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/lwip-close-socket-select/jinbao-ept.jpg","path":"medias/lwip-close-socket-select/jinbao-ept.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a6a75a3164c26b60e38e7bcb2c0b622d43723035","modified":1620149863649},{"_id":"source/404.md","hash":"c207c07eb73574a483f33d4e5f5695959c3dddfd","modified":1617889082083},{"_id":"source/CNAME","hash":"f25805a921413b29afb270cd503236b11fe8cdb0","modified":1618044339269},{"_id":"source/watermark.py","hash":"ba75fe6bddb27899ffbab584925d280704edfa6c","modified":1620113905914},{"_id":"source/_posts/tls-socket.md","hash":"36ba747ae6ab03f89cb8ebaf3be1c9e3672f699f","modified":1620148852658},{"_id":"source/_posts/lwip-close-socket-select.md","hash":"cba49dd22f27809e24d04c9dc34a7a1e638e842d","modified":1620200311726},{"_id":"source/_posts/why-write.md","hash":"746b291f260e61a60447a57219c551ad08431945","modified":1620115506353},{"_id":"source/about/index.md","hash":"982f70e0cc896d3388f03876d0e07bdf40cbd96b","modified":1620200668025},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1617888514844},{"_id":"source/contact/index.md","hash":"f7d26df796b518d62df34440b7cf7d9b4de889c5","modified":1617899659750},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1617888514844},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1617888514845},{"_id":"source/_posts/.DS_Store","hash":"a0776ecf08332ecba467254859c6c94449165143","modified":1620117975211},{"_id":"source/friends/index.md","hash":"7b386040cd13bc309925573f67c14aeadb5eedc2","modified":1618045518109},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1617888514844},{"_id":"source/_data/friends.json","hash":"64193468ee14e5ed2cbbb7b190851981f5b298dd","modified":1618046123461},{"_id":"source/_posts/why-write/2.jpeg","hash":"e7e0599d0170e42416f446f5213a223973d841c4","modified":1618237130760},{"_id":"source/_posts/lwip-close-socket-select/jinbao-ept.jpg","hash":"0fd0c66a0c1717191a0411771de1808b3acacdca","modified":1620118344844},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"fbcf57294068b717f2e637847bd9af56ce0a1eaa","modified":1620200374280},{"_id":"themes/hexo-theme-matery/README.md","hash":"a57adad34e9f6efe25aee84e5043b923201dd456","modified":1620106371191},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1620106371190},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"021803d13d20003d356e2bcb1afd93477d1857d0","modified":1620200600398},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1620106371190},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"84600a254604b6451b58fe5547edf5a4693616ca","modified":1620106371191},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"75dfe9de9e126abb09e6c4cb78a95bba854e84c7","modified":1620106371191},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1620106371191},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1620106371192},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"b938cd36dc67fb5d361abf1445452896cb4f13d3","modified":1620113206000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"dae8b5787d57cb8042d377651cb8c8c99e302354","modified":1620113678000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1620106371197},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1620106371197},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"3f2989574b355b9aef42a94fb8a321b1ea24cb1d","modified":1620106371197},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1620106371197},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"461598d209d1df7a6fc30a3be8ba104e6331c133","modified":1620108278000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1620106371197},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1620106371197},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1620106371192},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"68b31f43f6f7d1648d66c17cc62c30cf2a7a1568","modified":1620200374281},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1620106371192},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"f497076855b5d4dd5df0f5edc11fae74562348b2","modified":1620108023000},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"e8d91fde8e28a7d3587d2c367a0dc84051ebd03f","modified":1620115671135},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"3b7a54dce731b966386db4b35e7146133378280e","modified":1620108114000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"7933979c2092654a9c1038ff30495505d7d88f2d","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1620106371193},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1620106371194},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1620106371195},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1620106371196},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1620106371196},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1620106371197},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1620106371197},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1620106371198},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1620106371198},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1620106371198},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1620106371198},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1620106371198},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1620106371199},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1620106371199},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1620106371228},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"b72d8863a9be45d19f19d0625a9b5fefc16fcaaf","modified":1620200374280},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"7afcf154cc888eea238f0227cbbb68e5d3f78b4e","modified":1620080908000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1620106371238},{"_id":"themes/hexo-theme-matery/source/medias/article/2.jpeg","hash":"e7e0599d0170e42416f446f5213a223973d841c4","modified":1620114945077},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"5bd37a073e566a14f5f5f76155679c3638beed93","modified":1618044190201},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1620106371233},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1620106371234},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1620106371235},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1620106371234},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1620106371235},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1620106371237},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1620106371236},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1620106371237},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1620106371236},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1620106371237},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1620106371238},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1620106371238},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1620106371199},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1620106371199},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1620106371200},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1620106371199},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1620106371199},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1620106371214},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1620106371214},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1620106371214},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1620106371215},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1620106371219},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1620106371220},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1620106371221},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1620106371220},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1620106371220},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1620106371227},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1620106371208},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1620106371208},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1620106371221},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1620106371207},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1620106371221},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1620106371208},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1620106371221},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1620106371222},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1620106371225},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1620106371230},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1620106371230},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1620106371229},{"_id":"themes/hexo-theme-matery/source/medias/lwip-close-socket-select/jinbao-ept.jpg","hash":"0fd0c66a0c1717191a0411771de1808b3acacdca","modified":1620119988308},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1620106371233},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"605eb333e7be6d7bed17477751f7a3be10d5dc45","modified":1618044171594},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1620106371233},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1620106371233},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1620106371234},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1620106371235},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1620106371235},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1620106371234},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1620106371235},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1620106371236},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1620106371237},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1620106371237},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1620106371238},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1620106371216},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1620106371220},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1620106371221},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1620106371227},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1620106371201},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1620106371206},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1620106371206},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1620106371214},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1620106371200},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1620106371206},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1620106371214},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1620106371229},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1620106371232},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1620106371231},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1620106371224},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1620106371223},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1620106371228},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1620106371207},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1620106371209},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1620106371214},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8078516af3744160bdef414ed601c56373e82f47","modified":1620112305506},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1620106371231},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1620106371227},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1620106371205},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1620106371219},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1620106371212},{"_id":"themes/hexo-theme-matery/source/medias/avatars/jinbao.jpg","hash":"0f9aff0d695a8157f6b85d7418483925f66221ee","modified":1617899362237},{"_id":"public/baidu_urls.txt","hash":"bf2f38789cf675ad35f3892da4dc510560e3b344","modified":1620200710157},{"_id":"public/baidusitemap.xml","hash":"45988819d09620e234d881479aba7801ba1dbf00","modified":1620200710157},{"_id":"public/sitemap.xml","hash":"d7dae62350675d67008c9babc664b6b898074057","modified":1620200710157},{"_id":"public/atom.xml","hash":"a29c7881634a3928a83a8c0e146899f8968da19b","modified":1620200710157},{"_id":"public/search.xml","hash":"189bb0eb68271b22e890775441c360b11dd6c345","modified":1620200710157},{"_id":"public/categories/index.html","hash":"47850bf09f0761cb0023fed72d509d72c7e08eca","modified":1620200710157},{"_id":"public/contact/index.html","hash":"694ade7ed9edb44a54b78f670f16d55cff0b5dc8","modified":1620200710157},{"_id":"public/404.html","hash":"1838614f3773d922ef331be70eca13012909301c","modified":1620200710157},{"_id":"public/friends/index.html","hash":"b5729d4449a1020f71f3e9e163f92eeedb7cdd47","modified":1620200710157},{"_id":"public/tags/index.html","hash":"dad63fa2f1aa50f05f770dccd8529474e21d1a5b","modified":1620200710157},{"_id":"public/about/index.html","hash":"bc70121c54466fe75c88b69032a00f074c51a7ae","modified":1620200710157},{"_id":"public/2021/04/12/lwip-close-socket-select/index.html","hash":"2223d1333f1fe53b2c2293470fe5d228355aee54","modified":1620200710157},{"_id":"public/2021/04/11/why-write/index.html","hash":"0f6c81794faec5f91a659265581033d85be80b54","modified":1620200710157},{"_id":"public/2021/05/05/tls-socket/index.html","hash":"c7d623fb32f889cdb525a48b64cf1336ffb2fcc0","modified":1620200710157},{"_id":"public/archives/2021/index.html","hash":"3decc0454f19d1b32a191dba6cf86c765ade1051","modified":1620200710157},{"_id":"public/archives/index.html","hash":"a37b15726b01e57b19c89a9509f3ae196eb82b0d","modified":1620200710157},{"_id":"public/archives/2021/04/index.html","hash":"5929aa29e64a1c3dc6ff7b11116d969bbfce27a8","modified":1620200710157},{"_id":"public/archives/2021/05/index.html","hash":"4001f96a61a33f4710d33c7c84d2385eddc4c5ec","modified":1620200710157},{"_id":"public/categories/协议栈/index.html","hash":"63132c9cbce2bd92187b6e0002284904b1a86787","modified":1620200710157},{"_id":"public/categories/随笔/index.html","hash":"1f6ce64d294c31aab3677062f2267d5029bd2884","modified":1620200710157},{"_id":"public/tags/LwIP/index.html","hash":"51063cd9331d4ddbe156a8bacec905104df2ebb6","modified":1620200710157},{"_id":"public/tags/tls-opensll/index.html","hash":"b88ac74bb7b24ae2cb2f125f202c5a44f58fd4f7","modified":1620200710157},{"_id":"public/tags/博客/index.html","hash":"577c4962baeeee2a6325bfb1b35faf8eef2e3340","modified":1620200710157},{"_id":"public/index.html","hash":"544284f3204f3f5ce796c038e035a82377c0f222","modified":1620200710157},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1620200710157},{"_id":"public/watermark.py","hash":"ba75fe6bddb27899ffbab584925d280704edfa6c","modified":1620200710157},{"_id":"public/CNAME","hash":"f25805a921413b29afb270cd503236b11fe8cdb0","modified":1620200710157},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1620200710157},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1620200710157},{"_id":"public/medias/article/2.jpeg","hash":"e7e0599d0170e42416f446f5213a223973d841c4","modified":1620200710157},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1620200710157},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1620200710157},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1620200710157},{"_id":"public/medias/logo.png","hash":"7afcf154cc888eea238f0227cbbb68e5d3f78b4e","modified":1620200710157},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1620200710157},{"_id":"public/medias/reward/wechat.png","hash":"5bd37a073e566a14f5f5f76155679c3638beed93","modified":1620200710157},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1620200710157},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1620200710157},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1620200710157},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1620200710157},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1620200710157},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1620200710157},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1620200710157},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1620200710157},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1620200710157},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1620200710157},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1620200710157},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1620200710157},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1620200710157},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1620200710157},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1620200710157},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1620200710157},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1620200710157},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1620200710157},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1620200710157},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1620200710157},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1620200710157},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1620200710157},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1620200710157},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1620200710157},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1620200710157},{"_id":"public/2021/04/11/why-write/2.jpeg","hash":"e7e0599d0170e42416f446f5213a223973d841c4","modified":1620200710157},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1620200710157},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1620200710157},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1620200710157},{"_id":"public/medias/lwip-close-socket-select/jinbao-ept.jpg","hash":"0fd0c66a0c1717191a0411771de1808b3acacdca","modified":1620200710157},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1620200710157},{"_id":"public/medias/reward/alipay.jpg","hash":"605eb333e7be6d7bed17477751f7a3be10d5dc45","modified":1620200710157},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1620200710157},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1620200710157},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1620200710157},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1620200710157},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1620200710157},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1620200710157},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1620200710157},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1620200710157},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1620200710157},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1620200710157},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1620200710157},{"_id":"public/2021/04/12/lwip-close-socket-select/jinbao-ept.jpg","hash":"0fd0c66a0c1717191a0411771de1808b3acacdca","modified":1620200710157},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1620200710157},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1620200710157},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1620200710157},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1620200710157},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1620200710157},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1620200710157},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1620200710157},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1620200710157},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1620200710157},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1620200710157},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1620200710157},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1620200710157},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1620200710157},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1620200710157},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1620200710157},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1620200710157},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1620200710157},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1620200710157},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1620200710157},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1620200710157},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1620200710157},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1620200710157},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1620200710157},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1620200710157},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1620200710157},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1620200710157},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1620200710157},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1620200710157},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1620200710157},{"_id":"public/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1620200710157},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1620200710157},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1620200710157},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1620200710157},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1620200710157},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1620200710157},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1620200710157},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8078516af3744160bdef414ed601c56373e82f47","modified":1620200710157},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1620200710157},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1620200710157},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1620200710157},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1620200710157},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1620200710157},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1620200710157},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1620200710157},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1620200710157},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1620200710157},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1620200710157},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1620200710157},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1620200710157},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1620200710157},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1620200710157},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1620200710157},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1620200710157},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1620200710157},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1620200710157},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1620200710157},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1620200710157},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1620200710157},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1620200710157},{"_id":"public/medias/avatars/jinbao.jpg","hash":"0f9aff0d695a8157f6b85d7418483925f66221ee","modified":1620200710157}],"Category":[{"name":"协议栈","_id":"ckob5o5g60004y0wx8ale6cqr"},{"name":"随笔","_id":"ckob5o5ge000fy0wxfqo68jrt"}],"Data":[{"_id":"friends","data":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2021-04-07T16:00:00.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2021.04.08\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2021-04-08T13:38:02.083Z","path":"404.html","comments":1,"_id":"ckob5o5fw0000y0wxcuov1p9r","content":"","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-04-08T13:28:34.844Z","path":"categories/index.html","comments":1,"_id":"ckob5o5g30002y0wxbqpcgbc9","content":"","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ \n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**jinbaotang\n* **地址：**https://jinbaotang.cn\n* **简介：**\n* **头像：**https://jinbaotang.cn/medias/avatars/jinbao.jpg\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ \n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**jinbaotang\n* **地址：**https://jinbaotang.cn\n* **简介：**\n* **头像：**https://jinbaotang.cn/medias/avatars/jinbao.jpg\n","updated":"2021-04-08T16:34:19.750Z","path":"contact/index.html","comments":1,"_id":"ckob5o5g80006y0wx9ed7604q","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ </p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>jinbaotang</li>\n<li><strong>地址：</strong><a href=\"https://jinbaotang.cn/\">https://jinbaotang.cn</a></li>\n<li><strong>简介：</strong></li>\n<li><strong>头像：</strong><a href=\"https://jinbaotang.cn/medias/avatars/jinbao.jpg\">https://jinbaotang.cn/medias/avatars/jinbao.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ </p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>jinbaotang</li>\n<li><strong>地址：</strong><a href=\"https://jinbaotang.cn/\">https://jinbaotang.cn</a></li>\n<li><strong>简介：</strong></li>\n<li><strong>头像：</strong><a href=\"https://jinbaotang.cn/medias/avatars/jinbao.jpg\">https://jinbaotang.cn/medias/avatars/jinbao.jpg</a></li>\n</ul>\n"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**jinbaotang\n* **地址：**https://jinbaotang.cn\n* **简介：**\n* **头像：**https://jinbaotang.cn/medias/avatars/jinbao.jpg\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**jinbaotang\n* **地址：**https://jinbaotang.cn\n* **简介：**\n* **头像：**https://jinbaotang.cn/medias/avatars/jinbao.jpg\n","updated":"2021-04-10T09:05:18.109Z","path":"friends/index.html","comments":1,"_id":"ckob5o5ga0008y0wxe8scelwe","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>jinbaotang</li>\n<li><strong>地址：</strong><a href=\"https://jinbaotang.cn/\">https://jinbaotang.cn</a></li>\n<li><strong>简介：</strong></li>\n<li><strong>头像：</strong><a href=\"https://jinbaotang.cn/medias/avatars/jinbao.jpg\">https://jinbaotang.cn/medias/avatars/jinbao.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>jinbaotang</li>\n<li><strong>地址：</strong><a href=\"https://jinbaotang.cn/\">https://jinbaotang.cn</a></li>\n<li><strong>简介：</strong></li>\n<li><strong>头像：</strong><a href=\"https://jinbaotang.cn/medias/avatars/jinbao.jpg\">https://jinbaotang.cn/medias/avatars/jinbao.jpg</a></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-04-08T13:28:34.845Z","path":"tags/index.html","comments":1,"_id":"ckob5o5gb0009y0wx6tua535c","content":"","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2021-04-07T16:00:00.000Z","type":"about","layout":"about","mathjax":true,"_content":"\n\n## CV\n[中文版]()\n[English Version]()\n\n## 教育背景\n\n<!-- * <b>本科 山东理工大学 车辆工程</b>\n2014/09 - 2018/06 -->\n* <b>车辆工程</b>\n\n\n## 研究方向\n**车载以太网以及协议栈，AUTOSAR，Linux**\n\n## 工作经历\n\n\n## 学术成果\n\n\n## 获奖情况\n### 2018\n优秀毕业生\n北京经纬恒润科技有限公司-优秀员工&&新员工\n清华大学联合培养\n### 2017\n\n### 2016\n\n\n### 2015\n转专业\n\n## 联系方式\n* <b>电子邮箱</b>\njinbao.tang@foxmail.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021.04.08\ntype: \"about\"\nlayout: \"about\"\nmathjax: true\n---\n\n\n## CV\n[中文版]()\n[English Version]()\n\n## 教育背景\n\n<!-- * <b>本科 山东理工大学 车辆工程</b>\n2014/09 - 2018/06 -->\n* <b>车辆工程</b>\n\n\n## 研究方向\n**车载以太网以及协议栈，AUTOSAR，Linux**\n\n## 工作经历\n\n\n## 学术成果\n\n\n## 获奖情况\n### 2018\n优秀毕业生\n北京经纬恒润科技有限公司-优秀员工&&新员工\n清华大学联合培养\n### 2017\n\n### 2016\n\n\n### 2015\n转专业\n\n## 联系方式\n* <b>电子邮箱</b>\njinbao.tang@foxmail.com","updated":"2021-05-05T07:44:28.025Z","path":"about/index.html","comments":1,"_id":"ckob5o5gd000dy0wxeaqg10gv","content":"<h2 id=\"CV\"><a href=\"#CV\" class=\"headerlink\" title=\"CV\"></a>CV</h2><p><a href=\"\">中文版</a><br><a href=\"\">English Version</a></p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><!-- * <b>本科 山东理工大学 车辆工程</b>\n2014/09 - 2018/06 -->\n<ul>\n<li><b>车辆工程</b></li>\n</ul>\n<h2 id=\"研究方向\"><a href=\"#研究方向\" class=\"headerlink\" title=\"研究方向\"></a>研究方向</h2><p><strong>车载以太网以及协议栈，AUTOSAR，Linux</strong></p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h2 id=\"学术成果\"><a href=\"#学术成果\" class=\"headerlink\" title=\"学术成果\"></a>学术成果</h2><h2 id=\"获奖情况\"><a href=\"#获奖情况\" class=\"headerlink\" title=\"获奖情况\"></a>获奖情况</h2><h3 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h3><p>优秀毕业生<br>北京经纬恒润科技有限公司-优秀员工&amp;&amp;新员工<br>清华大学联合培养</p>\n<h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><h3 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h3><h3 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h3><p>转专业</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:jinbao.tang@foxmail.com\">jinbao.tang@foxmail.com</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"CV\"><a href=\"#CV\" class=\"headerlink\" title=\"CV\"></a>CV</h2><p><a href=\"\">中文版</a><br><a href=\"\">English Version</a></p>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><!-- * <b>本科 山东理工大学 车辆工程</b>\n2014/09 - 2018/06 -->\n<ul>\n<li><b>车辆工程</b></li>\n</ul>\n<h2 id=\"研究方向\"><a href=\"#研究方向\" class=\"headerlink\" title=\"研究方向\"></a>研究方向</h2><p><strong>车载以太网以及协议栈，AUTOSAR，Linux</strong></p>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h2 id=\"学术成果\"><a href=\"#学术成果\" class=\"headerlink\" title=\"学术成果\"></a>学术成果</h2><h2 id=\"获奖情况\"><a href=\"#获奖情况\" class=\"headerlink\" title=\"获奖情况\"></a>获奖情况</h2><h3 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h3><p>优秀毕业生<br>北京经纬恒润科技有限公司-优秀员工&amp;&amp;新员工<br>清华大学联合培养</p>\n<h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><h3 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h3><h3 id=\"2015\"><a href=\"#2015\" class=\"headerlink\" title=\"2015\"></a>2015</h3><p>转专业</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:&#106;&#105;&#x6e;&#98;&#x61;&#111;&#x2e;&#x74;&#97;&#110;&#103;&#64;&#102;&#111;&#120;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;\">&#106;&#105;&#x6e;&#98;&#x61;&#111;&#x2e;&#x74;&#97;&#110;&#103;&#64;&#102;&#111;&#120;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></li>\n</ul>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2021-04-08T13:28:34.844Z","path":"archives/index.html","comments":1,"_id":"ckob5o5gd000ey0wx0jwa8kbg","content":"","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"LwIP使用select，close socket资源释放不完全问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-04-12T10:56:38.000Z","password":null,"summary":null,"_content":"\n> 这篇文章本应该在4月就写好的，但是博客评论系统一直没有搭建好，走了很多弯路，现在好了，delay这么久，终于要要补过来了。\n\n> 该文章完全原创，除通用、广泛的知识点外，均为个人总结，如需转载还望备注出处，同时如有错误还请指出，虚心接受。\n\n# 一、简介\n## 1. 题外话\n&emsp;&emsp;以这篇文章为第一篇技术文章，一是萌生写博客的契机是换工作，另外就是这篇文章是我在怿星解决的最后一个bug。\n\n![](/medias/lwip-close-socket-select/jinbao-ept.jpg)\n\n&emsp;&emsp;问题来源是，跑在基于LwIP+FreeRTOS环境的DoIP，在反复初始化/反初始化时几次之后就会失败了。年初由于任务紧张，检查了下初始化和反初始化函数的流程，改掉了几处可能会出现问题的地方，问题依旧。但是同样的上层处理代码，在windows和linux环境下是没问题的，基本怀疑是LwIP某处不完善引起。一直拖到要离职，终于在离开的最后一天解决了，也算是给在怿星的DoIP协议栈画上一个属于自己的句号。\n\n&emsp;&emsp; LwIP 全名为 Light weight IP，意思是轻量化的 TCP/IP 协议， 是瑞典计算机科学院(SICS)的 Adam Dunkels 开发的一个小型开源的 TCP/IP 协议栈。 LwIP 的设计初衷是：用少量的资源消耗(RAM)实现一个较为完整的 TCP/IP 协议栈，其中“完整”主要指的是 TCP 协议的完整性， 实现的重点是在保持 TCP 协议主要功能的基础上减少对 RAM 的占用。此外 LwIP既可以移植到操作系统上运行，也可以在无操作系统的情况下独立运行。\n## 2. 原因\n&emsp;&emsp;引起该问题的根本原因是，LwIP select函数里如果判断对应的socket没有事件产生（读/写/异常），进行简单处理后则改线程休眠，让出cpu控制权。如果在select休眠期间，进行了close socket的操作，会释放对应的socket pcb（**close\\(socket\\)**是成功的），然后在select休眠结束后，判断该socket资源不存在，则直接退出select函数，**但是**此时该socket的select_wait标志位没被清除。LwIP在分配socket时（资源都是静态分配的，类似于有一个socket数组，若分配则对应标志位为真），socket是否空闲是会对select_wait该标志位进行判断，所以即使该socket没有被使用，调用*socket()*函数时也会认为该socket是被占用的，所以几次之后，socket资源被**假耗尽**。\n\n## 3. 解决\n&emsp;&emsp;知道原因后，问题就好解决了。有以下两个解决问题的思路。\n1. 更改LwIP源码，对对应的标志位进行判断和清除。该解决方案，如果能够push到LwIP主分支，则是一劳永逸的，否则如果要跟随LwIP官方更新，自己得维护一套代码，并持续merge。\n2. 使用者，在使用接口时，做同步。即在select休眠期间不允许进行close socket操作，同时在close socket也不允许进入select函数。所以只要在两个函数之间加上条件判断就好。\n\n&emsp;&emsp;考虑到维护成本，最终选择方案2.\n\n\n# 二、分析\n&emsp;&emsp;解决思路在上面已经给出，下面主要想从源码级对问题进行分析。原因中，涉及三个函数，\n1. socket函数，即lwip_socket，函数原型如下：\n`int lwip_socket(int domain, int type, int protocol)`\n\n2. close函数，即lwip_close，原型如下：\n`int lwip_close(int s)`\n\n3. select函数， 即lwip_select(),原型如下：\n`intlwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)`\n\n\n## 1. 拓展\n&emsp;&emsp;LwIP本身提供了类似于bsd socket编程模型，同时也实现了简易版的select函数。\n\n&emsp;&emsp;关于socket编程的教程是实在太多了，在这不再重复去描述，[socket编程参考链接](https://blog.csdn.net/weixin_39634961/article/details/80236161)。辅导过一些人进行socket编程，初学者包括我自己，容易忽略的一点就是，作为server时，listen-socket和accept-socket不是一回事。可以理解为listen-socket窗口，窗口只是负责监听有谁要走通道，走哪个通道，并把真正的通道--accept-socket给到上层。对于其他的，感觉跑跑示例程序，单步走一下，就基本理解了。\n\n&emsp;&emsp;在不使用select时，并没有发现socket资源释放不完全的问题。本文不展开讲解lwip select的实现，但是对于select的使用需要稍微展开下，[select编程参考链接](https://www.cnblogs.com/skyfsm/p/7079458.html)。关于select本质上是一个同步I/O函数，只不过改同步函数可以同时监控多个\"IO\"通道，所以也称为多路复用。熟悉了上面的socket编程后，如果需要实现多个socket同时通信的话，就应该给每个socket开一个线程，在负载不是特别高的情况下会显得效率特别低，同时线程太多，就不得不考虑资源竞争的问题，如果竞态条件太多，也容易产生问题（**多线程资源竞争问题**）。多路复用即是用一个线程监听多个通道（描述符），一旦某个描述符就绪（可读、可写或者异常），就通知程序进行相应的读写操作。上庙的描述，看起来select是异步的，其实不然，因为产生读写事件后，应用程序必须自己负责读写操作，读写操作本身是阻塞的，而异步I/O是不需要自己读写；同时即使没有读写事件产生，select函数本身也是阻塞的，加了超时也是阻塞的，只不过给阻塞增加了一个时间限制。\n\n&emsp;&emsp;select最早于1983年出现在4.2BSD中，它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。从[select编程参考链接](https://www.cnblogs.com/skyfsm/p/7079458.html)中可以看出最终每个socket都对应到每个bit上，如果对应的socket有事件产生，则会被置位。\n\n## 2. 函数分析\n&emsp;&emsp;该节分析函数socket，close，select实现细节。**LwIP版本2.1.4**。\n\n### 2.1 socket函数\n&emsp;&emsp;lwip中`#define socket lwip_socket`.\n```c\nint lwip_socket(int domain, int type, int protocol) {\n    struct netconn *conn;\n    int i;\n    LWIP_UNUSED_ARG(domain);\n    /* @todo: check this */\n    /* create a netconn */\n    /* 下面主要是针对不同的socket类型，分配空间，对相应的成员进行赋值，空间资源为预分配给lwip的堆空间\n     */\n    switch (type) {\n    case SOCK_RAW:\n        conn = netconn_new_with_proto_and_callback(\n            DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW), (u8_t)protocol,\n            event_callback);\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"lwip_socket(%s, SOCK_RAW, %d) = \",\n                     domain == PF_INET ? \"PF_INET\" : \"UNKNOWN\", protocol));\n        break;\n    case SOCK_DGRAM:\n        conn = netconn_new_with_callback(\n            DOMAIN_TO_NETCONN_TYPE(domain, ((protocol == IPPROTO_UDPLITE)\n                                                ? NETCONN_UDPLITE\n                                                : NETCONN_UDP)),\n            event_callback);\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"lwip_socket(%s, SOCK_DGRAM, %d) = \",\n                     domain == PF_INET ? \"PF_INET\" : \"UNKNOWN\", protocol));\n        break;\n    case SOCK_STREAM:\n        conn = netconn_new_with_callback(\n            DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"lwip_socket(%s, SOCK_STREAM, %d) = \",\n                     domain == PF_INET ? \"PF_INET\" : \"UNKNOWN\", protocol));\n        break;\n    default:\n        LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_socket(%d, %d/UNKNOWN, %d) = -1\\n\",\n                                    domain, type, protocol));\n        set_errno(EINVAL);\n        return -1;\n    }\n    if (!conn) {\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"-1 / ENOBUFS (could not create netconn)\\n\"));\n        set_errno(ENOBUFS);\n        return -1;\n    }\n    /* \n    *上面已经分配好了，对应的connection空间，最终要对应的socket上，即socket数组，见下面alloc_socket实现。 \n    */\n    i = alloc_socket(conn, 0);\n    if (i == -1) {\n        netconn_delete(conn);\n        set_errno(ENFILE);\n        return -1;\n    }\n    conn->socket = i;\n    LWIP_DEBUGF(SOCKETS_DEBUG, (\"%d\\n\", i));\n    set_errno(0);\n    return i;\n}\n```\n```c\nstatic int alloc_socket(struct netconn *newconn, int accepted){\n  int i;\n  SYS_ARCH_DECL_PROTECT(lev);\n\n  /* allocate a new socket identifier */\n  for (i = 0; i < NUM_SOCKETS; ++i) {\n    /* Protect socket array */\n    SYS_ARCH_PROTECT(lev);\n    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {\n      sockets[i].conn       = newconn;\n      /* The socket is not yet known to anyone, so no need to protect\n         after having marked it as used. */\n      SYS_ARCH_UNPROTECT(lev);\n      sockets[i].lastdata   = NULL;\n      sockets[i].lastoffset = 0;\n      sockets[i].rcvevent   = 0;\n      /* TCP sendbuf is empty, but the socket is not yet writable until connected\n       * (unless it has been created by accept()). */\n      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);\n      sockets[i].errevent   = 0;\n      sockets[i].err        = 0;\n      return i + LWIP_SOCKET_OFFSET;\n    }\n    SYS_ARCH_UNPROTECT(lev);\n  }\n  return -1;\n}\n```\n&emsp;&emsp;可以看到，判断socket资源是否有人在使用时，除了判断socket->conn是否为空，还会判断select_waiting是否等于0。其中select_waiting标识该socket正在被多少个线程在使用。即要释放socket资源（说释放有点不是很准确，因为在lwip中，socket资源是编译前分配的），两个重要条件是，socket->conn必须为空，并且select_waiting要为0.\n\n### 2.2 close函数\n&emsp;&emsp;接下来看看close函数的实现，看为啥会导致资源释放不完全。\n```c\nint lwip_close(int s){\n  struct lwip_sock *sock;\n  int is_tcp = 0;\n  err_t err;\n\n  LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_close(%d)\\n\", s));\n\t/* 本质上是，通过socket数组下标获取到socket结构体 */\n  sock = get_socket(s);\n  if (!sock) {\n    return -1;\n  }\n\n  if (sock->conn != NULL) {\n    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;\n  } else {\n    LWIP_ASSERT(\"sock->lastdata == NULL\", sock->lastdata == NULL);\n  }\n\n#if LWIP_IGMP\n  /* drop all possibly joined IGMP memberships */\n  lwip_socket_drop_registered_memberships(s);\n#endif /* LWIP_IGMP */\n\t/* 释放从lwip内存堆里分配到空间 */\n  err = netconn_delete(sock->conn);\n  if (err != ERR_OK) {\n    sock_set_errno(sock, err_to_errno(err));\n    return -1;\n  }\n\t/* 主要是对socket结构体成员进行反初始化，并对数据空间进行释放，看下述对该函数实现分析 */\n  free_socket(sock, is_tcp);\n  set_errno(0);\n  return 0;\n}\n```\n```c\nstatic void free_socket(struct lwip_sock *sock, int is_tcp){\n  void *lastdata;\n\n  lastdata         = sock->lastdata;\n  sock->lastdata   = NULL;\n  sock->lastoffset = 0;\n  sock->err        = 0;\n\n  /* Protect socket array */\n  /* 对socket->conn进行置空 */\n  SYS_ARCH_SET(sock->conn, NULL);\n  /* don't use 'sock' after this line, as another task might have allocated it */\n\n  if (lastdata != NULL) {\n    if (is_tcp) {\n      pbuf_free((struct pbuf *)lastdata);\n    } else {\n      netbuf_delete((struct netbuf *)lastdata);\n    }\n  }\n}\n```\n&emsp;&emsp;上述两个函数分析可知，`close`函数只能使socket->conn为空，并不能使select_waiting为0，所以其实只有`close`函数是不能使socket资源完全释放的。\n\n### 2.3 select函数\n&emsp;&emsp;从*select_waiting*名字中能比较容易的猜到，该变量跟select函数肯定是强相关的。全局搜索select_waiting，果然只有select函数有进行写操作。下面分析select函数，该函数较长，做必要的简化。\n\n```c\nint lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout){\n  u32_t waitres = 0;\n  int nready;\n  fd_set lreadset, lwriteset, lexceptset;\n  u32_t msectimeout;\n  struct lwip_select_cb select_cb;\n  int i;\n  int maxfdp2;\n#if LWIP_NETCONN_SEM_PER_THREAD\n  int waited = 0;\n#endif\n  /* Go through each socket in each list to count number of sockets which\n     currently match */\n  /* \n  *扫描所有socket对应的bit，如果有准备好，则直接将对应的bit置上，后面可以看出，该函数简单的赋值后就退出了，\n  *不涉及对select_waiting的操作。\n   */\n  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);\n\n  /* If we don't have any current events, then suspend if we are supposed to */\n  /* 只有没有相应的socket准备好并且没有超时，才回置位select_waiting, 并挂起线程。 */\n  if (!nready) {\n    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {\n      LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_select: no timeout, returning 0\\n\"));\n      /* This is OK as the local fdsets are empty and nready is zero,\n         or we would have returned earlier. */\n      goto return_copy_fdsets;\n    }\n\n    /* 省略一堆处理，可以看到只要该socket设置了，读写异常通知，并且socket是存在的，则会将select_wainting增加1 */\n    /* Increase select_waiting for each socket we are interested in */\n    maxfdp2 = maxfdp1;\n    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {\n      if ((readset && FD_ISSET(i, readset)) ||\n          (writeset && FD_ISSET(i, writeset)) ||\n          (exceptset && FD_ISSET(i, exceptset))) {\n        struct lwip_sock *sock;\n        SYS_ARCH_PROTECT(lev);\n        sock = tryget_socket(i);\n        if (sock != NULL) {\n          sock->select_waiting++;\n          LWIP_ASSERT(\"sock->select_waiting > 0\", sock->select_waiting > 0);\n        } else {\n          /* Not a valid socket */\n          nready = -1;\n          maxfdp2 = i;\n          SYS_ARCH_UNPROTECT(lev);\n          break;\n        }\n        SYS_ARCH_UNPROTECT(lev);\n      }\n    }\n\n    if (nready >= 0) {\n    /* \n    *执行完上述操作，还会再扫描一次是否有socket有事件产生，删除细节。\n    *因为上述，如果socket资源过多，会消耗不少资源，再扫描一次可以提高效率。\n    */\n      /* 休眠指定时间，让出cpu控制权 */\n      waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);\n    }\n    /* 休眠结束， 将对应socket->select_waiting减1 */\n    /* Decrease select_waiting for each socket we are interested in */\n    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {\n      if ((readset && FD_ISSET(i, readset)) ||\n          (writeset && FD_ISSET(i, writeset)) ||\n          (exceptset && FD_ISSET(i, exceptset))) {\n        struct lwip_sock *sock;\n        SYS_ARCH_PROTECT(lev);\n        sock = tryget_socket(i);\n        /* 减1，必须socket是还在的 */\n        if (sock != NULL) {\n          /* for now, handle select_waiting==0... */\n          LWIP_ASSERT(\"sock->select_waiting > 0\", sock->select_waiting > 0);\n          if (sock->select_waiting > 0) {\n            sock->select_waiting--;\n          }\n        } else {\n          /* Not a valid socket */\n          nready = -1;\n        }\n        SYS_ARCH_UNPROTECT(lev);\n      }\n    }\n  }\n  /* 删除不影响分析代码，感兴趣参考源码。 */\n  return nready;\n}\n```\n\n**<center>这是这一张来自未来的select函数处理流程图</center>**\n\n&emsp;&emsp;参考上述代码分析，特别注意*socket->select_waiting*加1和减1的地方，可以看到，如果socket存在且的确需要监听事件，且并不是进来事件就已经产生或者已经超时，一定会加1；然后线程会有可能会进行休眠；正常情况下，休眠结束后，*socket->select_waiting*减1，离开该函数，*socket->select_waiting*恢复原值。**但是**，如果在线程休眠期间，恰巧在另外一个线程进行了close操作，事件就变味了。\n\n&emsp;&emsp;如果在休眠期间进行了`close(socket)`,则通过`tyr_socket(socket)`获取不到socket结构体，则*socket->select_waiting*不会进行减1，后面执行一系列语句后，退出该函数，*socket->select_waiting*没有恢复原值，且比进来时大1。针对该函数，*socket->select_waiting*加1的次数是*>=*减1的次数，所以如果只要在函数退出时没有恢复原值，则*socket->select_waiting*永远不可能再减为0了，此时socket资源就出现了**假占用**，该socket再也不能被其他人使用了。\n\n# 三、解决方案\n&emsp;&emsp;第二章已经对产生的原因进行了分析。解决问题的思路也想一开始提到的有两种，为了不改lwip源码，使用了第二种思路。下面用伪代码给出解决方案。需要使用到两个flag`closing_socket_flag`和·selecting_flag`。\n**thread1**\n```c\nint adaptor_closesocket(int socket){\n    while(get_select_processing()){\n        sleep(1);\n    }\n    set_closesocket_processing(true);\n    ret = close(socket);\n    set_closescoket_processing(false);\n}\n```\n\n**thread2**\n```c\nint select_loop(int socket){\n    while(get_closesocket_processing()){\n        sleep(1);\n    }\n    set_select_processing(true);\n    select_return = select(sockMAX + 1, &read_set, NULL, &exception_set, &timeout);\n    set_select_processing(false);\n}\n```\n&emsp;&emsp;上面的解决方案，我认为是最为简单通用的解决方案，当然针对两个flag肯定还是需要加锁的。另外还有一种思路就是使用通知类似于condition的方法。知道了错误原因，解决方法的思路就是做同步。\n\n# 四、写在最后\n&emsp;&emsp;LwIP无疑是一个很优秀的轻量版的TCP/IP协议实现了，虽然上面的socket接口都是简化版，当时以为如果功能是支持的，在使用以为可以跟BSD的一样。因为在开发DoIP时是跨平台，上层应用代码是一样的，在windows和linux都是支持的，所以比较简单就初步定位出了问题应该是出在了LwIP协议本身，但是当时由于现象特别奇怪（略过不表），也费了一般周折才最终定位出来。一开始觉得认为这是一个bug，后面跟老虞（技术偶像）深度讨论过，觉得这也不属于LwIP本身的一个bug，感觉更像是feature实现的不够完整，但是light weight也已经足够了。同时在使用LwIP本身也学到了很多技巧，如连接符**##**的使用、在MCU上实现分配空间的解决方案。\n\n![](https://savannah.nongnu.org/images/Savannah.theme/floating.png)\n\n\n\n\n","source":"_posts/lwip-close-socket-select.md","raw":"---\ntitle: LwIP使用select，close socket资源释放不完全问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-04-12 18:56:38\npassword:\nsummary:\ntags:\n- LwIP\ncategories:\n- 协议栈\n---\n\n> 这篇文章本应该在4月就写好的，但是博客评论系统一直没有搭建好，走了很多弯路，现在好了，delay这么久，终于要要补过来了。\n\n> 该文章完全原创，除通用、广泛的知识点外，均为个人总结，如需转载还望备注出处，同时如有错误还请指出，虚心接受。\n\n# 一、简介\n## 1. 题外话\n&emsp;&emsp;以这篇文章为第一篇技术文章，一是萌生写博客的契机是换工作，另外就是这篇文章是我在怿星解决的最后一个bug。\n\n![](/medias/lwip-close-socket-select/jinbao-ept.jpg)\n\n&emsp;&emsp;问题来源是，跑在基于LwIP+FreeRTOS环境的DoIP，在反复初始化/反初始化时几次之后就会失败了。年初由于任务紧张，检查了下初始化和反初始化函数的流程，改掉了几处可能会出现问题的地方，问题依旧。但是同样的上层处理代码，在windows和linux环境下是没问题的，基本怀疑是LwIP某处不完善引起。一直拖到要离职，终于在离开的最后一天解决了，也算是给在怿星的DoIP协议栈画上一个属于自己的句号。\n\n&emsp;&emsp; LwIP 全名为 Light weight IP，意思是轻量化的 TCP/IP 协议， 是瑞典计算机科学院(SICS)的 Adam Dunkels 开发的一个小型开源的 TCP/IP 协议栈。 LwIP 的设计初衷是：用少量的资源消耗(RAM)实现一个较为完整的 TCP/IP 协议栈，其中“完整”主要指的是 TCP 协议的完整性， 实现的重点是在保持 TCP 协议主要功能的基础上减少对 RAM 的占用。此外 LwIP既可以移植到操作系统上运行，也可以在无操作系统的情况下独立运行。\n## 2. 原因\n&emsp;&emsp;引起该问题的根本原因是，LwIP select函数里如果判断对应的socket没有事件产生（读/写/异常），进行简单处理后则改线程休眠，让出cpu控制权。如果在select休眠期间，进行了close socket的操作，会释放对应的socket pcb（**close\\(socket\\)**是成功的），然后在select休眠结束后，判断该socket资源不存在，则直接退出select函数，**但是**此时该socket的select_wait标志位没被清除。LwIP在分配socket时（资源都是静态分配的，类似于有一个socket数组，若分配则对应标志位为真），socket是否空闲是会对select_wait该标志位进行判断，所以即使该socket没有被使用，调用*socket()*函数时也会认为该socket是被占用的，所以几次之后，socket资源被**假耗尽**。\n\n## 3. 解决\n&emsp;&emsp;知道原因后，问题就好解决了。有以下两个解决问题的思路。\n1. 更改LwIP源码，对对应的标志位进行判断和清除。该解决方案，如果能够push到LwIP主分支，则是一劳永逸的，否则如果要跟随LwIP官方更新，自己得维护一套代码，并持续merge。\n2. 使用者，在使用接口时，做同步。即在select休眠期间不允许进行close socket操作，同时在close socket也不允许进入select函数。所以只要在两个函数之间加上条件判断就好。\n\n&emsp;&emsp;考虑到维护成本，最终选择方案2.\n\n\n# 二、分析\n&emsp;&emsp;解决思路在上面已经给出，下面主要想从源码级对问题进行分析。原因中，涉及三个函数，\n1. socket函数，即lwip_socket，函数原型如下：\n`int lwip_socket(int domain, int type, int protocol)`\n\n2. close函数，即lwip_close，原型如下：\n`int lwip_close(int s)`\n\n3. select函数， 即lwip_select(),原型如下：\n`intlwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)`\n\n\n## 1. 拓展\n&emsp;&emsp;LwIP本身提供了类似于bsd socket编程模型，同时也实现了简易版的select函数。\n\n&emsp;&emsp;关于socket编程的教程是实在太多了，在这不再重复去描述，[socket编程参考链接](https://blog.csdn.net/weixin_39634961/article/details/80236161)。辅导过一些人进行socket编程，初学者包括我自己，容易忽略的一点就是，作为server时，listen-socket和accept-socket不是一回事。可以理解为listen-socket窗口，窗口只是负责监听有谁要走通道，走哪个通道，并把真正的通道--accept-socket给到上层。对于其他的，感觉跑跑示例程序，单步走一下，就基本理解了。\n\n&emsp;&emsp;在不使用select时，并没有发现socket资源释放不完全的问题。本文不展开讲解lwip select的实现，但是对于select的使用需要稍微展开下，[select编程参考链接](https://www.cnblogs.com/skyfsm/p/7079458.html)。关于select本质上是一个同步I/O函数，只不过改同步函数可以同时监控多个\"IO\"通道，所以也称为多路复用。熟悉了上面的socket编程后，如果需要实现多个socket同时通信的话，就应该给每个socket开一个线程，在负载不是特别高的情况下会显得效率特别低，同时线程太多，就不得不考虑资源竞争的问题，如果竞态条件太多，也容易产生问题（**多线程资源竞争问题**）。多路复用即是用一个线程监听多个通道（描述符），一旦某个描述符就绪（可读、可写或者异常），就通知程序进行相应的读写操作。上庙的描述，看起来select是异步的，其实不然，因为产生读写事件后，应用程序必须自己负责读写操作，读写操作本身是阻塞的，而异步I/O是不需要自己读写；同时即使没有读写事件产生，select函数本身也是阻塞的，加了超时也是阻塞的，只不过给阻塞增加了一个时间限制。\n\n&emsp;&emsp;select最早于1983年出现在4.2BSD中，它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。从[select编程参考链接](https://www.cnblogs.com/skyfsm/p/7079458.html)中可以看出最终每个socket都对应到每个bit上，如果对应的socket有事件产生，则会被置位。\n\n## 2. 函数分析\n&emsp;&emsp;该节分析函数socket，close，select实现细节。**LwIP版本2.1.4**。\n\n### 2.1 socket函数\n&emsp;&emsp;lwip中`#define socket lwip_socket`.\n```c\nint lwip_socket(int domain, int type, int protocol) {\n    struct netconn *conn;\n    int i;\n    LWIP_UNUSED_ARG(domain);\n    /* @todo: check this */\n    /* create a netconn */\n    /* 下面主要是针对不同的socket类型，分配空间，对相应的成员进行赋值，空间资源为预分配给lwip的堆空间\n     */\n    switch (type) {\n    case SOCK_RAW:\n        conn = netconn_new_with_proto_and_callback(\n            DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW), (u8_t)protocol,\n            event_callback);\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"lwip_socket(%s, SOCK_RAW, %d) = \",\n                     domain == PF_INET ? \"PF_INET\" : \"UNKNOWN\", protocol));\n        break;\n    case SOCK_DGRAM:\n        conn = netconn_new_with_callback(\n            DOMAIN_TO_NETCONN_TYPE(domain, ((protocol == IPPROTO_UDPLITE)\n                                                ? NETCONN_UDPLITE\n                                                : NETCONN_UDP)),\n            event_callback);\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"lwip_socket(%s, SOCK_DGRAM, %d) = \",\n                     domain == PF_INET ? \"PF_INET\" : \"UNKNOWN\", protocol));\n        break;\n    case SOCK_STREAM:\n        conn = netconn_new_with_callback(\n            DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"lwip_socket(%s, SOCK_STREAM, %d) = \",\n                     domain == PF_INET ? \"PF_INET\" : \"UNKNOWN\", protocol));\n        break;\n    default:\n        LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_socket(%d, %d/UNKNOWN, %d) = -1\\n\",\n                                    domain, type, protocol));\n        set_errno(EINVAL);\n        return -1;\n    }\n    if (!conn) {\n        LWIP_DEBUGF(SOCKETS_DEBUG,\n                    (\"-1 / ENOBUFS (could not create netconn)\\n\"));\n        set_errno(ENOBUFS);\n        return -1;\n    }\n    /* \n    *上面已经分配好了，对应的connection空间，最终要对应的socket上，即socket数组，见下面alloc_socket实现。 \n    */\n    i = alloc_socket(conn, 0);\n    if (i == -1) {\n        netconn_delete(conn);\n        set_errno(ENFILE);\n        return -1;\n    }\n    conn->socket = i;\n    LWIP_DEBUGF(SOCKETS_DEBUG, (\"%d\\n\", i));\n    set_errno(0);\n    return i;\n}\n```\n```c\nstatic int alloc_socket(struct netconn *newconn, int accepted){\n  int i;\n  SYS_ARCH_DECL_PROTECT(lev);\n\n  /* allocate a new socket identifier */\n  for (i = 0; i < NUM_SOCKETS; ++i) {\n    /* Protect socket array */\n    SYS_ARCH_PROTECT(lev);\n    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {\n      sockets[i].conn       = newconn;\n      /* The socket is not yet known to anyone, so no need to protect\n         after having marked it as used. */\n      SYS_ARCH_UNPROTECT(lev);\n      sockets[i].lastdata   = NULL;\n      sockets[i].lastoffset = 0;\n      sockets[i].rcvevent   = 0;\n      /* TCP sendbuf is empty, but the socket is not yet writable until connected\n       * (unless it has been created by accept()). */\n      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);\n      sockets[i].errevent   = 0;\n      sockets[i].err        = 0;\n      return i + LWIP_SOCKET_OFFSET;\n    }\n    SYS_ARCH_UNPROTECT(lev);\n  }\n  return -1;\n}\n```\n&emsp;&emsp;可以看到，判断socket资源是否有人在使用时，除了判断socket->conn是否为空，还会判断select_waiting是否等于0。其中select_waiting标识该socket正在被多少个线程在使用。即要释放socket资源（说释放有点不是很准确，因为在lwip中，socket资源是编译前分配的），两个重要条件是，socket->conn必须为空，并且select_waiting要为0.\n\n### 2.2 close函数\n&emsp;&emsp;接下来看看close函数的实现，看为啥会导致资源释放不完全。\n```c\nint lwip_close(int s){\n  struct lwip_sock *sock;\n  int is_tcp = 0;\n  err_t err;\n\n  LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_close(%d)\\n\", s));\n\t/* 本质上是，通过socket数组下标获取到socket结构体 */\n  sock = get_socket(s);\n  if (!sock) {\n    return -1;\n  }\n\n  if (sock->conn != NULL) {\n    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;\n  } else {\n    LWIP_ASSERT(\"sock->lastdata == NULL\", sock->lastdata == NULL);\n  }\n\n#if LWIP_IGMP\n  /* drop all possibly joined IGMP memberships */\n  lwip_socket_drop_registered_memberships(s);\n#endif /* LWIP_IGMP */\n\t/* 释放从lwip内存堆里分配到空间 */\n  err = netconn_delete(sock->conn);\n  if (err != ERR_OK) {\n    sock_set_errno(sock, err_to_errno(err));\n    return -1;\n  }\n\t/* 主要是对socket结构体成员进行反初始化，并对数据空间进行释放，看下述对该函数实现分析 */\n  free_socket(sock, is_tcp);\n  set_errno(0);\n  return 0;\n}\n```\n```c\nstatic void free_socket(struct lwip_sock *sock, int is_tcp){\n  void *lastdata;\n\n  lastdata         = sock->lastdata;\n  sock->lastdata   = NULL;\n  sock->lastoffset = 0;\n  sock->err        = 0;\n\n  /* Protect socket array */\n  /* 对socket->conn进行置空 */\n  SYS_ARCH_SET(sock->conn, NULL);\n  /* don't use 'sock' after this line, as another task might have allocated it */\n\n  if (lastdata != NULL) {\n    if (is_tcp) {\n      pbuf_free((struct pbuf *)lastdata);\n    } else {\n      netbuf_delete((struct netbuf *)lastdata);\n    }\n  }\n}\n```\n&emsp;&emsp;上述两个函数分析可知，`close`函数只能使socket->conn为空，并不能使select_waiting为0，所以其实只有`close`函数是不能使socket资源完全释放的。\n\n### 2.3 select函数\n&emsp;&emsp;从*select_waiting*名字中能比较容易的猜到，该变量跟select函数肯定是强相关的。全局搜索select_waiting，果然只有select函数有进行写操作。下面分析select函数，该函数较长，做必要的简化。\n\n```c\nint lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout){\n  u32_t waitres = 0;\n  int nready;\n  fd_set lreadset, lwriteset, lexceptset;\n  u32_t msectimeout;\n  struct lwip_select_cb select_cb;\n  int i;\n  int maxfdp2;\n#if LWIP_NETCONN_SEM_PER_THREAD\n  int waited = 0;\n#endif\n  /* Go through each socket in each list to count number of sockets which\n     currently match */\n  /* \n  *扫描所有socket对应的bit，如果有准备好，则直接将对应的bit置上，后面可以看出，该函数简单的赋值后就退出了，\n  *不涉及对select_waiting的操作。\n   */\n  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);\n\n  /* If we don't have any current events, then suspend if we are supposed to */\n  /* 只有没有相应的socket准备好并且没有超时，才回置位select_waiting, 并挂起线程。 */\n  if (!nready) {\n    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {\n      LWIP_DEBUGF(SOCKETS_DEBUG, (\"lwip_select: no timeout, returning 0\\n\"));\n      /* This is OK as the local fdsets are empty and nready is zero,\n         or we would have returned earlier. */\n      goto return_copy_fdsets;\n    }\n\n    /* 省略一堆处理，可以看到只要该socket设置了，读写异常通知，并且socket是存在的，则会将select_wainting增加1 */\n    /* Increase select_waiting for each socket we are interested in */\n    maxfdp2 = maxfdp1;\n    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {\n      if ((readset && FD_ISSET(i, readset)) ||\n          (writeset && FD_ISSET(i, writeset)) ||\n          (exceptset && FD_ISSET(i, exceptset))) {\n        struct lwip_sock *sock;\n        SYS_ARCH_PROTECT(lev);\n        sock = tryget_socket(i);\n        if (sock != NULL) {\n          sock->select_waiting++;\n          LWIP_ASSERT(\"sock->select_waiting > 0\", sock->select_waiting > 0);\n        } else {\n          /* Not a valid socket */\n          nready = -1;\n          maxfdp2 = i;\n          SYS_ARCH_UNPROTECT(lev);\n          break;\n        }\n        SYS_ARCH_UNPROTECT(lev);\n      }\n    }\n\n    if (nready >= 0) {\n    /* \n    *执行完上述操作，还会再扫描一次是否有socket有事件产生，删除细节。\n    *因为上述，如果socket资源过多，会消耗不少资源，再扫描一次可以提高效率。\n    */\n      /* 休眠指定时间，让出cpu控制权 */\n      waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);\n    }\n    /* 休眠结束， 将对应socket->select_waiting减1 */\n    /* Decrease select_waiting for each socket we are interested in */\n    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {\n      if ((readset && FD_ISSET(i, readset)) ||\n          (writeset && FD_ISSET(i, writeset)) ||\n          (exceptset && FD_ISSET(i, exceptset))) {\n        struct lwip_sock *sock;\n        SYS_ARCH_PROTECT(lev);\n        sock = tryget_socket(i);\n        /* 减1，必须socket是还在的 */\n        if (sock != NULL) {\n          /* for now, handle select_waiting==0... */\n          LWIP_ASSERT(\"sock->select_waiting > 0\", sock->select_waiting > 0);\n          if (sock->select_waiting > 0) {\n            sock->select_waiting--;\n          }\n        } else {\n          /* Not a valid socket */\n          nready = -1;\n        }\n        SYS_ARCH_UNPROTECT(lev);\n      }\n    }\n  }\n  /* 删除不影响分析代码，感兴趣参考源码。 */\n  return nready;\n}\n```\n\n**<center>这是这一张来自未来的select函数处理流程图</center>**\n\n&emsp;&emsp;参考上述代码分析，特别注意*socket->select_waiting*加1和减1的地方，可以看到，如果socket存在且的确需要监听事件，且并不是进来事件就已经产生或者已经超时，一定会加1；然后线程会有可能会进行休眠；正常情况下，休眠结束后，*socket->select_waiting*减1，离开该函数，*socket->select_waiting*恢复原值。**但是**，如果在线程休眠期间，恰巧在另外一个线程进行了close操作，事件就变味了。\n\n&emsp;&emsp;如果在休眠期间进行了`close(socket)`,则通过`tyr_socket(socket)`获取不到socket结构体，则*socket->select_waiting*不会进行减1，后面执行一系列语句后，退出该函数，*socket->select_waiting*没有恢复原值，且比进来时大1。针对该函数，*socket->select_waiting*加1的次数是*>=*减1的次数，所以如果只要在函数退出时没有恢复原值，则*socket->select_waiting*永远不可能再减为0了，此时socket资源就出现了**假占用**，该socket再也不能被其他人使用了。\n\n# 三、解决方案\n&emsp;&emsp;第二章已经对产生的原因进行了分析。解决问题的思路也想一开始提到的有两种，为了不改lwip源码，使用了第二种思路。下面用伪代码给出解决方案。需要使用到两个flag`closing_socket_flag`和·selecting_flag`。\n**thread1**\n```c\nint adaptor_closesocket(int socket){\n    while(get_select_processing()){\n        sleep(1);\n    }\n    set_closesocket_processing(true);\n    ret = close(socket);\n    set_closescoket_processing(false);\n}\n```\n\n**thread2**\n```c\nint select_loop(int socket){\n    while(get_closesocket_processing()){\n        sleep(1);\n    }\n    set_select_processing(true);\n    select_return = select(sockMAX + 1, &read_set, NULL, &exception_set, &timeout);\n    set_select_processing(false);\n}\n```\n&emsp;&emsp;上面的解决方案，我认为是最为简单通用的解决方案，当然针对两个flag肯定还是需要加锁的。另外还有一种思路就是使用通知类似于condition的方法。知道了错误原因，解决方法的思路就是做同步。\n\n# 四、写在最后\n&emsp;&emsp;LwIP无疑是一个很优秀的轻量版的TCP/IP协议实现了，虽然上面的socket接口都是简化版，当时以为如果功能是支持的，在使用以为可以跟BSD的一样。因为在开发DoIP时是跨平台，上层应用代码是一样的，在windows和linux都是支持的，所以比较简单就初步定位出了问题应该是出在了LwIP协议本身，但是当时由于现象特别奇怪（略过不表），也费了一般周折才最终定位出来。一开始觉得认为这是一个bug，后面跟老虞（技术偶像）深度讨论过，觉得这也不属于LwIP本身的一个bug，感觉更像是feature实现的不够完整，但是light weight也已经足够了。同时在使用LwIP本身也学到了很多技巧，如连接符**##**的使用、在MCU上实现分配空间的解决方案。\n\n![](https://savannah.nongnu.org/images/Savannah.theme/floating.png)\n\n\n\n\n","slug":"lwip-close-socket-select","published":1,"updated":"2021-05-05T07:38:31.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckob5o5fy0001y0wx1cyh790e","content":"<blockquote>\n<p>这篇文章本应该在4月就写好的，但是博客评论系统一直没有搭建好，走了很多弯路，现在好了，delay这么久，终于要要补过来了。</p>\n</blockquote>\n<blockquote>\n<p>该文章完全原创，除通用、广泛的知识点外，均为个人总结，如需转载还望备注出处，同时如有错误还请指出，虚心接受。</p>\n</blockquote>\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><h2 id=\"1-题外话\"><a href=\"#1-题外话\" class=\"headerlink\" title=\"1. 题外话\"></a>1. 题外话</h2><p>  以这篇文章为第一篇技术文章，一是萌生写博客的契机是换工作，另外就是这篇文章是我在怿星解决的最后一个bug。</p>\n<p><img src=\"/medias/lwip-close-socket-select/jinbao-ept.jpg\"></p>\n<p>  问题来源是，跑在基于LwIP+FreeRTOS环境的DoIP，在反复初始化/反初始化时几次之后就会失败了。年初由于任务紧张，检查了下初始化和反初始化函数的流程，改掉了几处可能会出现问题的地方，问题依旧。但是同样的上层处理代码，在windows和linux环境下是没问题的，基本怀疑是LwIP某处不完善引起。一直拖到要离职，终于在离开的最后一天解决了，也算是给在怿星的DoIP协议栈画上一个属于自己的句号。</p>\n<p>   LwIP 全名为 Light weight IP，意思是轻量化的 TCP/IP 协议， 是瑞典计算机科学院(SICS)的 Adam Dunkels 开发的一个小型开源的 TCP/IP 协议栈。 LwIP 的设计初衷是：用少量的资源消耗(RAM)实现一个较为完整的 TCP/IP 协议栈，其中“完整”主要指的是 TCP 协议的完整性， 实现的重点是在保持 TCP 协议主要功能的基础上减少对 RAM 的占用。此外 LwIP既可以移植到操作系统上运行，也可以在无操作系统的情况下独立运行。</p>\n<h2 id=\"2-原因\"><a href=\"#2-原因\" class=\"headerlink\" title=\"2. 原因\"></a>2. 原因</h2><p>  引起该问题的根本原因是，LwIP select函数里如果判断对应的socket没有事件产生（读/写/异常），进行简单处理后则改线程休眠，让出cpu控制权。如果在select休眠期间，进行了close socket的操作，会释放对应的socket pcb（<strong>close(socket)<strong>是成功的），然后在select休眠结束后，判断该socket资源不存在，则直接退出select函数，</strong>但是</strong>此时该socket的select_wait标志位没被清除。LwIP在分配socket时（资源都是静态分配的，类似于有一个socket数组，若分配则对应标志位为真），socket是否空闲是会对select_wait该标志位进行判断，所以即使该socket没有被使用，调用*socket()*函数时也会认为该socket是被占用的，所以几次之后，socket资源被<strong>假耗尽</strong>。</p>\n<h2 id=\"3-解决\"><a href=\"#3-解决\" class=\"headerlink\" title=\"3. 解决\"></a>3. 解决</h2><p>  知道原因后，问题就好解决了。有以下两个解决问题的思路。</p>\n<ol>\n<li>更改LwIP源码，对对应的标志位进行判断和清除。该解决方案，如果能够push到LwIP主分支，则是一劳永逸的，否则如果要跟随LwIP官方更新，自己得维护一套代码，并持续merge。</li>\n<li>使用者，在使用接口时，做同步。即在select休眠期间不允许进行close socket操作，同时在close socket也不允许进入select函数。所以只要在两个函数之间加上条件判断就好。</li>\n</ol>\n<p>  考虑到维护成本，最终选择方案2.</p>\n<h1 id=\"二、分析\"><a href=\"#二、分析\" class=\"headerlink\" title=\"二、分析\"></a>二、分析</h1><p>  解决思路在上面已经给出，下面主要想从源码级对问题进行分析。原因中，涉及三个函数，</p>\n<ol>\n<li><p>socket函数，即lwip_socket，函数原型如下：<br><code>int lwip_socket(int domain, int type, int protocol)</code></p>\n</li>\n<li><p>close函数，即lwip_close，原型如下：<br><code>int lwip_close(int s)</code></p>\n</li>\n<li><p>select函数， 即lwip_select(),原型如下：<br><code>intlwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)</code></p>\n</li>\n</ol>\n<h2 id=\"1-拓展\"><a href=\"#1-拓展\" class=\"headerlink\" title=\"1. 拓展\"></a>1. 拓展</h2><p>  LwIP本身提供了类似于bsd socket编程模型，同时也实现了简易版的select函数。</p>\n<p>  关于socket编程的教程是实在太多了，在这不再重复去描述，<a href=\"https://blog.csdn.net/weixin_39634961/article/details/80236161\">socket编程参考链接</a>。辅导过一些人进行socket编程，初学者包括我自己，容易忽略的一点就是，作为server时，listen-socket和accept-socket不是一回事。可以理解为listen-socket窗口，窗口只是负责监听有谁要走通道，走哪个通道，并把真正的通道–accept-socket给到上层。对于其他的，感觉跑跑示例程序，单步走一下，就基本理解了。</p>\n<p>  在不使用select时，并没有发现socket资源释放不完全的问题。本文不展开讲解lwip select的实现，但是对于select的使用需要稍微展开下，<a href=\"https://www.cnblogs.com/skyfsm/p/7079458.html\">select编程参考链接</a>。关于select本质上是一个同步I/O函数，只不过改同步函数可以同时监控多个”IO”通道，所以也称为多路复用。熟悉了上面的socket编程后，如果需要实现多个socket同时通信的话，就应该给每个socket开一个线程，在负载不是特别高的情况下会显得效率特别低，同时线程太多，就不得不考虑资源竞争的问题，如果竞态条件太多，也容易产生问题（<strong>多线程资源竞争问题</strong>）。多路复用即是用一个线程监听多个通道（描述符），一旦某个描述符就绪（可读、可写或者异常），就通知程序进行相应的读写操作。上庙的描述，看起来select是异步的，其实不然，因为产生读写事件后，应用程序必须自己负责读写操作，读写操作本身是阻塞的，而异步I/O是不需要自己读写；同时即使没有读写事件产生，select函数本身也是阻塞的，加了超时也是阻塞的，只不过给阻塞增加了一个时间限制。</p>\n<p>  select最早于1983年出现在4.2BSD中，它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。从<a href=\"https://www.cnblogs.com/skyfsm/p/7079458.html\">select编程参考链接</a>中可以看出最终每个socket都对应到每个bit上，如果对应的socket有事件产生，则会被置位。</p>\n<h2 id=\"2-函数分析\"><a href=\"#2-函数分析\" class=\"headerlink\" title=\"2. 函数分析\"></a>2. 函数分析</h2><p>  该节分析函数socket，close，select实现细节。<strong>LwIP版本2.1.4</strong>。</p>\n<h3 id=\"2-1-socket函数\"><a href=\"#2-1-socket函数\" class=\"headerlink\" title=\"2.1 socket函数\"></a>2.1 socket函数</h3><p>  lwip中<code>#define socket lwip_socket</code>.</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">lwip_socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">netconn</span> <span class=\"token operator\">*</span>conn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LWIP_UNUSED_ARG</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* @todo: check this */</span>\n    <span class=\"token comment\">/* create a netconn */</span>\n    <span class=\"token comment\">/* 下面主要是针对不同的socket类型，分配空间，对相应的成员进行赋值，空间资源为预分配给lwip的堆空间\n     */</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> SOCK_RAW<span class=\"token operator\">:</span>\n        conn <span class=\"token operator\">=</span> <span class=\"token function\">netconn_new_with_proto_and_callback</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">DOMAIN_TO_NETCONN_TYPE</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">,</span> NETCONN_RAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">u8_t</span><span class=\"token punctuation\">)</span>protocol<span class=\"token punctuation\">,</span>\n            event_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%s, SOCK_RAW, %d) = \"</span><span class=\"token punctuation\">,</span>\n                     domain <span class=\"token operator\">==</span> PF_INET <span class=\"token operator\">?</span> <span class=\"token string\">\"PF_INET\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SOCK_DGRAM<span class=\"token operator\">:</span>\n        conn <span class=\"token operator\">=</span> <span class=\"token function\">netconn_new_with_callback</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">DOMAIN_TO_NETCONN_TYPE</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>protocol <span class=\"token operator\">==</span> IPPROTO_UDPLITE<span class=\"token punctuation\">)</span>\n                                                <span class=\"token operator\">?</span> NETCONN_UDPLITE\n                                                <span class=\"token operator\">:</span> NETCONN_UDP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            event_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%s, SOCK_DGRAM, %d) = \"</span><span class=\"token punctuation\">,</span>\n                     domain <span class=\"token operator\">==</span> PF_INET <span class=\"token operator\">?</span> <span class=\"token string\">\"PF_INET\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SOCK_STREAM<span class=\"token operator\">:</span>\n        conn <span class=\"token operator\">=</span> <span class=\"token function\">netconn_new_with_callback</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">DOMAIN_TO_NETCONN_TYPE</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">,</span> NETCONN_TCP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%s, SOCK_STREAM, %d) = \"</span><span class=\"token punctuation\">,</span>\n                     domain <span class=\"token operator\">==</span> PF_INET <span class=\"token operator\">?</span> <span class=\"token string\">\"PF_INET\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%d, %d/UNKNOWN, %d) = -1\\n\"</span><span class=\"token punctuation\">,</span>\n                                    domain<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span>EINVAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"-1 / ENOBUFS (could not create netconn)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span>ENOBUFS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* \n    *上面已经分配好了，对应的connection空间，最终要对应的socket上，即socket数组，见下面alloc_socket实现。 \n    */</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">alloc_socket</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">netconn_delete</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span>ENFILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    conn<span class=\"token operator\">-&gt;</span>socket <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">alloc_socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">netconn</span> <span class=\"token operator\">*</span>newconn<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> accepted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">SYS_ARCH_DECL_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* allocate a new socket identifier */</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM_SOCKETS<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Protect socket array */</span>\n    <span class=\"token function\">SYS_ARCH_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>select_waiting <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conn       <span class=\"token operator\">=</span> newconn<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">/* The socket is not yet known to anyone, so no need to protect\n         after having marked it as used. */</span>\n      <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lastdata   <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lastoffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rcvevent   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">/* TCP sendbuf is empty, but the socket is not yet writable until connected\n       * (unless it has been created by accept()). */</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sendevent  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NETCONNTYPE_GROUP</span><span class=\"token punctuation\">(</span>newconn<span class=\"token operator\">-&gt;</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NETCONN_TCP <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>accepted <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>errevent   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>err        <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> LWIP_SOCKET_OFFSET<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  可以看到，判断socket资源是否有人在使用时，除了判断socket-&gt;conn是否为空，还会判断select_waiting是否等于0。其中select_waiting标识该socket正在被多少个线程在使用。即要释放socket资源（说释放有点不是很准确，因为在lwip中，socket资源是编译前分配的），两个重要条件是，socket-&gt;conn必须为空，并且select_waiting要为0.</p>\n<h3 id=\"2-2-close函数\"><a href=\"#2-2-close函数\" class=\"headerlink\" title=\"2.2 close函数\"></a>2.2 close函数</h3><p>  接下来看看close函数的实现，看为啥会导致资源释放不完全。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">lwip_close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> is_tcp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">err_t</span> err<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_close(%d)\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* 本质上是，通过socket数组下标获取到socket结构体 */</span>\n  sock <span class=\"token operator\">=</span> <span class=\"token function\">get_socket</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-&gt;</span>conn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    is_tcp <span class=\"token operator\">=</span> <span class=\"token function\">NETCONNTYPE_GROUP</span><span class=\"token punctuation\">(</span><span class=\"token function\">netconn_type</span><span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-&gt;</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NETCONN_TCP<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">LWIP_ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sock-&gt;lastdata == NULL\"</span><span class=\"token punctuation\">,</span> sock<span class=\"token operator\">-&gt;</span>lastdata <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">LWIP_IGMP</span></span>\n  <span class=\"token comment\">/* drop all possibly joined IGMP memberships */</span>\n  <span class=\"token function\">lwip_socket_drop_registered_memberships</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* LWIP_IGMP */</span></span>\n\t<span class=\"token comment\">/* 释放从lwip内存堆里分配到空间 */</span>\n  err <span class=\"token operator\">=</span> <span class=\"token function\">netconn_delete</span><span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-&gt;</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> ERR_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sock_set_errno</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token function\">err_to_errno</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">/* 主要是对socket结构体成员进行反初始化，并对数据空间进行释放，看下述对该函数实现分析 */</span>\n  <span class=\"token function\">free_socket</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> is_tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">free_socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> is_tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>lastdata<span class=\"token punctuation\">;</span>\n\n  lastdata         <span class=\"token operator\">=</span> sock<span class=\"token operator\">-&gt;</span>lastdata<span class=\"token punctuation\">;</span>\n  sock<span class=\"token operator\">-&gt;</span>lastdata   <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  sock<span class=\"token operator\">-&gt;</span>lastoffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  sock<span class=\"token operator\">-&gt;</span>err        <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Protect socket array */</span>\n  <span class=\"token comment\">/* 对socket-&gt;conn进行置空 */</span>\n  <span class=\"token function\">SYS_ARCH_SET</span><span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-&gt;</span>conn<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* don't use 'sock' after this line, as another task might have allocated it */</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastdata <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_tcp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">pbuf_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pbuf</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">netbuf_delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">netbuf</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  上述两个函数分析可知，<code>close</code>函数只能使socket-&gt;conn为空，并不能使select_waiting为0，所以其实只有<code>close</code>函数是不能使socket资源完全释放的。</p>\n<h3 id=\"2-3-select函数\"><a href=\"#2-3-select函数\" class=\"headerlink\" title=\"2.3 select函数\"></a>2.3 select函数</h3><p>  从<em>select_waiting</em>名字中能比较容易的猜到，该变量跟select函数肯定是强相关的。全局搜索select_waiting，果然只有select函数有进行写操作。下面分析select函数，该函数较长，做必要的简化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">lwip_select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxfdp1<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readset<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writeset<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>exceptset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">u32_t</span> waitres <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> nready<span class=\"token punctuation\">;</span>\n  fd_set lreadset<span class=\"token punctuation\">,</span> lwriteset<span class=\"token punctuation\">,</span> lexceptset<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">u32_t</span> msectimeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_select_cb</span> select_cb<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> maxfdp2<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">LWIP_NETCONN_SEM_PER_THREAD</span></span>\n  <span class=\"token keyword\">int</span> waited <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token comment\">/* Go through each socket in each list to count number of sockets which\n     currently match */</span>\n  <span class=\"token comment\">/* \n  *扫描所有socket对应的bit，如果有准备好，则直接将对应的bit置上，后面可以看出，该函数简单的赋值后就退出了，\n  *不涉及对select_waiting的操作。\n   */</span>\n  nready <span class=\"token operator\">=</span> <span class=\"token function\">lwip_selscan</span><span class=\"token punctuation\">(</span>maxfdp1<span class=\"token punctuation\">,</span> readset<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">,</span> exceptset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lreadset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lwriteset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lexceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* If we don't have any current events, then suspend if we are supposed to */</span>\n  <span class=\"token comment\">/* 只有没有相应的socket准备好并且没有超时，才回置位select_waiting, 并挂起线程。 */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&amp;&amp;</span> timeout<span class=\"token operator\">-&gt;</span>tv_sec <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> timeout<span class=\"token operator\">-&gt;</span>tv_usec <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_select: no timeout, returning 0\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">/* This is OK as the local fdsets are empty and nready is zero,\n         or we would have returned earlier. */</span>\n      <span class=\"token keyword\">goto</span> return_copy_fdsets<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* 省略一堆处理，可以看到只要该socket设置了，读写异常通知，并且socket是存在的，则会将select_wainting增加1 */</span>\n    <span class=\"token comment\">/* Increase select_waiting for each socket we are interested in */</span>\n    maxfdp2 <span class=\"token operator\">=</span> maxfdp1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> LWIP_SOCKET_OFFSET<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxfdp1<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>writeset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>exceptset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> exceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SYS_ARCH_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sock <span class=\"token operator\">=</span> <span class=\"token function\">tryget_socket</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          sock<span class=\"token operator\">-&gt;</span>select_waiting<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">LWIP_ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sock-&gt;select_waiting &gt; 0\"</span><span class=\"token punctuation\">,</span> sock<span class=\"token operator\">-&gt;</span>select_waiting <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">/* Not a valid socket */</span>\n          nready <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          maxfdp2 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nready <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* \n    *执行完上述操作，还会再扫描一次是否有socket有事件产生，删除细节。\n    *因为上述，如果socket资源过多，会消耗不少资源，再扫描一次可以提高效率。\n    */</span>\n      <span class=\"token comment\">/* 休眠指定时间，让出cpu控制权 */</span>\n      waitres <span class=\"token operator\">=</span> <span class=\"token function\">sys_arch_sem_wait</span><span class=\"token punctuation\">(</span><span class=\"token function\">SELECT_SEM_PTR</span><span class=\"token punctuation\">(</span>select_cb<span class=\"token punctuation\">.</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msectimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* 休眠结束， 将对应socket-&gt;select_waiting减1 */</span>\n    <span class=\"token comment\">/* Decrease select_waiting for each socket we are interested in */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> LWIP_SOCKET_OFFSET<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxfdp2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>writeset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>exceptset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> exceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SYS_ARCH_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sock <span class=\"token operator\">=</span> <span class=\"token function\">tryget_socket</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 减1，必须socket是还在的 */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">/* for now, handle select_waiting==0... */</span>\n          <span class=\"token function\">LWIP_ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sock-&gt;select_waiting &gt; 0\"</span><span class=\"token punctuation\">,</span> sock<span class=\"token operator\">-&gt;</span>select_waiting <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-&gt;</span>select_waiting <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sock<span class=\"token operator\">-&gt;</span>select_waiting<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">/* Not a valid socket */</span>\n          nready <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/* 删除不影响分析代码，感兴趣参考源码。 */</span>\n  <span class=\"token keyword\">return</span> nready<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong></strong></p><center><strong>这是这一张来自未来的select函数处理流程图</strong></center><p></p>\n<p>  参考上述代码分析，特别注意<em>socket-&gt;select_waiting</em>加1和减1的地方，可以看到，如果socket存在且的确需要监听事件，且并不是进来事件就已经产生或者已经超时，一定会加1；然后线程会有可能会进行休眠；正常情况下，休眠结束后，<em>socket-&gt;select_waiting</em>减1，离开该函数，<em>socket-&gt;select_waiting</em>恢复原值。<strong>但是</strong>，如果在线程休眠期间，恰巧在另外一个线程进行了close操作，事件就变味了。</p>\n<p>  如果在休眠期间进行了<code>close(socket)</code>,则通过<code>tyr_socket(socket)</code>获取不到socket结构体，则<em>socket-&gt;select_waiting</em>不会进行减1，后面执行一系列语句后，退出该函数，<em>socket-&gt;select_waiting</em>没有恢复原值，且比进来时大1。针对该函数，<em>socket-&gt;select_waiting</em>加1的次数是*&gt;=<em>减1的次数，所以如果只要在函数退出时没有恢复原值，则</em>socket-&gt;select_waiting*永远不可能再减为0了，此时socket资源就出现了<strong>假占用</strong>，该socket再也不能被其他人使用了。</p>\n<h1 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h1><p>  第二章已经对产生的原因进行了分析。解决问题的思路也想一开始提到的有两种，为了不改lwip源码，使用了第二种思路。下面用伪代码给出解决方案。需要使用到两个flag<code>closing_socket_flag</code>和·selecting_flag`。<br><strong>thread1</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">adaptor_closesocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_select_processing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set_closesocket_processing</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_closescoket_processing</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>thread2</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">select_loop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_closesocket_processing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set_select_processing</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    select_return <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>sockMAX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>read_set<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>exception_set<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_select_processing</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>  上面的解决方案，我认为是最为简单通用的解决方案，当然针对两个flag肯定还是需要加锁的。另外还有一种思路就是使用通知类似于condition的方法。知道了错误原因，解决方法的思路就是做同步。</p>\n<h1 id=\"四、写在最后\"><a href=\"#四、写在最后\" class=\"headerlink\" title=\"四、写在最后\"></a>四、写在最后</h1><p>  LwIP无疑是一个很优秀的轻量版的TCP/IP协议实现了，虽然上面的socket接口都是简化版，当时以为如果功能是支持的，在使用以为可以跟BSD的一样。因为在开发DoIP时是跨平台，上层应用代码是一样的，在windows和linux都是支持的，所以比较简单就初步定位出了问题应该是出在了LwIP协议本身，但是当时由于现象特别奇怪（略过不表），也费了一般周折才最终定位出来。一开始觉得认为这是一个bug，后面跟老虞（技术偶像）深度讨论过，觉得这也不属于LwIP本身的一个bug，感觉更像是feature实现的不够完整，但是light weight也已经足够了。同时在使用LwIP本身也学到了很多技巧，如连接符**##**的使用、在MCU上实现分配空间的解决方案。</p>\n<p><img src=\"https://savannah.nongnu.org/images/Savannah.theme/floating.png\"></p>\n","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>这篇文章本应该在4月就写好的，但是博客评论系统一直没有搭建好，走了很多弯路，现在好了，delay这么久，终于要要补过来了。</p>\n</blockquote>\n<blockquote>\n<p>该文章完全原创，除通用、广泛的知识点外，均为个人总结，如需转载还望备注出处，同时如有错误还请指出，虚心接受。</p>\n</blockquote>\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><h2 id=\"1-题外话\"><a href=\"#1-题外话\" class=\"headerlink\" title=\"1. 题外话\"></a>1. 题外话</h2><p>&emsp;&emsp;以这篇文章为第一篇技术文章，一是萌生写博客的契机是换工作，另外就是这篇文章是我在怿星解决的最后一个bug。</p>\n<p><img src=\"/medias/lwip-close-socket-select/jinbao-ept.jpg\"></p>\n<p>&emsp;&emsp;问题来源是，跑在基于LwIP+FreeRTOS环境的DoIP，在反复初始化/反初始化时几次之后就会失败了。年初由于任务紧张，检查了下初始化和反初始化函数的流程，改掉了几处可能会出现问题的地方，问题依旧。但是同样的上层处理代码，在windows和linux环境下是没问题的，基本怀疑是LwIP某处不完善引起。一直拖到要离职，终于在离开的最后一天解决了，也算是给在怿星的DoIP协议栈画上一个属于自己的句号。</p>\n<p>&emsp;&emsp; LwIP 全名为 Light weight IP，意思是轻量化的 TCP/IP 协议， 是瑞典计算机科学院(SICS)的 Adam Dunkels 开发的一个小型开源的 TCP/IP 协议栈。 LwIP 的设计初衷是：用少量的资源消耗(RAM)实现一个较为完整的 TCP/IP 协议栈，其中“完整”主要指的是 TCP 协议的完整性， 实现的重点是在保持 TCP 协议主要功能的基础上减少对 RAM 的占用。此外 LwIP既可以移植到操作系统上运行，也可以在无操作系统的情况下独立运行。</p>\n<h2 id=\"2-原因\"><a href=\"#2-原因\" class=\"headerlink\" title=\"2. 原因\"></a>2. 原因</h2><p>&emsp;&emsp;引起该问题的根本原因是，LwIP select函数里如果判断对应的socket没有事件产生（读/写/异常），进行简单处理后则改线程休眠，让出cpu控制权。如果在select休眠期间，进行了close socket的操作，会释放对应的socket pcb（<strong>close(socket)<strong>是成功的），然后在select休眠结束后，判断该socket资源不存在，则直接退出select函数，</strong>但是</strong>此时该socket的select_wait标志位没被清除。LwIP在分配socket时（资源都是静态分配的，类似于有一个socket数组，若分配则对应标志位为真），socket是否空闲是会对select_wait该标志位进行判断，所以即使该socket没有被使用，调用*socket()*函数时也会认为该socket是被占用的，所以几次之后，socket资源被<strong>假耗尽</strong>。</p>\n<h2 id=\"3-解决\"><a href=\"#3-解决\" class=\"headerlink\" title=\"3. 解决\"></a>3. 解决</h2><p>&emsp;&emsp;知道原因后，问题就好解决了。有以下两个解决问题的思路。</p>\n<ol>\n<li>更改LwIP源码，对对应的标志位进行判断和清除。该解决方案，如果能够push到LwIP主分支，则是一劳永逸的，否则如果要跟随LwIP官方更新，自己得维护一套代码，并持续merge。</li>\n<li>使用者，在使用接口时，做同步。即在select休眠期间不允许进行close socket操作，同时在close socket也不允许进入select函数。所以只要在两个函数之间加上条件判断就好。</li>\n</ol>\n<p>&emsp;&emsp;考虑到维护成本，最终选择方案2.</p>\n<h1 id=\"二、分析\"><a href=\"#二、分析\" class=\"headerlink\" title=\"二、分析\"></a>二、分析</h1><p>&emsp;&emsp;解决思路在上面已经给出，下面主要想从源码级对问题进行分析。原因中，涉及三个函数，</p>\n<ol>\n<li><p>socket函数，即lwip_socket，函数原型如下：<br><code>int lwip_socket(int domain, int type, int protocol)</code></p>\n</li>\n<li><p>close函数，即lwip_close，原型如下：<br><code>int lwip_close(int s)</code></p>\n</li>\n<li><p>select函数， 即lwip_select(),原型如下：<br><code>intlwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)</code></p>\n</li>\n</ol>\n<h2 id=\"1-拓展\"><a href=\"#1-拓展\" class=\"headerlink\" title=\"1. 拓展\"></a>1. 拓展</h2><p>&emsp;&emsp;LwIP本身提供了类似于bsd socket编程模型，同时也实现了简易版的select函数。</p>\n<p>&emsp;&emsp;关于socket编程的教程是实在太多了，在这不再重复去描述，<a href=\"https://blog.csdn.net/weixin_39634961/article/details/80236161\">socket编程参考链接</a>。辅导过一些人进行socket编程，初学者包括我自己，容易忽略的一点就是，作为server时，listen-socket和accept-socket不是一回事。可以理解为listen-socket窗口，窗口只是负责监听有谁要走通道，走哪个通道，并把真正的通道–accept-socket给到上层。对于其他的，感觉跑跑示例程序，单步走一下，就基本理解了。</p>\n<p>&emsp;&emsp;在不使用select时，并没有发现socket资源释放不完全的问题。本文不展开讲解lwip select的实现，但是对于select的使用需要稍微展开下，<a href=\"https://www.cnblogs.com/skyfsm/p/7079458.html\">select编程参考链接</a>。关于select本质上是一个同步I/O函数，只不过改同步函数可以同时监控多个”IO”通道，所以也称为多路复用。熟悉了上面的socket编程后，如果需要实现多个socket同时通信的话，就应该给每个socket开一个线程，在负载不是特别高的情况下会显得效率特别低，同时线程太多，就不得不考虑资源竞争的问题，如果竞态条件太多，也容易产生问题（<strong>多线程资源竞争问题</strong>）。多路复用即是用一个线程监听多个通道（描述符），一旦某个描述符就绪（可读、可写或者异常），就通知程序进行相应的读写操作。上庙的描述，看起来select是异步的，其实不然，因为产生读写事件后，应用程序必须自己负责读写操作，读写操作本身是阻塞的，而异步I/O是不需要自己读写；同时即使没有读写事件产生，select函数本身也是阻塞的，加了超时也是阻塞的，只不过给阻塞增加了一个时间限制。</p>\n<p>&emsp;&emsp;select最早于1983年出现在4.2BSD中，它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。从<a href=\"https://www.cnblogs.com/skyfsm/p/7079458.html\">select编程参考链接</a>中可以看出最终每个socket都对应到每个bit上，如果对应的socket有事件产生，则会被置位。</p>\n<h2 id=\"2-函数分析\"><a href=\"#2-函数分析\" class=\"headerlink\" title=\"2. 函数分析\"></a>2. 函数分析</h2><p>&emsp;&emsp;该节分析函数socket，close，select实现细节。<strong>LwIP版本2.1.4</strong>。</p>\n<h3 id=\"2-1-socket函数\"><a href=\"#2-1-socket函数\" class=\"headerlink\" title=\"2.1 socket函数\"></a>2.1 socket函数</h3><p>&emsp;&emsp;lwip中<code>#define socket lwip_socket</code>.</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">lwip_socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> domain<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> protocol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">netconn</span> <span class=\"token operator\">*</span>conn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LWIP_UNUSED_ARG</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* @todo: check this */</span>\n    <span class=\"token comment\">/* create a netconn */</span>\n    <span class=\"token comment\">/* 下面主要是针对不同的socket类型，分配空间，对相应的成员进行赋值，空间资源为预分配给lwip的堆空间\n     */</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> SOCK_RAW<span class=\"token operator\">:</span>\n        conn <span class=\"token operator\">=</span> <span class=\"token function\">netconn_new_with_proto_and_callback</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">DOMAIN_TO_NETCONN_TYPE</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">,</span> NETCONN_RAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">u8_t</span><span class=\"token punctuation\">)</span>protocol<span class=\"token punctuation\">,</span>\n            event_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%s, SOCK_RAW, %d) = \"</span><span class=\"token punctuation\">,</span>\n                     domain <span class=\"token operator\">==</span> PF_INET <span class=\"token operator\">?</span> <span class=\"token string\">\"PF_INET\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SOCK_DGRAM<span class=\"token operator\">:</span>\n        conn <span class=\"token operator\">=</span> <span class=\"token function\">netconn_new_with_callback</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">DOMAIN_TO_NETCONN_TYPE</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>protocol <span class=\"token operator\">==</span> IPPROTO_UDPLITE<span class=\"token punctuation\">)</span>\n                                                <span class=\"token operator\">?</span> NETCONN_UDPLITE\n                                                <span class=\"token operator\">:</span> NETCONN_UDP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            event_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%s, SOCK_DGRAM, %d) = \"</span><span class=\"token punctuation\">,</span>\n                     domain <span class=\"token operator\">==</span> PF_INET <span class=\"token operator\">?</span> <span class=\"token string\">\"PF_INET\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> SOCK_STREAM<span class=\"token operator\">:</span>\n        conn <span class=\"token operator\">=</span> <span class=\"token function\">netconn_new_with_callback</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">DOMAIN_TO_NETCONN_TYPE</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">,</span> NETCONN_TCP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%s, SOCK_STREAM, %d) = \"</span><span class=\"token punctuation\">,</span>\n                     domain <span class=\"token operator\">==</span> PF_INET <span class=\"token operator\">?</span> <span class=\"token string\">\"PF_INET\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"UNKNOWN\"</span><span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_socket(%d, %d/UNKNOWN, %d) = -1\\n\"</span><span class=\"token punctuation\">,</span>\n                                    domain<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span>EINVAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token string\">\"-1 / ENOBUFS (could not create netconn)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span>ENOBUFS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/* \n    *上面已经分配好了，对应的connection空间，最终要对应的socket上，即socket数组，见下面alloc_socket实现。 \n    */</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">alloc_socket</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">netconn_delete</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span>ENFILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    conn<span class=\"token operator\">-></span>socket <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">alloc_socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">netconn</span> <span class=\"token operator\">*</span>newconn<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> accepted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">SYS_ARCH_DECL_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* allocate a new socket identifier */</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NUM_SOCKETS<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* Protect socket array */</span>\n    <span class=\"token function\">SYS_ARCH_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>select_waiting <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>conn       <span class=\"token operator\">=</span> newconn<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">/* The socket is not yet known to anyone, so no need to protect\n         after having marked it as used. */</span>\n      <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lastdata   <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lastoffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rcvevent   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">/* TCP sendbuf is empty, but the socket is not yet writable until connected\n       * (unless it has been created by accept()). */</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sendevent  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NETCONNTYPE_GROUP</span><span class=\"token punctuation\">(</span>newconn<span class=\"token operator\">-></span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NETCONN_TCP <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>accepted <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>errevent   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      sockets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>err        <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> LWIP_SOCKET_OFFSET<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;&emsp;可以看到，判断socket资源是否有人在使用时，除了判断socket-&gt;conn是否为空，还会判断select_waiting是否等于0。其中select_waiting标识该socket正在被多少个线程在使用。即要释放socket资源（说释放有点不是很准确，因为在lwip中，socket资源是编译前分配的），两个重要条件是，socket-&gt;conn必须为空，并且select_waiting要为0.</p>\n<h3 id=\"2-2-close函数\"><a href=\"#2-2-close函数\" class=\"headerlink\" title=\"2.2 close函数\"></a>2.2 close函数</h3><p>&emsp;&emsp;接下来看看close函数的实现，看为啥会导致资源释放不完全。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">lwip_close</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> is_tcp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">err_t</span> err<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_close(%d)\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* 本质上是，通过socket数组下标获取到socket结构体 */</span>\n  sock <span class=\"token operator\">=</span> <span class=\"token function\">get_socket</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-></span>conn <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    is_tcp <span class=\"token operator\">=</span> <span class=\"token function\">NETCONNTYPE_GROUP</span><span class=\"token punctuation\">(</span><span class=\"token function\">netconn_type</span><span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-></span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> NETCONN_TCP<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">LWIP_ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sock->lastdata == NULL\"</span><span class=\"token punctuation\">,</span> sock<span class=\"token operator\">-></span>lastdata <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">LWIP_IGMP</span></span>\n  <span class=\"token comment\">/* drop all possibly joined IGMP memberships */</span>\n  <span class=\"token function\">lwip_socket_drop_registered_memberships</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">/* LWIP_IGMP */</span></span>\n\t<span class=\"token comment\">/* 释放从lwip内存堆里分配到空间 */</span>\n  err <span class=\"token operator\">=</span> <span class=\"token function\">netconn_delete</span><span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-></span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> ERR_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sock_set_errno</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> <span class=\"token function\">err_to_errno</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/* 主要是对socket结构体成员进行反初始化，并对数据空间进行释放，看下述对该函数实现分析 */</span>\n  <span class=\"token function\">free_socket</span><span class=\"token punctuation\">(</span>sock<span class=\"token punctuation\">,</span> is_tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">set_errno</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">free_socket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> is_tcp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>lastdata<span class=\"token punctuation\">;</span>\n\n  lastdata         <span class=\"token operator\">=</span> sock<span class=\"token operator\">-></span>lastdata<span class=\"token punctuation\">;</span>\n  sock<span class=\"token operator\">-></span>lastdata   <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  sock<span class=\"token operator\">-></span>lastoffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  sock<span class=\"token operator\">-></span>err        <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Protect socket array */</span>\n  <span class=\"token comment\">/* 对socket->conn进行置空 */</span>\n  <span class=\"token function\">SYS_ARCH_SET</span><span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-></span>conn<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* don't use 'sock' after this line, as another task might have allocated it */</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastdata <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_tcp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">pbuf_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pbuf</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">netbuf_delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">netbuf</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lastdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;&emsp;上述两个函数分析可知，<code>close</code>函数只能使socket-&gt;conn为空，并不能使select_waiting为0，所以其实只有<code>close</code>函数是不能使socket资源完全释放的。</p>\n<h3 id=\"2-3-select函数\"><a href=\"#2-3-select函数\" class=\"headerlink\" title=\"2.3 select函数\"></a>2.3 select函数</h3><p>&emsp;&emsp;从<em>select_waiting</em>名字中能比较容易的猜到，该变量跟select函数肯定是强相关的。全局搜索select_waiting，果然只有select函数有进行写操作。下面分析select函数，该函数较长，做必要的简化。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">lwip_select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxfdp1<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>readset<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>writeset<span class=\"token punctuation\">,</span> fd_set <span class=\"token operator\">*</span>exceptset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">u32_t</span> waitres <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> nready<span class=\"token punctuation\">;</span>\n  fd_set lreadset<span class=\"token punctuation\">,</span> lwriteset<span class=\"token punctuation\">,</span> lexceptset<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">u32_t</span> msectimeout<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_select_cb</span> select_cb<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> maxfdp2<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">LWIP_NETCONN_SEM_PER_THREAD</span></span>\n  <span class=\"token keyword\">int</span> waited <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token comment\">/* Go through each socket in each list to count number of sockets which\n     currently match */</span>\n  <span class=\"token comment\">/* \n  *扫描所有socket对应的bit，如果有准备好，则直接将对应的bit置上，后面可以看出，该函数简单的赋值后就退出了，\n  *不涉及对select_waiting的操作。\n   */</span>\n  nready <span class=\"token operator\">=</span> <span class=\"token function\">lwip_selscan</span><span class=\"token punctuation\">(</span>maxfdp1<span class=\"token punctuation\">,</span> readset<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">,</span> exceptset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lreadset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lwriteset<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lexceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* If we don't have any current events, then suspend if we are supposed to */</span>\n  <span class=\"token comment\">/* 只有没有相应的socket准备好并且没有超时，才回置位select_waiting, 并挂起线程。 */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">&amp;&amp;</span> timeout<span class=\"token operator\">-></span>tv_sec <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> timeout<span class=\"token operator\">-></span>tv_usec <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">LWIP_DEBUGF</span><span class=\"token punctuation\">(</span>SOCKETS_DEBUG<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"lwip_select: no timeout, returning 0\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">/* This is OK as the local fdsets are empty and nready is zero,\n         or we would have returned earlier. */</span>\n      <span class=\"token keyword\">goto</span> return_copy_fdsets<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/* 省略一堆处理，可以看到只要该socket设置了，读写异常通知，并且socket是存在的，则会将select_wainting增加1 */</span>\n    <span class=\"token comment\">/* Increase select_waiting for each socket we are interested in */</span>\n    maxfdp2 <span class=\"token operator\">=</span> maxfdp1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> LWIP_SOCKET_OFFSET<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxfdp1<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>writeset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>exceptset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> exceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SYS_ARCH_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sock <span class=\"token operator\">=</span> <span class=\"token function\">tryget_socket</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          sock<span class=\"token operator\">-></span>select_waiting<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">LWIP_ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sock->select_waiting > 0\"</span><span class=\"token punctuation\">,</span> sock<span class=\"token operator\">-></span>select_waiting <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">/* Not a valid socket */</span>\n          nready <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          maxfdp2 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nready <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* \n    *执行完上述操作，还会再扫描一次是否有socket有事件产生，删除细节。\n    *因为上述，如果socket资源过多，会消耗不少资源，再扫描一次可以提高效率。\n    */</span>\n      <span class=\"token comment\">/* 休眠指定时间，让出cpu控制权 */</span>\n      waitres <span class=\"token operator\">=</span> <span class=\"token function\">sys_arch_sem_wait</span><span class=\"token punctuation\">(</span><span class=\"token function\">SELECT_SEM_PTR</span><span class=\"token punctuation\">(</span>select_cb<span class=\"token punctuation\">.</span>sem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msectimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/* 休眠结束， 将对应socket->select_waiting减1 */</span>\n    <span class=\"token comment\">/* Decrease select_waiting for each socket we are interested in */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> LWIP_SOCKET_OFFSET<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxfdp2<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>readset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> readset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>writeset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> writeset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n          <span class=\"token punctuation\">(</span>exceptset <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> exceptset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lwip_sock</span> <span class=\"token operator\">*</span>sock<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SYS_ARCH_PROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sock <span class=\"token operator\">=</span> <span class=\"token function\">tryget_socket</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* 减1，必须socket是还在的 */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">/* for now, handle select_waiting==0... */</span>\n          <span class=\"token function\">LWIP_ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sock->select_waiting > 0\"</span><span class=\"token punctuation\">,</span> sock<span class=\"token operator\">-></span>select_waiting <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sock<span class=\"token operator\">-></span>select_waiting <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            sock<span class=\"token operator\">-></span>select_waiting<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">/* Not a valid socket */</span>\n          nready <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">SYS_ARCH_UNPROTECT</span><span class=\"token punctuation\">(</span>lev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">/* 删除不影响分析代码，感兴趣参考源码。 */</span>\n  <span class=\"token keyword\">return</span> nready<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><center>这是这一张来自未来的select函数处理流程图</center></strong></p>\n<p>&emsp;&emsp;参考上述代码分析，特别注意<em>socket-&gt;select_waiting</em>加1和减1的地方，可以看到，如果socket存在且的确需要监听事件，且并不是进来事件就已经产生或者已经超时，一定会加1；然后线程会有可能会进行休眠；正常情况下，休眠结束后，<em>socket-&gt;select_waiting</em>减1，离开该函数，<em>socket-&gt;select_waiting</em>恢复原值。<strong>但是</strong>，如果在线程休眠期间，恰巧在另外一个线程进行了close操作，事件就变味了。</p>\n<p>&emsp;&emsp;如果在休眠期间进行了<code>close(socket)</code>,则通过<code>tyr_socket(socket)</code>获取不到socket结构体，则<em>socket-&gt;select_waiting</em>不会进行减1，后面执行一系列语句后，退出该函数，<em>socket-&gt;select_waiting</em>没有恢复原值，且比进来时大1。针对该函数，<em>socket-&gt;select_waiting</em>加1的次数是*&gt;=<em>减1的次数，所以如果只要在函数退出时没有恢复原值，则</em>socket-&gt;select_waiting*永远不可能再减为0了，此时socket资源就出现了<strong>假占用</strong>，该socket再也不能被其他人使用了。</p>\n<h1 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h1><p>&emsp;&emsp;第二章已经对产生的原因进行了分析。解决问题的思路也想一开始提到的有两种，为了不改lwip源码，使用了第二种思路。下面用伪代码给出解决方案。需要使用到两个flag<code>closing_socket_flag</code>和·selecting_flag`。<br><strong>thread1</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">adaptor_closesocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_select_processing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">set_closesocket_processing</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_closescoket_processing</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>thread2</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">select_loop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_closesocket_processing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">set_select_processing</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    select_return <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>sockMAX <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>read_set<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>exception_set<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">set_select_processing</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>&emsp;&emsp;上面的解决方案，我认为是最为简单通用的解决方案，当然针对两个flag肯定还是需要加锁的。另外还有一种思路就是使用通知类似于condition的方法。知道了错误原因，解决方法的思路就是做同步。</p>\n<h1 id=\"四、写在最后\"><a href=\"#四、写在最后\" class=\"headerlink\" title=\"四、写在最后\"></a>四、写在最后</h1><p>&emsp;&emsp;LwIP无疑是一个很优秀的轻量版的TCP/IP协议实现了，虽然上面的socket接口都是简化版，当时以为如果功能是支持的，在使用以为可以跟BSD的一样。因为在开发DoIP时是跨平台，上层应用代码是一样的，在windows和linux都是支持的，所以比较简单就初步定位出了问题应该是出在了LwIP协议本身，但是当时由于现象特别奇怪（略过不表），也费了一般周折才最终定位出来。一开始觉得认为这是一个bug，后面跟老虞（技术偶像）深度讨论过，觉得这也不属于LwIP本身的一个bug，感觉更像是feature实现的不够完整，但是light weight也已经足够了。同时在使用LwIP本身也学到了很多技巧，如连接符**##**的使用、在MCU上实现分配空间的解决方案。</p>\n<p><img src=\"https://savannah.nongnu.org/images/Savannah.theme/floating.png\"></p>\n"},{"title":"基于openssl实现tls+socket的安全通信","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-05-04T17:13:00.000Z","password":null,"summary":null,"_content":"\n> 记录基于openssl来实现tls的安全通信，借助BSD socket接口来实现。\n\n# 一、 背景\n&emsp;&emsp;由于业务需要，得使用tls来完成安全通信，需求也是借助开源的openssl来实现。整了好几天，现在还没实现openssl+socket来进行安全通信。目前是证书都已经生成，但是server获取client证书出错。\n\n&emsp;&emsp;其中在生成证书的过程中，也走了不少弯路，网上没有找到一篇介绍加密通信、证书原理以及使用openssl的文章，所以就萌生了自己在尝试的过程中，记录一下自己的解决轨迹。","source":"_posts/tls-socket.md","raw":"---\ntitle: 基于openssl实现tls+socket的安全通信\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-05-05 01:13\npassword:\nsummary:\ntags:\n- tls,opensll\ncategories:\n- 协议栈\n---\n\n> 记录基于openssl来实现tls的安全通信，借助BSD socket接口来实现。\n\n# 一、 背景\n&emsp;&emsp;由于业务需要，得使用tls来完成安全通信，需求也是借助开源的openssl来实现。整了好几天，现在还没实现openssl+socket来进行安全通信。目前是证书都已经生成，但是server获取client证书出错。\n\n&emsp;&emsp;其中在生成证书的过程中，也走了不少弯路，网上没有找到一篇介绍加密通信、证书原理以及使用openssl的文章，所以就萌生了自己在尝试的过程中，记录一下自己的解决轨迹。","slug":"tls-socket","published":1,"updated":"2021-05-04T17:20:52.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckob5o5g40003y0wxf0yiefoa","content":"<blockquote>\n<p>记录基于openssl来实现tls的安全通信，借助BSD socket接口来实现。</p>\n</blockquote>\n<h1 id=\"一、-背景\"><a href=\"#一、-背景\" class=\"headerlink\" title=\"一、 背景\"></a>一、 背景</h1><p>  由于业务需要，得使用tls来完成安全通信，需求也是借助开源的openssl来实现。整了好几天，现在还没实现openssl+socket来进行安全通信。目前是证书都已经生成，但是server获取client证书出错。</p>\n<p>  其中在生成证书的过程中，也走了不少弯路，网上没有找到一篇介绍加密通信、证书原理以及使用openssl的文章，所以就萌生了自己在尝试的过程中，记录一下自己的解决轨迹。</p>\n","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>记录基于openssl来实现tls的安全通信，借助BSD socket接口来实现。</p>\n</blockquote>\n<h1 id=\"一、-背景\"><a href=\"#一、-背景\" class=\"headerlink\" title=\"一、 背景\"></a>一、 背景</h1><p>&emsp;&emsp;由于业务需要，得使用tls来完成安全通信，需求也是借助开源的openssl来实现。整了好几天，现在还没实现openssl+socket来进行安全通信。目前是证书都已经生成，但是server获取client证书出错。</p>\n<p>&emsp;&emsp;其中在生成证书的过程中，也走了不少弯路，网上没有找到一篇介绍加密通信、证书原理以及使用openssl的文章，所以就萌生了自己在尝试的过程中，记录一下自己的解决轨迹。</p>\n"},{"title":"我为什么要写博客","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-04-11T07:27:31.000Z","password":null,"summary":null,"_content":">关于这篇博客，想记录下自己当前写博客的原因，同时也希望记录自己当前自己的一些看法，后面持续更新。\n\n>记于2021.4\n\n# 为什么要写博客\n &emsp;&emsp;一直挺想用文字记录记录自己的成长轨迹，第一份工作在经纬恒润时，部门要求每天都要写写tasklist，当时刚毕业，也算是逗比一个，写的文字不止是每天工作的记录，也包含自己遇到问题时自己苦恼的心情，同时也有自己在解决了问题时开心。在入职2个多月后，转正答辩，看着自己写的tasklist，感觉自己又把前两个月过了一遍似的，当时写转正ppt也蛮顺利的。后面虽然略有偷懒，但是也会“勤勤恳恳”的记录，\n 在2019年离职前，对在恒润的职业生涯又回顾了一遍，感觉就像看到了一个从校园出来的学生是如何慢慢变为社会人的。\n\n &emsp;&emsp;从北京到上海，从恒润到怿星，前三个月也像模像样的在每天在记录。当时处于放养状态，很多时候都是自己在学东西，写tasklist，一方面是记录自己的学习，另一方面是为了防止领导觉得我在试用期没有成果。磕磕绊绊、断断续续也写了三个月，终于在某一天就丢了。\n\n![](/medias/article/2.jpeg)\n\n&emsp;&emsp;2020年年终总结，觉得没有达到的目标，考虑到在目前平台自己成长受限就想着要换个平台。找工作嘛，避免不了要更新简历，期间回忆回忆自己做过的事情，也在感慨自己的一些成长和见识。也越来越萌生，自己需要在某个地方记录记录的学习过程以及学习成果。\n\n&emsp;&emsp;自己在2020年一年中看了很多计算机相关的书籍，但是并没有形成总结。比如自己在看《深入理解计算机系统》时，看到虚拟内存那里，突然就明白了MCU和MPU的差异性在哪里了。在阅读《操作系统导论》时，明白了原来没有完美的设计，总是会在复杂度和性能取个折中。自己本身是一名码农(**还不配称为程序员**），在撸代码时，老是想实现一个完美程序，但是最终往往流产，看完这本书后也算是给了我启发。从《人月神话》这本书不仅知道了软件工作量是不能简单用人月来衡量，而且也教会了我如何看待团队水平不同层次的人，也算是摆正了自己的位置。\n\n&emsp;&emsp;上面无论精彩的或者不精彩的内容，深刻或者不深刻的瞬间，都没用文字记录下来。现在再去回想，如虚拟内存之类，很难再体会到那种突然顿悟的激动。殊不知，那是自己从MCU转到MPU(通用操作系统)很重要的一件事，扫清了自己的认知障碍。\n\n&emsp;&emsp;趁着跳槽之际，又是博客园整顿之时，为了让自己的博客掌握在自己的手里。在清明节前后搭建出了属于的博客，也借此希望能够学些学学nodejs，同时也想在此记录自己的心情、学习的技术以及自己的心得。ps：*搭建博客也踏了不少坑，希望有时间整理一篇文章。*\n\n# 博客写些什么\n\n&emsp;&emsp;其实目前阶段没有特别的规划去些什么。心里大概想写一些技术类的文章，并记录自己的心得体会。加深自己对技术理解，同时也希望能够帮到在技术上一样遇到问题的有缘人，或者是在心得体会上有同感的同路人。当然，自己本身是职场人，涉及工作机密的内容或者会对公司造成任何损失的内容肯定不会出现在上面。技术类的文章，计划是完整的，有demo可以直接运行，尽量把自己在学习过程中走的弯路也都列出来，权当给自己记录了。\n\n&emsp;&emsp;阶段性的写写总结，比如季度总结或者年终总结，在后续回顾能够看到之前的自己是傻子，这就证明了自己是在成长的。\n\n&emsp;&emsp;后面还想要写的，也会记录在博客上。\n\n# 博客写给谁看\n\n&emsp;&emsp;写博客的很大一个原因就是希望记录自己，所以最主要的是写给自己看的。\n\n&emsp;&emsp;因为自己本身是一个职场人，做的东西也算是较为前沿的东西；同时自己因为没有读研，工作也还不到三年，跟很多硕士毕业的同学也是同龄人。所以在工作上遇到困难的职场人能够从我这获得启示甚至答案，也希望即将踏入职场的同龄人能够交流交流心得，愿意一起成长。\n\n# 博客什么时候更新\n\n&emsp;&emsp;暂时不定更新日期，因为第一次写博客，也知道写这个玩意儿很浪费时间和经历，用玩手机的时间写博客，最后能够坚持下来，持续的更新，自己就算是成功。最后期望自己能够稳定周期的更新博客。\n\n\n","source":"_posts/why-write.md","raw":"---\ntitle: 我为什么要写博客\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-04-11 15:27:31\npassword:\nsummary:\ntags:\n- 博客\ncategories:\n- 随笔\n---\n>关于这篇博客，想记录下自己当前写博客的原因，同时也希望记录自己当前自己的一些看法，后面持续更新。\n\n>记于2021.4\n\n# 为什么要写博客\n &emsp;&emsp;一直挺想用文字记录记录自己的成长轨迹，第一份工作在经纬恒润时，部门要求每天都要写写tasklist，当时刚毕业，也算是逗比一个，写的文字不止是每天工作的记录，也包含自己遇到问题时自己苦恼的心情，同时也有自己在解决了问题时开心。在入职2个多月后，转正答辩，看着自己写的tasklist，感觉自己又把前两个月过了一遍似的，当时写转正ppt也蛮顺利的。后面虽然略有偷懒，但是也会“勤勤恳恳”的记录，\n 在2019年离职前，对在恒润的职业生涯又回顾了一遍，感觉就像看到了一个从校园出来的学生是如何慢慢变为社会人的。\n\n &emsp;&emsp;从北京到上海，从恒润到怿星，前三个月也像模像样的在每天在记录。当时处于放养状态，很多时候都是自己在学东西，写tasklist，一方面是记录自己的学习，另一方面是为了防止领导觉得我在试用期没有成果。磕磕绊绊、断断续续也写了三个月，终于在某一天就丢了。\n\n![](/medias/article/2.jpeg)\n\n&emsp;&emsp;2020年年终总结，觉得没有达到的目标，考虑到在目前平台自己成长受限就想着要换个平台。找工作嘛，避免不了要更新简历，期间回忆回忆自己做过的事情，也在感慨自己的一些成长和见识。也越来越萌生，自己需要在某个地方记录记录的学习过程以及学习成果。\n\n&emsp;&emsp;自己在2020年一年中看了很多计算机相关的书籍，但是并没有形成总结。比如自己在看《深入理解计算机系统》时，看到虚拟内存那里，突然就明白了MCU和MPU的差异性在哪里了。在阅读《操作系统导论》时，明白了原来没有完美的设计，总是会在复杂度和性能取个折中。自己本身是一名码农(**还不配称为程序员**），在撸代码时，老是想实现一个完美程序，但是最终往往流产，看完这本书后也算是给了我启发。从《人月神话》这本书不仅知道了软件工作量是不能简单用人月来衡量，而且也教会了我如何看待团队水平不同层次的人，也算是摆正了自己的位置。\n\n&emsp;&emsp;上面无论精彩的或者不精彩的内容，深刻或者不深刻的瞬间，都没用文字记录下来。现在再去回想，如虚拟内存之类，很难再体会到那种突然顿悟的激动。殊不知，那是自己从MCU转到MPU(通用操作系统)很重要的一件事，扫清了自己的认知障碍。\n\n&emsp;&emsp;趁着跳槽之际，又是博客园整顿之时，为了让自己的博客掌握在自己的手里。在清明节前后搭建出了属于的博客，也借此希望能够学些学学nodejs，同时也想在此记录自己的心情、学习的技术以及自己的心得。ps：*搭建博客也踏了不少坑，希望有时间整理一篇文章。*\n\n# 博客写些什么\n\n&emsp;&emsp;其实目前阶段没有特别的规划去些什么。心里大概想写一些技术类的文章，并记录自己的心得体会。加深自己对技术理解，同时也希望能够帮到在技术上一样遇到问题的有缘人，或者是在心得体会上有同感的同路人。当然，自己本身是职场人，涉及工作机密的内容或者会对公司造成任何损失的内容肯定不会出现在上面。技术类的文章，计划是完整的，有demo可以直接运行，尽量把自己在学习过程中走的弯路也都列出来，权当给自己记录了。\n\n&emsp;&emsp;阶段性的写写总结，比如季度总结或者年终总结，在后续回顾能够看到之前的自己是傻子，这就证明了自己是在成长的。\n\n&emsp;&emsp;后面还想要写的，也会记录在博客上。\n\n# 博客写给谁看\n\n&emsp;&emsp;写博客的很大一个原因就是希望记录自己，所以最主要的是写给自己看的。\n\n&emsp;&emsp;因为自己本身是一个职场人，做的东西也算是较为前沿的东西；同时自己因为没有读研，工作也还不到三年，跟很多硕士毕业的同学也是同龄人。所以在工作上遇到困难的职场人能够从我这获得启示甚至答案，也希望即将踏入职场的同龄人能够交流交流心得，愿意一起成长。\n\n# 博客什么时候更新\n\n&emsp;&emsp;暂时不定更新日期，因为第一次写博客，也知道写这个玩意儿很浪费时间和经历，用玩手机的时间写博客，最后能够坚持下来，持续的更新，自己就算是成功。最后期望自己能够稳定周期的更新博客。\n\n\n","slug":"why-write","published":1,"updated":"2021-05-04T08:05:06.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckob5o5g90007y0wx5zh22pqm","content":"<blockquote>\n<p>关于这篇博客，想记录下自己当前写博客的原因，同时也希望记录自己当前自己的一些看法，后面持续更新。</p>\n</blockquote>\n<blockquote>\n<p>记于2021.4</p>\n</blockquote>\n<h1 id=\"为什么要写博客\"><a href=\"#为什么要写博客\" class=\"headerlink\" title=\"为什么要写博客\"></a>为什么要写博客</h1><p>   一直挺想用文字记录记录自己的成长轨迹，第一份工作在经纬恒润时，部门要求每天都要写写tasklist，当时刚毕业，也算是逗比一个，写的文字不止是每天工作的记录，也包含自己遇到问题时自己苦恼的心情，同时也有自己在解决了问题时开心。在入职2个多月后，转正答辩，看着自己写的tasklist，感觉自己又把前两个月过了一遍似的，当时写转正ppt也蛮顺利的。后面虽然略有偷懒，但是也会“勤勤恳恳”的记录，<br> 在2019年离职前，对在恒润的职业生涯又回顾了一遍，感觉就像看到了一个从校园出来的学生是如何慢慢变为社会人的。</p>\n<p>   从北京到上海，从恒润到怿星，前三个月也像模像样的在每天在记录。当时处于放养状态，很多时候都是自己在学东西，写tasklist，一方面是记录自己的学习，另一方面是为了防止领导觉得我在试用期没有成果。磕磕绊绊、断断续续也写了三个月，终于在某一天就丢了。</p>\n<p><img src=\"/medias/article/2.jpeg\"></p>\n<p>  2020年年终总结，觉得没有达到的目标，考虑到在目前平台自己成长受限就想着要换个平台。找工作嘛，避免不了要更新简历，期间回忆回忆自己做过的事情，也在感慨自己的一些成长和见识。也越来越萌生，自己需要在某个地方记录记录的学习过程以及学习成果。</p>\n<p>  自己在2020年一年中看了很多计算机相关的书籍，但是并没有形成总结。比如自己在看《深入理解计算机系统》时，看到虚拟内存那里，突然就明白了MCU和MPU的差异性在哪里了。在阅读《操作系统导论》时，明白了原来没有完美的设计，总是会在复杂度和性能取个折中。自己本身是一名码农(<strong>还不配称为程序员</strong>），在撸代码时，老是想实现一个完美程序，但是最终往往流产，看完这本书后也算是给了我启发。从《人月神话》这本书不仅知道了软件工作量是不能简单用人月来衡量，而且也教会了我如何看待团队水平不同层次的人，也算是摆正了自己的位置。</p>\n<p>  上面无论精彩的或者不精彩的内容，深刻或者不深刻的瞬间，都没用文字记录下来。现在再去回想，如虚拟内存之类，很难再体会到那种突然顿悟的激动。殊不知，那是自己从MCU转到MPU(通用操作系统)很重要的一件事，扫清了自己的认知障碍。</p>\n<p>  趁着跳槽之际，又是博客园整顿之时，为了让自己的博客掌握在自己的手里。在清明节前后搭建出了属于的博客，也借此希望能够学些学学nodejs，同时也想在此记录自己的心情、学习的技术以及自己的心得。ps：<em>搭建博客也踏了不少坑，希望有时间整理一篇文章。</em></p>\n<h1 id=\"博客写些什么\"><a href=\"#博客写些什么\" class=\"headerlink\" title=\"博客写些什么\"></a>博客写些什么</h1><p>  其实目前阶段没有特别的规划去些什么。心里大概想写一些技术类的文章，并记录自己的心得体会。加深自己对技术理解，同时也希望能够帮到在技术上一样遇到问题的有缘人，或者是在心得体会上有同感的同路人。当然，自己本身是职场人，涉及工作机密的内容或者会对公司造成任何损失的内容肯定不会出现在上面。技术类的文章，计划是完整的，有demo可以直接运行，尽量把自己在学习过程中走的弯路也都列出来，权当给自己记录了。</p>\n<p>  阶段性的写写总结，比如季度总结或者年终总结，在后续回顾能够看到之前的自己是傻子，这就证明了自己是在成长的。</p>\n<p>  后面还想要写的，也会记录在博客上。</p>\n<h1 id=\"博客写给谁看\"><a href=\"#博客写给谁看\" class=\"headerlink\" title=\"博客写给谁看\"></a>博客写给谁看</h1><p>  写博客的很大一个原因就是希望记录自己，所以最主要的是写给自己看的。</p>\n<p>  因为自己本身是一个职场人，做的东西也算是较为前沿的东西；同时自己因为没有读研，工作也还不到三年，跟很多硕士毕业的同学也是同龄人。所以在工作上遇到困难的职场人能够从我这获得启示甚至答案，也希望即将踏入职场的同龄人能够交流交流心得，愿意一起成长。</p>\n<h1 id=\"博客什么时候更新\"><a href=\"#博客什么时候更新\" class=\"headerlink\" title=\"博客什么时候更新\"></a>博客什么时候更新</h1><p>  暂时不定更新日期，因为第一次写博客，也知道写这个玩意儿很浪费时间和经历，用玩手机的时间写博客，最后能够坚持下来，持续的更新，自己就算是成功。最后期望自己能够稳定周期的更新博客。</p>\n","site":{"data":{"friends":[{"name":"金宝的博客","url":"https://jinbaotang.cn","title":"访问主页","introduction":"哦","avatar":"/medias/avatars/0xbird.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>关于这篇博客，想记录下自己当前写博客的原因，同时也希望记录自己当前自己的一些看法，后面持续更新。</p>\n</blockquote>\n<blockquote>\n<p>记于2021.4</p>\n</blockquote>\n<h1 id=\"为什么要写博客\"><a href=\"#为什么要写博客\" class=\"headerlink\" title=\"为什么要写博客\"></a>为什么要写博客</h1><p> &emsp;&emsp;一直挺想用文字记录记录自己的成长轨迹，第一份工作在经纬恒润时，部门要求每天都要写写tasklist，当时刚毕业，也算是逗比一个，写的文字不止是每天工作的记录，也包含自己遇到问题时自己苦恼的心情，同时也有自己在解决了问题时开心。在入职2个多月后，转正答辩，看着自己写的tasklist，感觉自己又把前两个月过了一遍似的，当时写转正ppt也蛮顺利的。后面虽然略有偷懒，但是也会“勤勤恳恳”的记录，<br> 在2019年离职前，对在恒润的职业生涯又回顾了一遍，感觉就像看到了一个从校园出来的学生是如何慢慢变为社会人的。</p>\n<p> &emsp;&emsp;从北京到上海，从恒润到怿星，前三个月也像模像样的在每天在记录。当时处于放养状态，很多时候都是自己在学东西，写tasklist，一方面是记录自己的学习，另一方面是为了防止领导觉得我在试用期没有成果。磕磕绊绊、断断续续也写了三个月，终于在某一天就丢了。</p>\n<p><img src=\"/medias/article/2.jpeg\"></p>\n<p>&emsp;&emsp;2020年年终总结，觉得没有达到的目标，考虑到在目前平台自己成长受限就想着要换个平台。找工作嘛，避免不了要更新简历，期间回忆回忆自己做过的事情，也在感慨自己的一些成长和见识。也越来越萌生，自己需要在某个地方记录记录的学习过程以及学习成果。</p>\n<p>&emsp;&emsp;自己在2020年一年中看了很多计算机相关的书籍，但是并没有形成总结。比如自己在看《深入理解计算机系统》时，看到虚拟内存那里，突然就明白了MCU和MPU的差异性在哪里了。在阅读《操作系统导论》时，明白了原来没有完美的设计，总是会在复杂度和性能取个折中。自己本身是一名码农(<strong>还不配称为程序员</strong>），在撸代码时，老是想实现一个完美程序，但是最终往往流产，看完这本书后也算是给了我启发。从《人月神话》这本书不仅知道了软件工作量是不能简单用人月来衡量，而且也教会了我如何看待团队水平不同层次的人，也算是摆正了自己的位置。</p>\n<p>&emsp;&emsp;上面无论精彩的或者不精彩的内容，深刻或者不深刻的瞬间，都没用文字记录下来。现在再去回想，如虚拟内存之类，很难再体会到那种突然顿悟的激动。殊不知，那是自己从MCU转到MPU(通用操作系统)很重要的一件事，扫清了自己的认知障碍。</p>\n<p>&emsp;&emsp;趁着跳槽之际，又是博客园整顿之时，为了让自己的博客掌握在自己的手里。在清明节前后搭建出了属于的博客，也借此希望能够学些学学nodejs，同时也想在此记录自己的心情、学习的技术以及自己的心得。ps：<em>搭建博客也踏了不少坑，希望有时间整理一篇文章。</em></p>\n<h1 id=\"博客写些什么\"><a href=\"#博客写些什么\" class=\"headerlink\" title=\"博客写些什么\"></a>博客写些什么</h1><p>&emsp;&emsp;其实目前阶段没有特别的规划去些什么。心里大概想写一些技术类的文章，并记录自己的心得体会。加深自己对技术理解，同时也希望能够帮到在技术上一样遇到问题的有缘人，或者是在心得体会上有同感的同路人。当然，自己本身是职场人，涉及工作机密的内容或者会对公司造成任何损失的内容肯定不会出现在上面。技术类的文章，计划是完整的，有demo可以直接运行，尽量把自己在学习过程中走的弯路也都列出来，权当给自己记录了。</p>\n<p>&emsp;&emsp;阶段性的写写总结，比如季度总结或者年终总结，在后续回顾能够看到之前的自己是傻子，这就证明了自己是在成长的。</p>\n<p>&emsp;&emsp;后面还想要写的，也会记录在博客上。</p>\n<h1 id=\"博客写给谁看\"><a href=\"#博客写给谁看\" class=\"headerlink\" title=\"博客写给谁看\"></a>博客写给谁看</h1><p>&emsp;&emsp;写博客的很大一个原因就是希望记录自己，所以最主要的是写给自己看的。</p>\n<p>&emsp;&emsp;因为自己本身是一个职场人，做的东西也算是较为前沿的东西；同时自己因为没有读研，工作也还不到三年，跟很多硕士毕业的同学也是同龄人。所以在工作上遇到困难的职场人能够从我这获得启示甚至答案，也希望即将踏入职场的同龄人能够交流交流心得，愿意一起成长。</p>\n<h1 id=\"博客什么时候更新\"><a href=\"#博客什么时候更新\" class=\"headerlink\" title=\"博客什么时候更新\"></a>博客什么时候更新</h1><p>&emsp;&emsp;暂时不定更新日期，因为第一次写博客，也知道写这个玩意儿很浪费时间和经历，用玩手机的时间写博客，最后能够坚持下来，持续的更新，自己就算是成功。最后期望自己能够稳定周期的更新博客。</p>\n"}],"PostAsset":[{"_id":"source/_posts/lwip-close-socket-select/jinbao-ept.jpg","post":"ckob5o5fy0001y0wx1cyh790e","slug":"jinbao-ept.jpg","modified":1,"renderable":1},{"_id":"source/_posts/why-write/2.jpeg","post":"ckob5o5g90007y0wx5zh22pqm","slug":"2.jpeg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckob5o5fy0001y0wx1cyh790e","category_id":"ckob5o5g60004y0wx8ale6cqr","_id":"ckob5o5ge000gy0wx5ums41qs"},{"post_id":"ckob5o5g40003y0wxf0yiefoa","category_id":"ckob5o5g60004y0wx8ale6cqr","_id":"ckob5o5ge000jy0wxhskz4q23"},{"post_id":"ckob5o5g90007y0wx5zh22pqm","category_id":"ckob5o5ge000fy0wxfqo68jrt","_id":"ckob5o5ge000ly0wx2pjka8hw"}],"PostTag":[{"post_id":"ckob5o5fy0001y0wx1cyh790e","tag_id":"ckob5o5g80005y0wx58cs2ocw","_id":"ckob5o5gd000cy0wx288l3d6j"},{"post_id":"ckob5o5g40003y0wxf0yiefoa","tag_id":"ckob5o5gb000by0wxa4uzhxqo","_id":"ckob5o5ge000iy0wx7eba3vrc"},{"post_id":"ckob5o5g90007y0wx5zh22pqm","tag_id":"ckob5o5ge000hy0wx1rdoelsb","_id":"ckob5o5ge000ky0wx85kzdqmx"}],"Tag":[{"name":"LwIP","_id":"ckob5o5g80005y0wx58cs2ocw"},{"name":"tls,opensll","_id":"ckob5o5gb000by0wxa4uzhxqo"},{"name":"博客","_id":"ckob5o5ge000hy0wx1rdoelsb"}]}}
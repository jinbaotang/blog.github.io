<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么？你还不懂链接</title>
      <link href="2021/09/05/link/"/>
      <url>2021/09/05/link/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在重构了，不同的模块都是一个动态库或者多个动态库组成，在不同的动态库里有相同的函数名，即使没放在可外部调用的头文件（即module_interface.h）,在编译运行时均不会报错，但是却有得到了奇怪的结果，为了找到原因又重新复习了一下链接的过程，记录如下。<br>另外在<a href="https://jinbaotang.cn/2021/06/06/how-mcu2linux/">我是如何从MCU开发转到linux开发</a>中提到了，懂链接也是我能即使没有linux开发经验下也能很好的转到linux开发的重要基础知识。</p></blockquote><blockquote><p>该博客是在阅读了《深入理解计算机系统》第七章后，结合自己的理解写出来的，感兴趣的小伙伴建议阅读该书。</p></blockquote><h1 id="一、集成开发环境—IDE"><a href="#一、集成开发环境—IDE" class="headerlink" title="一、集成开发环境—IDE"></a>一、集成开发环境—IDE</h1><p>&emsp;&emsp;很多开发者尤其是mcu工程师，都是使用集成开发环境。使用集成开发环境<strong>IDE</strong>很方便，但是在『编译、执行』的按钮背后，其实发生了太多太多的事情。当然，作为初学者，一开始避开过多的复杂专注于学习编写代码无可厚非，但是该学的永远逃不掉，不了解自己的代码是如何一步步成为计算机课执行的程序的，就很难在遇到各种疑难杂症的时候快速定位问题所在。另外，无论是编译器还是链接器，都可以通过不同的参数进行各种定制，如果不搞清楚，恐怕只能永远依赖<strong>IDE</strong>了。<strong>IDE</strong>很好，甚至使用<strong>IDE</strong>能够达到事半功倍的效果，但任何东西都不能过分依赖，真正合理的应该是庖丁解牛后，挑选最适合自己的。拿我自己来说，我最钟情的IDE–<strong>visual studio</strong>，使用VS来调试代码真的很方便，各种查看变量、内存、负载率的方法，让你尤其在多线程时，简直如虎添翼；但是有时候又不得不在linux这种环境下做开发。所以对于我来说，能够在windows去用VS做开发，我就不选择其他；如果不能我会果断放弃，选择对应的环境用更加原始的工具和方法做开发，想要做到这个还是需要对底层原理进行了解。</p><h1 id="二、编译、链接"><a href="#二、编译、链接" class="headerlink" title="二、编译、链接"></a>二、编译、链接</h1><h2 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h2><p>&emsp;&emsp;C语言代码最终成为机器可执行的程序，会像流水线上的产品一样接受各项处理：</p><ol><li>预处理器：将C语言代码<strong>test.c</strong>转化成 test.i 文件<strong>gcc –E</strong></li><li>编译器：C 语言代码<strong>test.c, tang.c</strong>经过编译器的处理<strong>gcc -0g -S</strong>成为汇编代码<strong>test.s, tang.s</strong></li><li>汇编器：汇编代码<strong>test.s, tang.s</strong>经过汇编器的处理<strong>gcc 或 as</strong>成为对象程序<strong>test.o, tang.o</strong></li><li>链接器：对象程序<strong>test.o, tang.o</strong>以及所需静态库<strong>lib.a</strong>经过链接器的处理<strong>gcc或ld</strong>最终成为计算机可执行的程序</li><li>加载器：将可执行程序加载到内存并进行执行，loader和 ld-linux.so</li></ol><p>&emsp;&emsp;编译是指编译器读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码。源文件的编译过程包含两个主要阶段：</p><ol><li><p><strong>第一个阶段</strong>是预处理阶段，在正式的编译阶段之前进行。预处理阶段将根据已放置在文件中的预处理指令来修改源文件的内容。主要是以下几方面的处理：</p><ol><li>宏定义指令，如 #define a b 这种伪指令，预编译所要做的是将程序中的所有 a 用 b 替换，但作为字符串常量的 a 则不被替换。还有 #undef，则将取消对某个宏的定义，使以后该串的出现不再被替换</li><li>条件编译指令，如 #ifdef, #ifndef, #else, #elif, #endif等。这些伪指令的引入使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。预编译程序将根据有关的文件，将那些不必要的代码过滤掉</li><li>头文件包含指令，如 #include “FileName” 。该指令将头文件中的定义统统都加入到它所产生的输出文件中，以供编译程序对之进行处理</li><li>特殊符号，预编译程序可以识别一些特殊的符号。例如在源程序中出现的 LINE 标识将被解释为当前行号（十进制数），FILE 则被解释为当前被编译的C源程序的名称。预编译程序对于在源程序中出现的这些串将用合适的值进行替换</li></ol><p> 头文件的目的主要是为了使某些定义可以供多个不同的C源程序使用，这涉及到头文件的定位即搜索路径问题。头文件搜索规则如下：</p><p> 所有头文件的搜寻会从 -I 开始<br> 然后找环境变量 C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, OBJC_INCLUDE_PATH 指定的路径<br> 再找默认目录<strong>（/usr/include, /usr/local/include, /usr/lib/gcc-lib/i386-linux/2.95.2/include 等等）</strong></p></li><li><p><strong>第二个阶段</strong>编译、优化阶段，编译程序所要作得工作就是通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码。</p><p> 汇编实际上指汇编器<strong>as</strong>把汇编语言代码翻译成目标机器指令的过程。目标文件中所存放的也就是与源程序等效的目标的机器语言代码。目标文件由段组成。通常一个目标文件中至少有两个段：</p><p> 代码段：该段中所包含的主要是程序的指令。该段一般是可读和可执行的，但一般却不可写<br> 数据段：主要存放程序中要用到的各种全局变量或静态的数据。一般数据段都是可读，可写，可执行的</p></li></ol><p>&emsp;&emsp;来看一个具体的例子，假设我们有这么两个代码文件，其中 main 函数调用了另一个函数 sum:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 main.c</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 sum.c</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token operator">*</span><span class="token operator">*</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">*</span><span class="token operator">*</span>        s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们用下面的命令来编译执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">linux&gt; gcc -Og -o prog main.c sum.clinux&gt; .&#x2F;prog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译器实际上会分别编译不同的源代码，生成<strong>（.o）</strong>文件，具体把这些文件链接在一起的是<strong>（Linker）</strong>链接器，整个过程如下图所示：<br><img src="/medias/link/build_link1.jpeg" alt="编译链接过程"></p><h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2. 链接"></a>2. 链接</h2><p>链接基本知识</p><blockquote><p>为什么要使用链接器？</p></blockquote><p>有如下两个原因:</p><ol><li>模块化角度考虑。我们可以把程序分散到不同的小的源代码中，而不是一个巨大的类中。这样带来的好处是可以复用常见的功能/库，比方说 Math library, stantestrdClibrary，也有利于解耦。</li><li>效率角度考虑。改动代码时只需要重新编译改动的文件，其他不受影响。而常用的函数和功能可以封装成库，提供给程序进行调用（节省空间）</li></ol><blockquote><p>链接器做了什么？</p></blockquote><p>主要负责做两件事情:</p><ol><li><p>第一步：符号解析 Symbol resolution<br> 我们在代码中会声明变量及函数，之后会调用变量及函数，所有的符号声明都会被保存在符号表<strong>（symbol table）</strong>中，而符号表会保存在由汇编器生成的object文件中（也就是.o文件）。符号表实际上是一个结构体数组，每一个元素包含名称、大小和符号的位置。</p><p> 在symbol resolution阶段，链接器会给每个符号应用一个唯一的符号定义，用作寻找对应符号的标志。</p></li><li><p>第二步：重定位 Relocation<br> 这一步所做的工作是把原先分开的代码和数据片段汇总成一个文件，会把原先在 .o 文件中的相对位置转换成在可执行程序的绝对位置，并且据此更新对应的引用符号（才能找到新的位置）</p></li></ol><p>在具体来看这两步做了啥之前，先要理解下面几个概念。</p><h3 id="三种对象文件"><a href="#三种对象文件" class="headerlink" title="三种对象文件"></a>三种对象文件</h3><p>&emsp;&emsp;所谓的对象文件<strong>（Object File）</strong>实际上是一个统称，具体来说有以下三种形式：</p><ol><li>可重定位目标文件 Relocatable object file <strong>（.o file）</strong><br> 每个.o文件都是由对应的.c文件通过编译器和汇编器生成，包含代码和数据，可以与其他可重定位目标文件合并创建一个可执行或共享的目标文件</li><li>可执行目标文件 Executable object file <strong>（a.out file）</strong>，这是由unix系统遗传下来的.out文件，当然也可以什么后缀都没有。<br> 由链接器生成，可以直接通过加载器加载到内存中充当进程执行的文件，包含代码和数据</li><li>共享目标文件 Shared object file <strong>（.so file）</strong><br>在 windows 中被称为 Dynamic Link Libraries<strong>（DLLs）</strong>，是类特殊的可重定位目标文件，可以在链接<strong>（静态共享库）</strong>时加入目标文件或加载时或运行时<strong>（动态共享库）</strong>被动态的加载到内存并执行。（静态库和动态库差别很大，后面会提到。）</li></ol><h3 id="对象文件格式"><a href="#对象文件格式" class="headerlink" title="对象文件格式"></a>对象文件格式</h3><p>&emsp;&emsp;上面提到的三种对象文件有统一的格式，即 Executable and Linkable Format<strong>（ELF）</strong>，因为，我们把它们统称为 ELF binaries，具体的文件格式如下：<br><img src="/medias/link/elf.jpeg" alt="对象文件格式"></p><p>下面分别介绍一下各个部分：</p><ol><li><p>ELF header<br> 包含 word size, byte ordering, file type <strong>.o, exec, .so</strong>, machine type, etc</p></li><li><p>Segment header table<br> 包含 page size, virtual addresses memory segments<strong>sections</strong>, segment sizes</p></li><li><p>.text section<br> 代码部分</p></li><li><p>.rotestta section<br> 只读数据部分，例如跳转表</p></li><li><p>.testta section<br> 初始化的全局变量</p></li><li><p>.bss section<br> 未初始化的全局变量</p></li><li><p>.symtab section<br> 包含 symbol table, procudure 和 static variable names 以及 section names 和 location</p></li><li><p>.rel.txt section<br> .text section 的重定位信息</p></li><li><p>.rel.testta section<br> .testta section 的重定位信息</p></li><li><p>.debug section<br>包含 symbolic debugging <strong>gcc -g</strong> 的信息</p></li><li><p>Section header table<br>每个 section 的大小和偏移量<br>链接器实际上会处理三种不同的符号，对应于代码中不同写法的部分：</p></li><li><p>全局符号 Global symbols<br> 在当前模块中定义，且可以被其他代码引用的符号，例如非静态C函数和非静态全局变量</p></li><li><p>外部符号 External symbols<br> 同样是全局符号，但是是在其他模块（也就是其他的源代码）中定义的，但是可以在当前模块中引用</p></li><li><p>本地符号 Local symbols<br> 在当前模块中定义，只能被当前模块引用的符号，例如静态函数和静态全局变量<br> <strong>注意</strong>:Local linker symbol 并不是 local program variables</p><h3 id="链接过程"><a href="#链接过程" class="headerlink" title="链接过程"></a>链接过程</h3><p>&emsp;&emsp;链接器主要是将有关的目标文件彼此相连接生成可加载、可执行的目标文件。链接器的核心工作就是符号表解析和重定位。</p></li></ol><h4 id="第一步-符号解析-Symbol-resolution"><a href="#第一步-符号解析-Symbol-resolution" class="headerlink" title="第一步 符号解析 Symbol resolution"></a>第一步 符号解析 Symbol resolution</h4><p>&emsp;&emsp;还是用刚才的代码为例子，我们从链接器的视角来看看</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 main.c</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 变量 array 在此定义</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 定义了一个全局函数</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// val 是局部变量，链接器并不知道</span>    <span class="token comment">// sum 函数是一个全局引用</span>    <span class="token comment">// array 变量是一个全局引用</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 sum.c</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 定义了一个全局函数</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// i 和 s 是局部变量，链接器并不知道</span>    <span class="token keyword">for</span> <span class="token operator">*</span><span class="token operator">*</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token operator">*</span><span class="token operator">*</span>        s <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;我们可以看到，链接器只知道非静态的全局变量/函数，而对于局部变量一无所知。然后我们来看看局部非静态变量和局部静态变量的区别：</p><ol><li>局部非静态变量会保存在栈中</li><li>局部静态变量会保存在 .bss 或 .testta 中</li></ol><p>&emsp;&emsp;那如果两个函数中定义了同名的静态变量会怎么样呢？首先，编译器会在 .testta 部分为每一个静态变量进行定义，如果遇到同名，就会在本地的符号表中自动给出唯一的编号，比如下面例子中的变量<code>x</code>，可能在符号表中是<code>x.1</code>和<code>x.2</code>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;那如果两个文件中定义了同名的全局变量呢？要想弄清楚会发生什么，就先要知道，不同的符号是有强弱之分的：</p><ol><li>强符号：函数和初始化的全局变量</li><li>弱符号：未初始化的全局变量</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 p1.c</span><span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 强符号，已初始化</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 强符号，函数</span><span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 p2.c</span><span class="token keyword">int</span> foo<span class="token punctuation">;</span>     <span class="token comment">// 弱符号，未初始化</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 强符号，函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接器在处理强弱符号的时候遵守以下规则：</p><ol><li>不能出现多个同名的强符号，不然就会出现链接错误</li><li>如果有同名的强符号和弱符号，选择强符号，也就意味着弱符号是『无效』d而</li><li>如果有多个弱符号，随便选择一个</li></ol><p>&emsp;&emsp;我们可以看看下面几个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 p1.c</span><span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 p2.c</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;可以看到上面代码中声明了两个同名的函数，都是强符号，所以会出现链接错误。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 p1.c</span><span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 p2.c</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>p2<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;上面的两个 x 实际上在执行时会引用同一个未初始化的整型，并不是两个独立的变量。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 p1.c</span><span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 p2.c</span><span class="token keyword">double</span> x<span class="token punctuation">;</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;上面这个例子很有趣，这里<code>p1</code>和<code>p2</code>中定义的变量都是弱符号，我们对<code>p2</code>中的<code>x</code>进行写入时，居然可能会影响到<code>p1</code>中的<code>y</code>！想想为什么？其实原因很简单，以为<code>x</code>实际上引用的是同一个地址，而<code>double</code>的字节数是<code>int</code>的两倍，所<code>y</code>就『躺枪』了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 p1.c</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 p2.c</span><span class="token keyword">double</span> x<span class="token punctuation">;</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;这个例子是强弱符号间的引用了，<code>p1</code> 中的变量因为初始化的缘故，是强符号，所以在<code>p2</code>中引用<code>x</code>时，实际上操作的是<code>p1</code>中定义的全局变量的值，而因为<code>p2</code>中<code>x</code>是<code>double</code>类型，所以一旦进行改动，实际上就<code>p1</code>中<code>x</code>和<code>y</code>都会受到影响。</p><p>&emsp;&emsp;从上面这些例子中，我们已经能够看出链接中可能会出现的问题，更可怕的是两个同名的弱结构体引用，不同的编译器可能有不同的对齐方式，真正编译运行的时候，就会出现非常奇怪的行为，这种<code>bug</code>一旦出现，几乎是很难在短时间内发现并解决的。在以前不懂链接时，完全没有意识到这个问题，等后面懂了之后才想起以前写的代码可怕之处；所以现在我尤其注意static的使用，几乎不定义全局变量。</p><p>因此我们可以得到一条很重要的编程建议：</p><ol><li>如果可能，尽量避免使用全局变量（对于我个人来说，我是禁止使用的）</li><li>如果一定要用的话，注意下面几点：<br> a). 使用静态变量<br> b). 定义全局变量的时候初始化<br> c). 注意使用 extern 关键字<h3 id="第二步-重定位-Relocation"><a href="#第二步-重定位-Relocation" class="headerlink" title="第二步 重定位 Relocation"></a>第二步 重定位 Relocation</h3>&emsp;&emsp;重定位的过程比较简单，大概的过程，通过下图就可以看得比较清楚，就是把不同可重定位对象文件拼成可执行对象文件：<br><img src="/medias/link/relocation.jpeg" alt="重定位示意"></li></ol><p>&emsp;&emsp;我们从汇编代码的角度来看看具体链接器是如何工作的，还是之前的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在linux通过<code>objdump -r -d main.o</code>反编译对应的可重定位对象文件，可以得到如下的汇编代码：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000000000 &lt;main&gt;:    0: 48 83 ec 08      sub   $0x8, %rsp    4: be 02 00 00 00   mov   $0x2, %esi     9: bf 00 00 00 00   mov   $0x0, %edi  # %edi &#x3D; &amp;array                a: R_X86_64_32 array      # Relocation entry    e: e8 00 00 00 00   callq 13 &lt;main+0x13&gt; # sum****                f: R_X86_64_PC32 sum-0x4  # Relocation entry   13: 48 83 c4 08      add   $0x8, %rsp   17: c3               retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;这里我们可以看到，编译器用<strong>relocation entry</strong>来标记不同的调用，针对x86_64的cpu来说，有两种一个32位pc的相对地址引用，另一个是32位pc的绝对地址引用。（注意看对应的代码后面四组数字都是零，就是留出位置让链接器在链接的时候填上对应的实际内存地址）</p><p>&emsp;&emsp;在完成链接之后我们得到 prog 这个程序，同样反编译 objdump -dx prog 可以看到：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">00000000004004d0 &lt;main&gt;:    4004d0: 48 83 ec 08      sub   $0x8, %rsp    4004d4: be 02 00 00 00   mov   $0x2, %esi     4004d9: bf 18 10 60 00   mov   $0x0, %edi  # %edi &#x3D; &amp;array    4004de: e8 05 00 00 00   callq 4004e8 &lt;sum&gt; # sum****    4004e3: 48 83 c4 08      add   $0x8, %rsp    4004e7: c3               retq 00000000004004e8 &lt;sum&gt;:    4004e8: b8 00 00 00 00   mov   $0x0, %eax    ...    ...    400501: f3 c3            repz retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;对应的地址已经被填上去了，这里注意用的是相对的位置，比方说<code>0x4004de</code>中的<code>05 00 00 00</code>的意思实际上是说要在下一句的基础上加上<code>0x5</code>，也就是<code>0x4004e8</code>，即<code>sum</code>函数的开始位置。（本来还想写一下具体的链接过程的，但是写的少了说不明白，写多了就可太多了。建议感兴趣的同学阅读《深入理解计算机系统》第七章第7节）</p><p>&emsp;&emsp;具体载入内存的时候，大概是这样的<br><img src="/medias/link/load_memory.jpeg" alt="载入内存示意"><br>&emsp;&emsp;需要注意左边的部分地址从上往下（上面地址较小），右边则是从下往上（下面地址较小），这也是为什么黄色和蓝色的顺序在两边是不一样的。</p><h1 id="三、打包常用程序"><a href="#三、打包常用程序" class="headerlink" title="三、打包常用程序"></a>三、打包常用程序</h1><p>&emsp;&emsp;基本上每个程序都会用到某些特定的函数，比如：数学计算，输入输出，内存管理，字符串操作等等，我们能用什么方法把它们结合到程序中呢，有以下两个思路：</p><ol><li>思路 1：把所有的函数放到一个源文件中，程序员每次把这一整个大块头链接到自己的程序中，这种做法从时间和空间上来说都比较低效</li><li>思路 2：不同的函数放到不同的源文件中，由程序员显式链接所需要的函数，这种做法效率更高，但是相当于是给程序员增加负担了</li></ol><h3 id="1-静态库-Static-Library"><a href="#1-静态库-Static-Library" class="headerlink" title="1. 静态库 Static Library"></a>1. 静态库 Static Library</h3><p>&emsp;&emsp;比较老式的做法就是所谓的静态库<strong>（Static Libraries）</strong>, <strong>.a</strong>表示<strong>archive files</strong><br>&emsp;&emsp;静态库是一个外部函数与变量的集合体。静态库的文件内容，通常包含一堆程序员自定的变量与函数，其内容不像动态链接库那么复杂，在编译期间由编译器与连接器将它集成至应用程序内，并制作成目标文件以及可以独立运作的可执行文件。而这个可执行文件与编译可执行文件的程序，都是一种程序的静态创建（static build）。</p><p>&emsp;&emsp;具体过程就是把不同文件的<strong>.o</strong>文件通过<strong>Archiver</strong>打包成为一个<strong>.a</strong>文件。<strong>Archiver</strong>支持增量更新，如果有函数变动，只需要重新编译改动的部分。所以对于静态库来说，本质上就是一堆<strong>.o</strong>文件的压缩包。</p><p>&emsp;&emsp;在C语言中最常用的是C标准库与C数学库。C 标准库一般可以通过<code>libc.a</code>来进行引用，大小4.6MB，包含1496个对象文件，主要负责输入输出、内存分配、信号处理、字符串处理、操作数据和实践、生成随机数及整型的数学运算。C数学库可以通过<code>libm.a</code>来引用，大小2MB，包含444个对象文件，主要是提供浮点数运算的支持（比如三角函数、幂次等等）</p><p>&emsp;&emsp;我们来看一个具体的例子，自己编写一个向量运算库<code>libvector.a</code>，其中包含两个函数 <code>addvec</code>和<code>multvec</code>，代码为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 文件 main.c</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">addvec</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z = [%d %d]\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 addvec.c</span><span class="token keyword">void</span> <span class="token function">addvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// -----------------------------------------</span><span class="token comment">// 文件 multvec.c</span><span class="token keyword">void</span> <span class="token function">multvec</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>z<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体过程可见下图：<br><img src="/medias/link/link_static_lib.jpeg"></p><p>&emsp;&emsp;链接器是如何解析外部引用的呢？详细的步骤为：</p><ol><li>扫描当前命令中的<strong>.o</strong>和<strong>.a</strong>文件</li><li>扫描过程中，维护一个当前未解析引用的列表</li><li>扫描到新的<strong>.o</strong>或<strong>.a</strong>文件时，试图去寻找未解析引用</li><li>如果扫描结束时仍旧有为解析的引用，则报错<br>因为是按顺序查找，所以实际上是有引用依赖问题的，也就是说写编译命令的时候，顺序是很重要的！我们看下面这个例子，这里 libtest.o 中引用了 lmine 库中的 libfun 函数，仔细比较两个的顺序：<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">linux&gt; gcc -L. libtest.o -lmine# 上面这句不会出错，但是下面的会linux&gt; gcc -L. -lmine libtest.olibtest.o: In function &#96;main&#96;:libtest.o**.text+0x4**: Undefined reference to &#96;libfun&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>&emsp;&emsp;第一条命令中，在编译链接的时候，如果在<code>libtest.o</code>中发现了外部引用，就会在 <code>-lmine</code>中查找，但是如果反过来，在第二条语句中<code>libtest.o</code>后面没有东西，就会出现找不到引用的错误。从中我们可以得到一个写编译命令的技巧：<strong>把静态库都放到后面去</strong>。</li></ol><h2 id="2-共享库-Shared-Library"><a href="#2-共享库-Shared-Library" class="headerlink" title="2. 共享库 Shared Library"></a>2. 共享库 Shared Library</h2><p>&emsp;&emsp;静态库很方便，但是如果我们只是想用库中的某一个函数，却仍然得把所有的内容都链接进去。一个更现代的方法则是使用共享库，避免了在文件中静态库的大量重复。</p><p>&emsp;&emsp;动态链接可以在首次载入的时候执行<strong>（load-time linking）</strong>，这是 Linux 的标准做法，会由动态链接器<code>ld-linux.so</code>完成，比如标准C库<code>libc.so</code>通常就是动态链接的，这样所有的程序可以共享同一个库，而不用分别进行封装。</p><p>&emsp;&emsp;还是用刚才的例子，如果我们使用动态链接，过程如下：<br><img src="/medias/link/dynamic_link.jpeg"></p><p>&emsp;&emsp;动态链接也可以在程序开始执行的时候完成<strong>（run-time linking）</strong>，在Linux中使用<code>dlope()</code>接口来完成（会使用函数指针），通常用于分布式软件，高性能服务器上。而且共享库也可以在多个进程间共享，这在后面学习到虚拟内存的时候会介绍。</p><p>&emsp;&emsp;链接使得我们可以用多个对象文件构造我们的程序。可以在程序的不同阶段进行（编译、载入、运行期间均可），理解链接可以帮助我们避免遇到奇怪的错误。</p><h1 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a>四、写在最后</h1><p>&emsp;&emsp;第一次看<strong>链接</strong>还是在经纬恒润的时候，那时候从<em>师爷</em>那里看到了一本书《深入理解计算机系统》，就说拿过来看看；导师旭阳看到了，就说：“看书得有输出啊，要不找个机会给大家分享分享”。导师语气之坚决，让我这个应届生不敢有任何反抗（划掉）。然后就在这本书上选择了一个篇幅最短的<strong>链接</strong>来看，然后而没想到那时候基础之差，30多页书看了整整一个月还加上了南京大学几乎跟这本书“一模一样”的公开课（的确难为了那时候的我），最后比着人家的课程ppt勉勉强强做完了一个100多页的ppt，准备给大家<strong>转述一下</strong>（导师对ppt的要求，对我现在影响依然至关重要–工程师能做是一种本事，做出来了能讲出来更是一种本事）。可惜那时候，因为爱情，还没来及讲就从恒润离职了。<br>&emsp;&emsp;因为看了快1个月，所以是真的在学了，在后面我开始从mcu开发转到linux开发时，对我的帮助真的很大。所以后面就没有在系统的学习链接相关的知识，这块也没成为我的绊脚石，回到文章开头写的，这次是第二次系统的学习链接，因为不再是小白，这次学到了很多之前没学到（没往心里去）的知识。</p>]]></content>
      
      
      <categories>
          
          <category> link </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh登录linux及失败解决方案</title>
      <link href="2021/08/29/ssh-login-linux/"/>
      <url>2021/08/29/ssh-login-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://jinbaotang.cn/2021/08/29/use-vscode-debug-ecu/">使用vscode可视化调试ECU</a>中提到，我最近一直在mac通过vscode登录到linux来进行代码开发。</p></blockquote><h1 id="一、vscode远程到linux上开发"><a href="#一、vscode远程到linux上开发" class="headerlink" title="一、vscode远程到linux上开发"></a>一、vscode远程到linux上开发</h1><p>&emsp;&emsp;在vscode上装上Remote-SSH，并在linux上装vscode sever就可以在其他电脑上（mac，linux，windows）来无感的进行”远程开发了“。既然是通过ssh的方式登录到远程，默认就有两种方式了，一个是密码的方式，一个ssh公钥私钥的方式了，前者很简单，只要不要将sshd的密码登录禁用（默认不禁用），可以在linux<code>/etc/ssh/sshd_config</code>查看<code>PasswordAuthentication</code>获取是否禁用。</p><h1 id="二、问题解决"><a href="#二、问题解决" class="headerlink" title="二、问题解决"></a>二、问题解决</h1><p>&emsp;&emsp;在四个月以前我就想通过vscode ssh私钥公钥的方式来登录linux，但是遇到了不少问题，当时开发任务又比较紧张，所以也就没有去折腾了。记得前段时间我们的一个服务器崩了，重装了系统了，在某天心血来潮，又试了一下，诶居然可以了。但是后面有一台服务器还是不行，因为有成功的案例，本着打破砂锅问到底的精神，某个空闲时间，又去折腾了一下，遇到问题才会学到自己忽略的知识点，经过这次折腾，总算弄懂了一点ssh登录的门道了。</p><h2 id="1-如何通过ssh公钥私钥登录"><a href="#1-如何通过ssh公钥私钥登录" class="headerlink" title="1. 如何通过ssh公钥私钥登录"></a>1. 如何通过ssh公钥私钥登录</h2><p>&emsp;&emsp;如果没出意外，这个真的是巨简单，首先在自己的机器上通过<code>ssh-keygen -t RSA -C yourname</code>生成密钥，一路回车就好了。最终会生成一对公私钥在你的用户目录的.ssh下。<br>关于公私钥的位置：</p><pre class="line-numbers language-none"><code class="language-none">1. windows：2. mac：&#x2F;Users&#x2F;youraccount&#x2F;.ssh3. linux &#x2F;home&#x2F;youraccout&#x2F;.ssh or ~&#x2F;.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;生成公私钥之后：</p><ol><li>如果目标机器是mac或者linux就可以将公钥拷贝到目标机器上，然后通过<code>cat id_rsa.pub &gt;&gt; xxxx/.ssh/authorized_keys</code>，建议使用<code>&gt;&gt;</code>而不是<code>&gt;</code>，前者是追加，后者是覆盖，有时有多个机器想连一个机器时，不可避免需要多个共存。<code>xxxx</code>代表是用户路径，比如<code>/home/jinbao</code>，如果是自己的独有的机器或者不怕被打，<code>xxxx</code>也可以是<code>/root</code>.</li><li>如果目标机器是windows，就更简单了，在用户目录下的.ssh（没有就新建一个文件夹）下，新建一个authorized_keys文件，打开将前面生成的id_rsa.pub拷贝出来里面的内容，复制到authorized_keys，就ok了。</li></ol><p>&emsp;&emsp;后面在自己的机器上（生成了密钥的机器上）通过<code>ssh yourname@target host ip</code>，会发现不用输入密码了。当然可以在各个系统上设置<strong>别名</strong>来缩短ssh的命令，比如我mac上的<code>.bash_profile</code>增加了<code>alias sshironman=&#39;ssh ironman@172.20.1.1&#39;</code>，后面我要登录ironman，就只需要输入<code>sshironmman</code>就好了。</p><h2 id="2-想个性自己ssh密钥路径"><a href="#2-想个性自己ssh密钥路径" class="headerlink" title="2. 想个性自己ssh密钥路径"></a>2. 想个性自己ssh密钥路径</h2><p>&emsp;&emsp;ssh的密钥用处很多，可以用在git仓库，也可以用来加解密自己的<strong>秘密文件夹</strong>。为了安全或者方便管理，就想着git一套秘钥、登录linux一套密钥，但是默认路径只有一个，怎么办呢？</p><ol><li>更改每个公私钥的名字，更改加解密模块的配置</li><li>指定不同的host用不同路径下的密钥。</li></ol><p>&emsp;&emsp;上面这个也是我在遇到问题最后总结出来的。如果要实现上述操作，可以在自己的机器上创建一个<code>config</code>文件。如下图所示：<br><img src="/medias/use-ssh-login/sshconfig.png" alt="ssh配置文件"><br>图上含义解释:</p><ol><li>Host-&gt;可以理解为是一个标题，比如<code>ssh 10.110.16.208</code>等同于<code>ssh jinbao@10.110.16.208</code>，当然你可以把<code>10.110.16.208</code>换成任意的字符，eg：fuck.</li><li>HostName-&gt;即目标机器的ip或者域名</li><li>User-&gt;你在目标机器的用户名</li><li>Idetiyfile-&gt;与公钥匹配的私钥，</li><li>还可以指定<code>Port</code>，不指定使用默认的22端口。</li></ol><p>&emsp;&emsp;由于私钥可以指定，所以就意味着我可以把我的密钥生成在能够访问到的任何地方<br>&emsp;&emsp;如果机器是自己独占的，你还可以去折腾/etc/ssh/sshd_config，可以配置挺多玩法的，就看自己去摸索了。如果大家共用，记得先备份再折腾，折腾完记得复原，我就是忘记复原，被人<strong>逮住</strong>了。</p><h2 id="3-总是坎坷"><a href="#3-总是坎坷" class="headerlink" title="3. 总是坎坷"></a>3. 总是坎坷</h2><blockquote><p>只要遇到了问题，才能在简单操作中才能学到东西.</p></blockquote><p>&emsp;&emsp;如果不是在某台机器上登录失败了，我永远不会知道还能通过config指定私钥，也不会知道原来ssh还能通过打印信息来debug。先直接给<strong>解决方案</strong>吧：</p><ol><li>如果你发现弄完上面的第一步，依然还需要输入密码，那就看着改改*/etc/ssh/sshd_config*上的配置，比如指定authorized_keys，<code>PubkeyAuthentication</code>显示的设置为yes等操作</li><li>上面不行，就将用户目录下的.ssh权限改为600-&gt;<code>chmod 600 .ssh</code></li><li>2不行，就将自己的用户目录改为600-&gt;<code>chmod 600 /home/youraccount</code></li><li>3不行，或者想知道怎么知道是2不行还是3不行的，都可以往下看。</li></ol><p>解决上面的问题，我在网上查了很多资料，最后自己加工总结如下。<br>&emsp;&emsp;解决上面问题的主要思路时，利用ssh程序自己输出的日志来定位问题，在服务器a（也就是自己的开发机器）和在目标机器（服务器b）上分别显式的、前台的运行ssh，然后可以跟着日志的过程来分析问题出在哪里。所以需要至少开两个窗口，最好开三个，其中两个通过密码登录到目标机器上，另一个通过ssh连接目标机器。<br>A窗口：通过ssh+passwd的方式登录进去，什么也不做—<strong>为了保险</strong></p><p>B窗口：通过通过ssh+passwd的方式登录进去，然后：</p><ol><li><code>sudo su</code></li><li><code>ssh service stop</code></li><li><code>/usr/sbin/sshd -d </code>debug方式运行sshdd</li></ol><p>C窗口：<code>ssh -v yourname@hostip</code>，比如当时我是<code>ssh -v jinbao@10.110.16.239</code></p><p>然后分别观察B窗口和C窗口打印的东西。如下所示，可以看到B窗口倒数第四行显示是权限问题，只要将上面提到的文件夹改成<code>600 or 700 or 755</code>,一般该文件夹为755，<strong>再来一遍，发现不用密码成功登录了</strong>，至于为什么那个文件夹会是其他权限，我就没去管了。其实C窗口过程也蛮有意思的，一开始使用<strong>id_rsa</strong>的私钥尝试一下，后面有用其他的尝试一下，直到所有的都不行，就告诉你用密码登录吧。一开始我以为是私钥的问题，我把过程中尝试的所有密钥都试了一遍，然后看到了B窗口的日志。。。。</p><pre class="line-numbers language-B窗口日志" data-language="B窗口日志"><code class="language-B窗口日志">root@nio:&#x2F;home&#x2F;jinbao# &#x2F;usr&#x2F;sbin&#x2F;sshd -ddebug1: sshd version OpenSSH_7.2, OpenSSL 1.0.2g  1 Mar 2016debug1: private host key #0: ssh-rsa SHA256:1sJu9KkQVl&#x2F;GGTO6&#x2F;iECw7XLev7tk+iK&#x2F;DuHbyy1Y0Mdebug1: private host key #1: ssh-dss SHA256:ASXArytwxggfDbf1gjuL1D4gRdNt58VlBh+hG9JcS3odebug1: private host key #2: ecdsa-sha2-nistp256 SHA256:01M0FdZZcYtT+jYHI0SLdrwVChWR8jmMs4KPFcrZiKkdebug1: private host key #3: ssh-ed25519 SHA256:H69XeL&#x2F;L7QtUxj85tedNm4YeBHFu6L5MZS3Quv0bjf0debug1: rexec_argv[0]&#x3D;&#39;&#x2F;usr&#x2F;sbin&#x2F;sshd&#39;debug1: rexec_argv[1]&#x3D;&#39;-d&#39;debug1: Set &#x2F;proc&#x2F;self&#x2F;oom_score_adj from 0 to -1000debug1: Bind to port 22 on 0.0.0.0.Server listening on 0.0.0.0 port 22.debug1: Bind to port 22 on ::.Server listening on :: port 22.debug1: Server will not fork when running in debugging mode.debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8debug1: inetd sockets after dupping: 3, 3Connection from 10.110.218.140 port 53227 on 10.110.16.239 port 22debug1: Client protocol version 2.0; client software version OpenSSH_8.1debug1: match: OpenSSH_8.1 pat OpenSSH* compat 0x04000000debug1: Enabling compatibility mode for protocol 2.0debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.10debug1: permanently_set_uid: 121&#x2F;65534 [preauth]debug1: list_hostkey_types: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]debug1: SSH2_MSG_KEXINIT sent [preauth]debug1: SSH2_MSG_KEXINIT received [preauth]debug1: kex: algorithm: curve25519-sha256@libssh.org [preauth]debug1: kex: host key algorithm: ecdsa-sha2-nistp256 [preauth]debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none [preauth]debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none [preauth]debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]debug1: rekey after 134217728 blocks [preauth]debug1: SSH2_MSG_NEWKEYS sent [preauth]debug1: expecting SSH2_MSG_NEWKEYS [preauth]debug1: SSH2_MSG_NEWKEYS received [preauth]debug1: rekey after 134217728 blocks [preauth]debug1: KEX done [preauth]debug1: userauth-request for user jinbao service ssh-connection method none [preauth]debug1: attempt 0 failures 0 [preauth]debug1: PAM: initializing for &quot;jinbao&quot;debug1: PAM: setting PAM_RHOST to &quot;10.110.218.140&quot;debug1: PAM: setting PAM_TTY to &quot;ssh&quot;debug1: userauth-request for user jinbao service ssh-connection method publickey [preauth]debug1: attempt 1 failures 0 [preauth]debug1: userauth_pubkey: test whether pkalg&#x2F;pkblob are acceptable for RSA SHA256:6YbMfwVKZaQtvUroMXgxTn4qjvCSswzJU21eVfUtSJ8 [preauth]debug1: temporarily_use_uid: 1003&#x2F;1003 (e&#x3D;0&#x2F;0)debug1: trying public key file &#x2F;home&#x2F;jinbao&#x2F;.ssh&#x2F;authorized_keysdebug1: fd 4 clearing O_NONBLOCKAuthentication refused: bad ownership or modes for directory &#x2F;home&#x2F;jinbaodebug1: restore_uid: 0&#x2F;0Failed publickey for jinbao from 10.110.218.140 port 53227 ssh2: RSA SHA256:6YbMfwVKZaQtvUroMXgxTn4qjvCSswzJU21eVfUtSJ8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C窗口日志" data-language="C窗口日志"><code class="language-C窗口日志">MBC02FC42FQ05P:~ tangjinbao$ ssh -v jinbao@10.110.16.239OpenSSH_8.1p1, LibreSSL 2.7.3debug1: Reading configuration data &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;configdebug1: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;config line 9: Applying options for 10.110.16.239debug1: Reading configuration data &#x2F;etc&#x2F;ssh&#x2F;ssh_configdebug1: &#x2F;etc&#x2F;ssh&#x2F;ssh_config line 47: Applying options for *debug1: Connecting to 10.110.16.239 [10.110.16.239] port 22.debug1: Connection established.debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_rsa type 0debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_rsa-cert type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_dsa type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_dsa-cert type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ecdsa type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ecdsa-cert type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ed25519 type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ed25519-cert type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_xmss type -1debug1: identity file &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_xmss-cert type -1debug1: Local version string SSH-2.0-OpenSSH_8.1debug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.10debug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.10 pat OpenSSH_7.0*,OpenSSH_7.1*,OpenSSH_7.2*,OpenSSH_7.3*,OpenSSH_7.4*,OpenSSH_7.5*,OpenSSH_7.6*,OpenSSH_7.7* compat 0x04000002debug1: Authenticating to 10.110.16.239:22 as &#39;jinbao&#39;debug1: SSH2_MSG_KEXINIT sentdebug1: SSH2_MSG_KEXINIT receiveddebug1: kex: algorithm: curve25519-sha256@libssh.orgdebug1: kex: host key algorithm: ecdsa-sha2-nistp256debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: nonedebug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: nonedebug1: expecting SSH2_MSG_KEX_ECDH_REPLYdebug1: Server host key: ecdsa-sha2-nistp256 SHA256:01M0FdZZcYtT+jYHI0SLdrwVChWR8jmMs4KPFcrZiKkdebug1: Host &#39;10.110.16.239&#39; is known and matches the ECDSA host key.debug1: Found key in &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;known_hosts:9debug1: rekey out after 134217728 blocksdebug1: SSH2_MSG_NEWKEYS sentdebug1: expecting SSH2_MSG_NEWKEYSdebug1: SSH2_MSG_NEWKEYS receiveddebug1: rekey in after 134217728 blocksdebug1: Will attempt key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_rsa RSA SHA256:6YbMfwVKZaQtvUroMXgxTn4qjvCSswzJU21eVfUtSJ8debug1: Will attempt key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_dsadebug1: Will attempt key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ecdsadebug1: Will attempt key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ed25519debug1: Will attempt key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_xmssdebug1: SSH2_MSG_EXT_INFO receiveddebug1: kex_input_ext_info: server-sig-algs&#x3D;&lt;rsa-sha2-256,rsa-sha2-512&gt;debug1: SSH2_MSG_SERVICE_ACCEPT receiveddebug1: Authentications that can continue: publickey,passworddebug1: Next authentication method: publickeydebug1: Offering public key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_rsa RSA SHA256:6YbMfwVKZaQtvUroMXgxTn4qjvCSswzJU21eVfUtSJ8debug1: Authentications that can continue: publickey,passworddebug1: Trying private key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_dsadebug1: Trying private key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ecdsadebug1: Trying private key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_ed25519debug1: Trying private key: &#x2F;Users&#x2F;tangjinbao&#x2F;.ssh&#x2F;id_xmssdebug1: Next authentication method: passwordjinbao@10.110.16.239&#39;s password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述只是发现了文件权限的问题，其实通过这个方法可以找出其他失败的原因，授人以渔，遇到其他问题，就看自己摸索了。</p><h1 id="最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来"><a href="#最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来" class="headerlink" title="最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来"></a>最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来</h1><h1 id="最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来-1"><a href="#最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来-1" class="headerlink" title="最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来"></a>最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来</h1><h1 id="最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来-2"><a href="#最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来-2" class="headerlink" title="最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来"></a>最后提醒，解决完了千万别忘记将服务器b（目标服务器）的ssh再启动起来</h1><h1 id="三、死里逃生"><a href="#三、死里逃生" class="headerlink" title="三、死里逃生"></a>三、死里逃生</h1><p>&emsp;&emsp;我弄完成功之后，顺手就把b窗口给关了，然后发现ssh方式没法登录，突然意识到了问题的严重性，我已经做好了拿着显示器、键盘、鼠标去服务器边上，手动起来的准备了。然后我发现了<strong>属于我的A窗口</strong>，二话不说赶紧把ssh重新启动–<code>service ssh start</code>。<br>因为我们的服务出过一次重大事故，所以我变得异常敏感，生怕再出幺蛾子，所以建议至少多开一个窗口备用哦，以免自己太高兴把窗口关了，然后被同事给揍了。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可视化debug linux系统的ECU</title>
      <link href="2021/08/29/use-vscode-debug-ecu/"/>
      <url>2021/08/29/use-vscode-debug-ecu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间真的是太没时间了，耽误了好久，还记得有两个博客没写完的，一个就是<a href="https://jinbaotang.cn/2021/06/06/tls-socket2/">基于openssl实现tls+socket的安全通信-2</a>；还有就是一个<a href="https://jinbaotang.cn/2021/06/06/how-mcu2linux/">我是如何从MCU开发转到linux开发</a>，还想趁着写这篇文章再回顾一下编译链接的原理。前几个月基本都是“纯软件开发”，这周开始了要开始在ECU上实际运行了，虽然我之前在linux服务器已经测试过了，但偶尔还是会出现一些问题，比如coredump。解决这个问题没有比debug更好用的方法了。</p></blockquote><h1 id="一、-关于vscode"><a href="#一、-关于vscode" class="headerlink" title="一、 关于vscode"></a>一、 关于vscode</h1><p>&emsp;&emsp;Visual Studio Code（简称VSCode/vscode）是一款由微软开发且跨平台的免费源代码编辑器。vscode实在太好用了，第二份工作以前一直在用Source Insight，接触到vscode后，就为了AUTOSAR源码时时用过一次了，主要是vscode有各种插件，在工程不大时，搜索、goto简直不要太好用，还可以很简单的在各个平台debug程序。</p><h1 id="二、-我的debug之路"><a href="#二、-我的debug之路" class="headerlink" title="二、 我的debug之路"></a>二、 我的debug之路</h1><p>&emsp;&emsp;关于IDE，我是单片机开发出身，本身是以IDE编译调试为主（最近看很多也开始使用Makefile了），基本上市面上的嵌入式IDE都多多少少用过了，但是我觉得visual studio（简称vs）是独一档的，以前领导要求代码都至少需要具备跨linux、windows平台，所以我都是现在windows上使用开发、调试好后，直接再搬到linux简单测试、修改就ok。vs调试多线程实在太方便了，单步调试时不会因为多线程瞎跑，，更关键的是vs还可以远程调试linux程序，而且基本上和调试windows环境下的没什么区别，还有就是变量改变触发程序停止用来调试异常简直太无敌。我愿称vs上开发代码是。当然即飞机导弹使在windows上我以经常vscode看代码，尤其不是自己的写代码。<br>&emsp;&emsp;新公司配的是macbookpro，虽然也申请了windows电脑，但是性能实在太渣，并且跨linux、windows优先级不高，所以就慢慢还是用vscode来开发、调试代码，一直使用的vscode远程登录到linux服务器，然后使用gdb来调试。这个相对vs来说就弱多了，只有变量监控、断点等极少的功能，并且变量还不能很方便的选择16进制显示还是10进制显示，要想16进制显示变量，必须手动将变量(包括局部变量)<code>add watch，然后在变量后面加上,h或则,x</code>，如下图所示：<img src="/medias/use-vscode-debug/decimal.png" alt="10进制显示变量"> <img src="/medias/use-vscode-debug/hex.png" alt="16进制显示变量"><br>虽然比不上vs debug上的飞机导弹，而且多线程单步调试迷之跳转也是很无语，但是用起来还是不错的，怎么也算的坦克飞机了。<br>&emsp;&emsp;这周刚把代码放到板子上就coredump了，，<code>gdb exe core</code>虽然看到了coredump的位置，但是还是没有头绪，因为出现coredump的地方是一个递归函数。先是gdb命令行调试，命令行设断点、单步运行，小米加步枪真是太难了，但是听说大神都是这样来调试的Orz；所以后面又在linux服务器准备测试条件上重新复现了一遍，解决了问题。显然我是不能在ECU上装个vscode server了，我怕领导知道了把我打死，不过好在天生乐观，做好了我要成为gdb命令调试大神的准备，实在不行就日志调试法。但是在某个晚上，突然想起了，既然windows下的vs的能够远程调试linux，那linux是不是也能远程调试linux呢？经过简单分析，只要ECU上能够运行gdb server，linux服务器远程client，不就成了。先是在板子上搜了一下，嘿，好家伙，板子上还是有的。<br><img src="/medias/use-vscode-debug/gdbserver.png" alt="ECU上的gdbserver在发光"></p><h2 id="1-vscode调试ECU验证"><a href="#1-vscode调试ECU验证" class="headerlink" title="1. vscode调试ECU验证"></a>1. vscode调试ECU验证</h2><p>&emsp;&emsp;有了上面想法后，我又经过进一步的分析，真的是可行的，显示在Google搜索了一番，验证了可行性，然后又开始找应该如何做。估计这样做的人并不是很多，所以找了半天也没找到有比较好的教程。我知道调试相关的配置都是在launch.json上，所以我又去vscode官网去了找launch.json的说明，看到了下图，我就开始配置了。<img src="/medias/use-vscode-debug/debugcfg.png" alt="Customizing GDB or LLDB"><br>上图官网链接:<a href="https://code.visualstudio.com/docs/cpp/launch-json-reference">launch-json-reference</a>.</p><h2 id="2-vscode调试ECU配置"><a href="#2-vscode调试ECU配置" class="headerlink" title="2. vscode调试ECU配置"></a>2. vscode调试ECU配置</h2><p>&emsp;&emsp;我先是配置好了gdbserver，毕竟在ECU上<code>gdbserver --help</code>一下就都有了，<img src="/medias/use-vscode-debug/gdbservercfg.png" alt="gdbserver --help">.<br>所以我一下就讲ecu端的给配置好了:<code>gdbserver 172.20.1.199:21314 udsd</code>，运行后如下图所示：<img src="/medias/use-vscode-debug/rungdbserver.png" alt="rungdbserver"><br>然后就是配置vscode端了，也就是gbd client端，期间也有很好多次的试错，具体过程不表了，总结如下：</p><ol><li>gdbserver –help图中显示的HOST是client端的IP，而不是gdbserver端的IP。</li><li>miDebuggerPath中的路径是指的vscode实际运行的机器上的工具，而不是ECU端能够运行的工具，交叉编译环境下需要及其的注意这一点。ps:我自己用源码编译出来的工具试了也没成功，最后找供应商用yocto制作出来的工具链上带的x86_64的工具就可以了。<br>vscode上的配置如下图，默认读者已经会vscode上的debug了：<img src="/medias/use-vscode-debug/gdbclientcfg.png" alt="vscode gbd配置">.</li></ol><h2 id="3-调试前的最后障碍"><a href="#3-调试前的最后障碍" class="headerlink" title="3. 调试前的最后障碍"></a>3. 调试前的最后障碍</h2><p>&emsp;&emsp;做完上面的配置后，我以为这么简单就可以debug了。发现只能运行但是不能打断点，看了下cmake生成的Makefile，发现生成的Makefile上flag显示的是NDEBUG：<img src="/medias/use-vscode-debug/NDEBUG.png" alt="makefile NDEBUG">。但是我已经在CMakeLists.txt上配置<code>set(CMAKE_BUILD_TYPE Debug)</code>，依然没有生效。后面我就使用了，<code>add_definitions(&quot;-g&quot;)</code>强制来加上-g选项，果然可以debug了。到这就大功搞成了，领导再也不用担心我效率不高了。</p><h2 id="4-最后障碍的刨根问底"><a href="#4-最后障碍的刨根问底" class="headerlink" title="4. 最后障碍的刨根问底"></a>4. 最后障碍的刨根问底</h2><p>&emsp;&emsp;作为有技术洁癖（自大）的人，不太能忍受上面的“肮脏”解决办法，就去了问了大神Ricky（褒义词的全能神），好家伙好家伙，大神敲键盘的速度，在我描述完问题之前就把引发问题的地方打开并且演示完毕了。<code>速度太快了，我不想忍了。</code>在大神的解释下，原因就是交叉编译时会使用toolchain上的cmake配置，即将交叉编译必须的一些选项配置好，而toolchain上默认是发布的release版本而不是debug，并且优先级是最高的，所以会覆盖自己在cmake上的配置。toolchain.cmake配置如下图：<img src="/medias/use-vscode-debug/cmakendebug.png" alt="toolchain.cmake NDEBUG"></p><h1 id="三、最后呢"><a href="#三、最后呢" class="headerlink" title="三、最后呢"></a>三、最后呢</h1><p>&emsp;&emsp;这篇文章标志着我要开始在ECU上调试了，也暗示着我4 5个月的重构开始进入了最后阶段了。这几个月其实压力还是蛮大的，统计了下代码量，17000行的代码超过了我去年一年的代码量，目前来看是达到了跳槽的目的，放弃team leader还是很值当的。并且熟能生巧，前段时间没太有时间就是因为我自己写完了也会再思考思考还有没有改进的空间，代码量上来了，关于结构、耦合性是会不由自主就去考虑的。现在进入了新阶段，行百里者半九十，希望能有个好的结果。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake--动态库之配置（第一篇）</title>
      <link href="2021/06/20/cmake1/"/>
      <url>2021/06/20/cmake1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录最近使用cmake遇到和解决的问题</p></blockquote><h1 id="一、-关于cmake"><a href="#一、-关于cmake" class="headerlink" title="一、 关于cmake"></a>一、 关于cmake</h1><blockquote><p>cmake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性,类似UNIX下的automake。只是 CMake 的组态档取名为 <em>CMakeLists.txt</em>。Cmake 并不直接建构出最终的软件，而是产生标准的建构档（如 Unix 的 Makefile 或 Windows Visual C++ 的 projects/workspaces），然后再依一般的建构方式使用。</p></blockquote><p>&emsp;&emsp;上面是我随便抄的，因为我写不出这么言简意赅的定义。但是你让做mcu的人看了上述定义就大概率等于白说。大部分mcu的开发者都是基于商业的IDE（破解是违法的哦）来编译、链接甚至调试，虽然现在很多mcu也开始使用makefile无界面的形式来执行编译，但是依然很多人不知道Makefile。但是用ide，你依然需要配置头文件路径啊，编译等级啊，输出的路径以及名字啊，生成库（基本都是静态库）还是可执行文件啊，等等。整完这些配置好，找个🔨（build），一点，就开始编译，不成功，改改配置改改代码，直到编译通过，很少有人会关系IDE做了那些事。<br>&emsp;&emsp;那IDE到底做了那些事呢，在交叉编译（暂且这么理解吧，毕竟都是在windows平台编译成mcu可执行的文件了）之前，IDE很重要的一件事就是根据你上面的一堆配置，生成Makefile文件或者Makefile文件，然后才是编译、链接、输出可执行文件。同样的cmake一个很重要的功能就是用那个来生成Makefile文件或者project文件，还有没有其他作用，当然还有了，比如让它生成shell脚本之类，当然这些都是高级用法，后面用到，还会继续展开的。</p><h2 id="cmake怎么学"><a href="#cmake怎么学" class="headerlink" title="cmake怎么学"></a>cmake怎么学</h2><p>&emsp;&emsp;一句话：及其容易入门，但是深入使用有难度。我fork了一个<a href="https://github.com/jinbaotang/cmake-examples">github仓库–cmake-examples</a>，对着上面的示例，基本上把那天就从无知到敢写量产代码里了，看下下面的示例，后面你就能<code>cmake</code>,<code>make</code>,<code>编译成功</code>，是不是简直不要太简单。如果是已经工作了的小哥/小妹或者想快速上手的学生，看完01/02就已经入门了，03以后讲的的啥，我也没看过，但这并不影响我写代码、写<em>CMakeLists.txt</em>。因为据说，前面两章只讲了20%的知识，但是却可以覆盖80%的应用场景。我学完前两章后，就开始干活了，遇到了不会的，基本上就是百度了。所以建议先学前两章，剩下的可以在工作项目实操中慢慢锻炼，慢慢学习；如果是时间充足的学生，我觉得整个一起学完也是一个很不错的事情。</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># Set the minimum version of CMake that can be used</span><span class="token comment"># To find the cmake version run</span><span class="token comment"># $ cmake --version</span><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.5</span><span class="token punctuation">)</span><span class="token comment"># Set the project name</span><span class="token keyword">project</span> <span class="token punctuation">(</span>hello_cmake<span class="token punctuation">)</span><span class="token comment"># Add an executable</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>hello_cmake main.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;一开始，我一个在linux开发的同事，推荐我用cmake来着，但是我还是喜欢在<em>visual studio</em>，如果是linux，我就<strong>vs</strong>的ssh远程调试。等后面自己整vsomeip时，不得不面对cmake，<strong>可真香</strong>，有需求的同事尽快用起来吧。另外，由于cmake版本更新很快，一些冷门用法也不要死记硬背了，能不用也尽量不用了，不然给别人用时，容易出现兼容性问题。</p><h1 id="二、-这篇的主题"><a href="#二、-这篇的主题" class="headerlink" title="二、 这篇的主题"></a>二、 这篇的主题</h1><p>&emsp;&emsp;这篇主题主要是在用cmake构建动态库时，遇到的一些问题和解决思路，基本都是导出google/baidu找的，写出来一方面是为了记录，一方面是做个问题集。</p><h2 id="1-关于-fPIC"><a href="#1-关于-fPIC" class="headerlink" title="1. 关于-fPIC"></a>1. 关于-fPIC</h2><pre class="line-numbers language-gnu手册" data-language="gnu手册"><code class="language-gnu手册">-fpicGenerate position-independent code (PIC) suitable for use in a shared library, if supported for the target machine. Such code accesses all constant addresses through a global offset table (GOT). The dynamic loader resolves the GOT entries when the program starts (the dynamic loader is not part of GCC; it is part of the operating system). If the GOT size for the linked executable exceeds a machine-specific maximum size, you get an error message from the linker indicating that -fpic does not work; in that case, recompile with -fPIC instead. (These maximums are 8k on the SPARC, 28k on AArch64 and 32k on the m68k and RS&#x2F;6000. The x86 has no such limit.)Position-independent code requires special support, and therefore works only on certain machines. For the x86, GCC supports PIC for System V but not for the Sun 386i. Code generated for the IBM RS&#x2F;6000 is always position-independent.When this flag is set, the macros __pic__ and __PIC__ are defined to 1.-fPICIf supported for the target machine, emit position-independent code, suitable for dynamic linking and avoiding any limit on the size of the global offset table. This option makes a difference on AArch64, m68k, PowerPC and SPARC.Position-independent code requires special support, and therefore works only on certain machines.When this flag is set, the macros __pic__ and __PIC__ are defined to 2.-fpie-fPIEThese options are similar to -fpic and -fPIC, but the generated position-independent code can be only linked into executables. Usually these options are used to compile code that will be linked using the -pie GCC option.-fpie and -fPIE both define the macros __pie__ and __PIE__. The macros have the value 1 for -fpie and 2 for -fPIE.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;-fPIC与-fpic都是在编译时加入的选项，用于生成位置无关的代码(Position-Independent-Code)。这两个选项都是可以使代码在加载到内存时使用相对地址，所有对固定地址的访问都通过全局偏移表(GOT)来实现。-fPIC和-fpic最大的区别在于是否对GOT的大小有限制。-fPIC对GOT表大小无限制，所以如果在不确定的情况下，使用-fPIC是更好的选择。但是如果你要动态库链接静态库时，是需要把这个取消的，不然编译就会出错了，原因是静态库本质上是一堆**.o*<em>文件的集合，地址空间是绝对，也就是不是</em>position-independent code (PIC)*的，所以如果动态库加上-fPIC自然会导致编译出错，出错如下所示：</p><pre class="line-numbers language-none"><code class="language-none">relocation R_X86_64_PC32 against symbol &#96;xxxxxxx&#39; can not be used when making a shared object; recompile with -fPICfinal link failed: Bad value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果需要在加上-fPIC的话，就可以在<em>CMakeLists.txt</em>中加上这句就好了：<code>set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -fPIC&quot;)</code>.<br>上面是关于-fPIC的相关知识以及cmake要如何配置，但是我遇到的问题是：我们库上的某个模块默认编译出来的是静态库，但是我的动态库并且即使我的<em>CMakeLists.txt</em>上没有加上-fPIC这个flag，在生成的Makefile里依然有这个选项，如下图所示，这导致我后面链接时就会出现前面提到的-fPIC错误了。<img src="/medias/cmake1/makefile_fPIC.png" alt="makefile -fPIC"><br>直到现在（2021.06.21）并没有找到原因在哪里。然后解决办法时，让库上的模块生成名字相同的动态库和成静态库，然后在<em>CMakeLists.txt</em>里指定使用动态库。<br>网上我看好多人说，如果使用<code>target_link_libraries()</code>不指定库的类型，优先链接动态库（也有人说优先静态库），不知道是否个版本有关还是网友误解了，从官网我也没找到对应的依据，在我的<code>cmake 3.10.2</code>中，不显示指定库的类型，默认是优先链接静态库的。</p><h2 id="2-如何指定cmake链接库的类型"><a href="#2-如何指定cmake链接库的类型" class="headerlink" title="2. 如何指定cmake链接库的类型"></a>2. 如何指定cmake链接库的类型</h2><p>如果要显示的制定链接静态库还是动态库，只需要加上后缀即可，如下所示：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment">#```````linux ``````````</span><span class="token comment">#Dynamic library </span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx demo.so<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx libdemo.so<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx -ldemo.so<span class="token punctuation">)</span> <span class="token comment">#staic library </span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx demo.a<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx libdemo.a<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx -ldemo.a<span class="token punctuation">)</span> <span class="token comment">#```````windows(msvc) ``````````</span><span class="token comment">#Dynamic library </span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx demo.dll<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx libdemo.dll<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx -ldemo.dll<span class="token punctuation">)</span> <span class="token comment">#staic library </span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx demo.lib<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx libdemo.lib<span class="token punctuation">)</span> <span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>xxx -ldemo.lib<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-即生成静态库也生成动态库"><a href="#3-即生成静态库也生成动态库" class="headerlink" title="3. 即生成静态库也生成动态库"></a>3. 即生成静态库也生成动态库</h2><p>&emsp;&emsp;在第一节提到了，针对-fPIC的那个解决方案是即生成动态库也生成静态库。那如何才能即生成静态库又生成动态库呢，如果直接写上，<em>注： <code>add_library</code>如果不加任何选项，默认生成静态库</em>：</p><pre class="line-numbers language-none"><code class="language-none">add_library($&#123;PROJECT_NAME&#125; demo.c)add_library($&#123;PROJECT_NAME&#125; SHARED demo.c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是会出现如下错误的:<img src="/medias/cmake1/cmake_shared_static_error.png" alt="cmake error"><br>因为官方文档已经描述的很清楚了，意思就是，使用 add_library(<name> …) 生成目标文件时不能使用相同 <name>。：</p><pre class="line-numbers language-none"><code class="language-none">add_library(&lt;name&gt; [STATIC | SHARED | MODULE]            [EXCLUDE_FROM_ALL]            [source1] [source2 ...])            Adds a library target called &lt;name&gt; to be built from the source files listed in the command invocation. (The source files can be omitted here if they are added later using target_sources().) The &lt;name&gt; corresponds to the logical target name and must be globally unique within a project. The actual file name of the library built is constructed based on conventions of the native platform (such as lib&lt;name&gt;.a or &lt;name&gt;.lib).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以解决方案是：首先生成<strong>libdemo-static.a</strong>，然后使用 set_target_properties() 指令的 OUTPUT_NAME 参数，将<strong>libdemo-static.a</strong> 重命名为 libdemo.a，即可生成名字相同的动态库和成静态库。<br>具体就是如下所示(未测试)：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span>demo SHARE demo.c<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span>demo-static tigerLogging.c<span class="token punctuation">)</span><span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>demo-static <span class="token namespace">PROPERTIES</span> <span class="token property">OUTPUT_NAME</span> <span class="token string">"demo"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-关于-Wl-no-undefined"><a href="#4-关于-Wl-no-undefined" class="headerlink" title="4. 关于-Wl,--no-undefined"></a>4. 关于<code>-Wl,--no-undefined</code></h2><h3 id="动态库和静态库–随便谈谈"><a href="#动态库和静态库–随便谈谈" class="headerlink" title="动态库和静态库–随便谈谈"></a>动态库和静态库–随便谈谈</h3><p>&emsp;&emsp;静态库和动态库的区别，我计划使用一篇文章（或者一个大章节）来记录一下我的理解，所以这里就不展开讲解了。<br><strong>静态库</strong>：本质上和*.o*文件的压缩包没啥区别。<br><strong>静态库</strong>：特别接近一个可执行文件，或者编译链接时就可以理解为一个可行文件。</p><p>&emsp;&emsp;基于上面静态库和动态库的特性，软件模块编译成库时，我基本都会将软件模块编译成动态库而不是静态库，最后给别人用时，是使用静态库还是动态库，就具体情况具体分析了。这么做的好处是，可以保证你的软件模块最大程度的和别人解耦，因为有一个链接的过程。但是但是如果编译动态库时，没有加上<code>-Wl,--no-undefined</code>这个选项，就会导致，如果一个函数只有声明，没有定义，也能正确的生成动态库，但到最后生成可执行文件后，加载阶段借回报<code>undefined reference to `xxxx` </code>。为了让错误在编译动态库时即报出来，这样在团队合作开发就可以更顺畅了，就可以在加上<code>-Wl,--no-undefined</code>，这个选项的意思是：如果so里有未定义符号，则编译不通过。在<em>CMakeLists.txt</em>上加上如下语句：</p><pre class="line-numbers language-none"><code class="language-none">set(CMAKE_SHARED_LINKER_FLAGS &quot;-Wl,--no-undefined&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、-写在最后"><a href="#三、-写在最后" class="headerlink" title="三、 写在最后"></a>三、 写在最后</h1><p>&emsp;&emsp;正如前面提到的，cmake我也是边用边学。但是其实这就要求你得有一定的其他linux基础，比如Makefile/gcc基础，这样就能知道编译时还有这些选项，在遇到问题时才会想起去搜在cmake要如何实现；当然如果基础知识足够牢固，比如对动态库定义理解非常到位，也能对第二章第4节提到东西，会有很高的技术敏感度，此刻就会模糊搜索，或者将自己的大致疑惑向别人描述，以获得帮助。所以对我来说，我基本不挑知识和方向，啥都看看，啥都学学，这样才能在遇到问题时，保持很高的敏感度，猜测出大致的解决方向/方案。</p>]]></content>
      
      
      <categories>
          
          <category> cmake </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux间网络通信无界面实时抓包、分析以及文件同步</title>
      <link href="2021/06/06/linux-develop-tips1/"/>
      <url>2021/06/06/linux-develop-tips1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这周四、五趁着工作间隙以及加班折腾了两天，实现了wireshark远程实时抓包和显示，以及两个linux之间文件同步。也许没多难，又或者有更好的办法，但是我折腾了好久，觉得可以记录下。</p></blockquote><h1 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h1><p>&emsp;&emsp;现在都基本都是以linux上的开发为主，然后日常开发环境在部门的两台服务器（都是ubuntu）上，但是主要还是在一台服务器上，因为我本身暂时是以网络相关的开发为主，这就避免不了的需要抓包分析，报文交互基本上能够分析出问题所在。我是远程ssh登录来做日常开发工作，如果使用tcpdump来抓包分析，一个是不是特别的直观，还有就是灵活性不是特别够，要是直接在屏幕上显示，根据不同的需求，需要一直该改命令，所以就想着能够使用远程或者本地来使用wireshark来分析报文。如下图所示，是我实际工作网络拓扑示意图，<img src="/medias/linux-develop-tips/server_and_mypc.png" alt="工作网络拓扑"></p><p>&emsp;&emsp;上面提到了主要是在一台服务器完成开发，但是有时候跑client/server时，还是要在两台电脑通过物理网络通道测试一下。这就涉及到了在两台电脑同步开发的问题，就会涉及到文件同步的问题。</p><h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><p>&emsp;&emsp;工欲善其事必先利其器，所以针对前面提到痛点，还是想解决点，想了不少解决思路，并且都进行了尝试，针对失败的问题进行了分析。</p><h2 id="1-网络抓包"><a href="#1-网络抓包" class="headerlink" title="1. 网络抓包"></a>1. 网络抓包</h2><p>&emsp;&emsp;针对网络抓包，分别尝试了：</p><ol><li>在我的个人工作电脑上，使用远程桌面，服务器的ubuntu上安装上linux版的wireshark，这样我就可以实时对着报文分析了。但是失败了。</li><li>将我的个人pc连接到上图中的交换机上，wireshark使用混杂模式将交换机上的所有报文都抓到，再通过过滤，过滤（显示过滤和抓包过滤）掉不必要的报文。结果失败</li><li>使用wireshark上的远程抓包。结果成功</li></ol><p>最终只有<em>方法3</em>成功了，但是却是我最后想到的，下面将稍微展开的分析下每个方法，我觉得后续有时间，都是能够成功的。</p><h3 id="1-远程桌面"><a href="#1-远程桌面" class="headerlink" title="1). 远程桌面"></a>1). 远程桌面</h3><p>&emsp;&emsp;针对远程桌面这种办法，一开始用的是VNC，其中xfor4是最能满足我的需求，因为我们的服务器上并没有外接显示器，这样就会有一个弊端，如果我将桌面输出到xfore4上去了，后面服务器即使外接了显示器也会没用，这就给别人带来不便利。咱也不能干这样<strong>损人利己</strong>的事，在简单的挣扎后（**其实不简单，尝试了好多种办法~~**），还是放弃了这样做。想要实现远程桌面的同志可以参考下这篇文章，<a href="https://blog.csdn.net/u012911347/article/details/90267252">使用RealVNC连接无外接显示器的Ubuntu18.04</a>，这篇文章还是亲测有用的。<br>&emsp;&emsp;后面又试了下，teamviewer，能够连接上，但是不显示桌面，通过查资料，基本上可以判定，是需要外接显示器的。<br>&emsp;&emsp;经过上述折腾后，果断放弃了这个方法。</p><h3 id="2-将pc直接连接到交换机上"><a href="#2-将pc直接连接到交换机上" class="headerlink" title="2). 将pc直接连接到交换机上"></a>2). 将pc直接连接到交换机上</h3><p>&emsp;&emsp;之前我调试网络时，都是自己的电脑通过网线接到交换机上，剩余其他的网络终端都连接到交换机，这样我就能从我的电脑上抓到所有的报文，简单方便、快捷，所以我这次我也想这样。正好我有两个笔记本，我可以将我的其中一个<em>笔记本电脑1</em>通过网线接入到交换机上，然后另一个<em>笔记本2</em>远程<em>笔记本1</em>，达到我的想法。如下图所示:<img src="/medias/linux-develop-tips/doublepc.png" alt="双电脑方案"><br>然而理想很丰满，现实很残酷，部门小组里的交换机虽然跟我以前一样是个二层交换机，但是上图的<strong>my_pc1</strong>并没有能够抓到server1和server2的网络报文，搜过官网，找过淘宝，聊过京东，依然没有找到答案。后面还以为wireshark没开<em>混杂模式</em>，最后发现也不是这个原因。没有解决这个问题，总觉心里有根刺，后面找交换机资料时，才得到答案，现在的交换机变聪明了，如果不是发给你的报文，mac就给你过滤掉了，并且这个交换机还不支持配置成混杂模式。欲哭无泪~~~。<br>&emsp;&emsp;曾经沧海难为水，经历过以前交换机的便利，咋能容忍这种拉低工作效率的存在。果断买网线买交互机，后面直接从我的电脑网口怼到交换机上。</p><h3 id="3-wireshark远程抓包"><a href="#3-wireshark远程抓包" class="headerlink" title="3). wireshark远程抓包"></a>3). wireshark远程抓包</h3><p>&emsp;&emsp;虽然经历上面两个方法的失败，但是心里还是挂念着，最终于在使用wireshark捕获时，突然看到有一个<strong>远程接口</strong>，技术敏感告诉我，问题应该得到解决了，一阵baidu/google后，终于成功的远程抓到了两个服务器的网络报文了。如下图所示：<img src="/medias/linux-develop-tips/win_wireshark_rpcap.png" alt="windows wireshark远程抓包"><br>想要达到上述效果，首先需要在windows wireshark上在管理接口/远程接口上添加远程设备，如下图所示：<img src="/medias/linux-develop-tips/win_wireshark_r_if.png" alt="远程接口"><br>想要实现windows 环境下wireshark远程抓包，需要在服务器端linux上另外安装rpcap来做server（tcpdump相关的自然是需要的）。<br>关于安装rpcap，直接参考<a href="https://github.com/rpcapd-linux/rpcapd-linux">github仓库上的教程</a>即可,如下图所示：<img src="/medias/linux-develop-tips/rpcap_install.png" alt="rpcap build and use"></p><h4 id="ubuntu16上的一些问题"><a href="#ubuntu16上的一些问题" class="headerlink" title="ubuntu16上的一些问题"></a>ubuntu16上的一些问题</h4><p>&emsp;&emsp;上述操作，我都是在ubuntu18上操作的，一切都很顺利。但是我后面在ubuntu16上就又遇到一些问题了，首先是可能会使用<code>sudo apt-get build-dep libpcap</code>这个命令下载不下来东西，因为缺少<code>URL sources.list</code>，解决办法, 一个是在sources.list中添加上，但是服务器并不是我一个人用，所以我选择的是第二种办法，<code>git clone https://github.com/rpcapd-linux/rpcapd-linux</code>，然后按上图的办法来编译出libpcap。<br>&emsp;&emsp;此时依然有可能出问题，那就是会出现如下错误：</p><pre class="line-numbers language-none"><code class="language-none">yacc -d grammar.ymake: yacc: Command not foundMakefile:365: recipe for target &#39;grammar.c&#39; failedmake: *** [grammar.c] Error 127<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;这是缺少依赖项，<code>flex</code>，只需执行<code> sudo apt-get install flex bison</code>，安装上依赖项。如上图所示就能个很顺利的安装好<code>rpcap</code>了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>针对使用，其实也蛮简单的，<code>sudo ./rpcapd -4 -n -p [your port] -deamon</code>，端口的就是自己自定义的，后面在wireshark上需要输入，比如我我设置的是<em>55555</em>，如下图所示。另外最好将<em>rpcapd</em>设置成开机自启动了，因为万一服务器重启了，你还要手动开启<em>rpcapd</em>，岂不是很low。所以实现一个脚，并将该脚本设为开机启动，这样就不用担心前面提到的问题了。如下所示：</p><pre class="line-numbers language-run_rpcapd.sh" data-language="run_rpcapd.sh"><code class="language-run_rpcapd.sh">#run_rpcapd.sh#! &#x2F;bin&#x2F;sh# command content  echo &#39;xxx&#39; | sudo &#x2F;home&#x2F;jinbao&#x2F;software&#x2F;rpcapd-linux&#x2F;rpcapd -4 -n -p 8888  exit 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;由于windows电脑略有反应迟钝，主要是以mac为主，想着还是用mac端的wireshark也实现远程抓包，发现mac上的wireshark没有<strong>远程接口</strong>这个东西了（我的是m1 macbookpro）。但是一顿摸索后，发现有这个<strong>SSH remote capture: sshdump</strong>，如下图所示，意思也很明显了，剩下就交给baidu/google了。<img src="/medias/linux-develop-tips/mac_wireshark.png" alt="mac wireshark"><br>但是一顿操作下来，发现不是报这个错<img src="/medias/linux-develop-tips/mac_wireshark_cannotfind.png" alt="can&#39;t find .."><br>就是报权限不够的错误，类似下图这个错误：<img src="/medias/linux-develop-tips/mac_wireshark_permission.png" alt="permission invalid"><br>由于任务紧张，只能暂且搁置折腾了，等后面在试试了咯。暂时先用windows实时抓包用着了呗。<br>··························更新于7.22······························<br>&emsp;&emsp;优秀的同事帮我找到原因，并且不需要rpcap就能抓包，原来linux默认没有开启<code>PermitRootLogin</code>，知道原因后，操作就简单了。执行如下操作：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">cd &#x2F;etc&#x2F;ssh&#x2F;vim&#x2F;vi sshd_config#找到PermitRootLogin，注释掉这一行#添加PermitRootLogin yessudo service sshd restart <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后如下图点开设置，配上ip和端口。<br><img src="/medias/linux-develop-tips/mac_wireshark1.png" alt="ssh remote capture"><br>最后在如下图中Authentication中输入root用户名和密码或者使用密钥，建议使用密钥，因为使用密码，他每次不会保存。<br><img src="/medias/linux-develop-tips/auth.png" alt="authentication config"></p><h2 id="2-文件同步"><a href="#2-文件同步" class="headerlink" title="2. 文件同步"></a>2. 文件同步</h2><p>&emsp;&emsp;文件同步，我们用的比较多的有系统（windows、mac os）自带的局域网同步，或者onedriver这样的云同步。但是在linux上我只想针对某些文件进行网络同步即可，用onedriver除了有可能违反公司安全规定外，未免也太大材小用了，所以就考虑其他方案。</p><ol><li>通过git。需要不停的<code>add, commit, push, pull</code>，太繁琐，<strong>pass</strong>。</li><li>scp，会出现全部拷贝，不能增量拷贝，多了之后，效率特别低，对磁盘也是频繁读写，<strong>pass</strong>。</li><li>rsync_inotify，实时、增量同步，<strong>amazing</strong>。如下图：<img src="/medias/linux-develop-tips/rsync_inotify.png"></li></ol><p><strong>文件同步</strong><br>&emsp;&emsp;针对这个方案，我主要参考了这篇文章<a href="https://www.cnblogs.com/qinhir/p/6589403.html">实现rsync+inotify 实时同步文件</a>，但是对着这篇文章，我没有成功，再结合这篇文章<a href="http://blog.chinaunix.net/uid-13954085-id-158637.html">把rsync错误报告说清楚</a>,就基本把问题解决了，当然过程还是挺不容易的，因为都是网上搜索+自己摸索的，暂时也就不去记录了，如果小伙伴有疑问，可以在评论区留言，基本能够保证短时间内收到评论。<br>&emsp;&emsp;最终我没用inotify来实时同步，但是亲测是可行的，因为我怕其他同事也要同步，会影响他们，不过我通过设置命令行别名的方式<code>alias sync_xxxx=&#39;xxxxx&#39;</code>,就能一个命令同步过去了。如下图所示，我能在意位置直接就<code>rsync_BWG</code>就能将我事先配置的文件同步过去。<img src="/medias/linux-develop-tips/alias_rsync.png" alt="alias rsync"></p><p><strong>同步时忽略某些文件或者文件夹</strong><br>&emsp;&emsp;在同步时，有时我们并不需要将所有文件同步过去。<img src="/medias/linux-develop-tips/bgw_tree_l1.png" alt="BGW"> <img src="/medias/linux-develop-tips/uds_component_tree_l1.png" alt="uds-component"><br>上述俩图，<code>ironman-imx8-buildroot</code>和<code>.vscode</code>我就不想同步过去，此时我就可以通过<code>--exclude</code>这个option来达到目的，<strong>文件是使用相对路径哦</strong>。示例如下图：<img src="/medias/linux-develop-tips/use_exclude.png" alt="use --exclude"></p><h1 id="三、写在最后"><a href="#三、写在最后" class="headerlink" title="三、写在最后"></a>三、写在最后</h1><p>&emsp;&emsp;虽然说工欲善其事必先利其器，但是关键的是还需要平衡利弊，如果改进一点效率反而会浪费你更多的时间，我觉得反而是得不偿失的。不过，要是利用自己玩手机刷剧的时间，用来去折腾这个技术，我觉得是值当的，因为表面是折腾这一项，拔出萝卜带出泥，遇到问题了，想解决，基本上会涉及到很多知识面，针对我这种还需大量学习的人说，简直是成长的<em>兴奋剂</em>。以前玩单片机时，就各种折腾windows系统；后面因为linux上有很多可以折腾的，所以我就转到了linux开发，有兴趣可以参考下<a href="https://jinbaotang.cn/2021/06/06/how-mcu2linux/">我是如何从MCU开发转到linux开发</a>，不过当前（2021.06.07 02:13）未完成。</p><p>&emsp;&emsp;针对上面有些地方不够详细，可以评论区留言~~</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wireshark </tag>
            
            <tag> rsync </tag>
            
            <tag> pcap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是如何从MCU开发转到linux开发</title>
      <link href="2021/06/06/how-mcu2linux/"/>
      <url>2021/06/06/how-mcu2linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从大二开始玩单片机，2019年想转linux开发，但是无从下手；在工作中，终于在2020年中无缝、平滑过渡到linux上开发，想会议下自己转变之路，同时也希望后面自己进一步成长后，现在的认知是对，然后能够帮助同样迷惑小伙伴。至于linux转mcu，前两年合作的小伙伴就是纯linux出生，感觉转mcu也是需要改变固有认知，但是毕竟没有经历过，则不再展开叙述。<br><em>注： 19领证结婚，20年喜迎我的小宝贝</em></p></blockquote><h1 id="一、-曾经的迷茫"><a href="#一、-曾经的迷茫" class="headerlink" title="一、 曾经的迷茫"></a>一、 曾经的迷茫</h1><p>&emsp;&emsp;2019年的时候，就想开始慢慢的学linux开发，由于那时候工作才不到一年，自己本身又不是科班出生，在学校的是基本是以单片机（MCU）开发为主，所以那时候想学，但是感觉不知道从何入手，并且想学的又特别多，傻不傻分不清BSP和linux开发，那时候就挺迷茫的。经常能从各个地方看到这个企鹅，想着要是有一天我也能在linux做开发是多么炫的一个事。<img src="/medias/how-mcu2linux/linux.jpeg" alt="linux logo"><br>&emsp;&emsp;后面又做了一个<strong>协议栈评估项目</strong>，自己从<em>项目成员</em>变成了<em>技术负责人</em>，其中很多时间都投入到了项目里，另外虽然我是<em>技术负责人</em>，但主要是负责mcu这块的工作，初期由于项目目标不明确，从梳理需求到完成需求，花费了很多时间，就更没有时间去按部就班的学linux了。记得19年，看过《linux就该这样学》，看了一小半感觉里面都是八股文–以运维、考试为主，所以最后也不了了之；也看过《鸟哥的Linux私房菜》，不知道是语言关系还是书籍太老了的原因，最后也开了个头而已。但是还是得感谢<strong>协议栈评估项目</strong>，在这个项目里，作为<em>技术负责人</em>多少耳濡目染的了解一下linux、Android和qnx；同时更加熟练地使用git（犯过很多罪）；进一步的学习了计算机网络；实操解决了编译相关的问题，这在我后面平滑的过渡到linux奠定了不少的基础，后面也会分析到。<br>&emsp;&emsp;当初想学linux（当时不知道linux开发还细分好多）的初衷其实就是觉得别人对着一堆黑框框开发好炫；一个命令，kuakua出来一堆东西；然后看到其他人，啥命令都懂、都能拼出来，后面才知道原来有table自动补全、还有<code>help</code>和<code>man</code>命令；也觉得他们能从一堆<strong>黑压黒压的字母</strong>中，找到错误出现在哪里，觉得太tm牛逼了；还觉得交叉编译好神奇呀。作为技术男，怎能忍受自己不会这么牛逼的事情，所以就下定决心，自己也得会。就酝酿着要开始学linux，大概的浏览了几本书，上来就是<code>vim</code>使用、<em>必须要掌握的linux命令</em>，反正讲了一堆实操的东西，当时还觉得，<em>恩，这就是我想学的</em>。但是学了之后，因为自己还主要是单片机开发，一段时间后，都忘了、忘了。。。。；也看过一些其他的书籍，有从盘古开天辟地开始写的，还是前面提到的由于自己不是科班出生，直接给我干懵了，差点就从入门都放弃了。好在心里也一直挂念着这个事，但凡能在Linux上实操地事情，我一定要研究研究，比如写个Makefile啊；使用gcc反汇编再看汇编；使用<code>strace</code>调试代码；再在积累了一些计算机基础过后，觉得自己<em>能行</em>了，自己偷偷干了一些linux项目（其实就是平常多留心，不要放过任何锻炼的机会），后面就给领导说，linux开发喊上我，没问题的。<br>&emsp;&emsp;虽说，上面在吐槽我看过的那些linux书籍，但是我还是觉得看经典的书籍是最有用的，因为它里面的知识是成体系的，但是由于我的背景和工作决定我，不太能去大块时间去啃那些书，更多还是拿书当字典用了，但是还建议有条件的小伙伴，阅读经典书籍来提升自己。另外，虽然我觉得linux很炫，但并不意味着单片机开发就很low，感觉这更多是个人爱好和随着工作内容决定的。</p><h1 id="二、-MCU2linux"><a href="#二、-MCU2linux" class="headerlink" title="二、 MCU2linux"></a>二、 MCU2linux</h1><p>&emsp;&emsp;在我今天看来，觉得当初慢慢转linux开发的过程也是挺正确（毕竟工作还是需要完成的），并没有想着一蹴而就，也没有就此放弃，慢慢的积累了一些原理性的东西，等到积累了一定知识后，很平滑的就转过了。在这，以我现在的认知分析一下mcu和linux的差别，以及从mcu转到linux所必须的一些知识。</p><h2 id="1-mcu和linux、os"><a href="#1-mcu和linux、os" class="headerlink" title="1. mcu和linux、os"></a>1. mcu和linux、os</h2><p>&emsp;&emsp;mcu很多是裸机运行的，即不带任何任务调度，本质上是在main函数上轮询；另外也很多是会带有一个小型的实时操作系统，比如freertos，autosar/osek os，他们跟linux、qnx、Android和windows上系统有着本质上的区别，最大的区别就是前者没有文件系统，后者有文件系统，而这个又依赖于mmu以及虚拟内存。曾经我心里一直有个疑问，现在单片机都能有6个核几百M的cpu频率（2019年的英飞凌TC397），为什么不能运行linux系统呢？等到了后面才知道，关键就在于MMU和虚拟内存。（魔改linux当然可以，但是没有虚拟内存，改了但然后呢？）<br>&emsp;&emsp;从mcu到linux，最大的变化就是你一定是在操作系统上干事情了。我也意识到了这一点，所以中间我也有段跟着哈工大李治军老师的网课学了一段时间，里面以linux0.11内核版本作为范本来展开；学了一段时间后，那并不是在学校了，没有这么大块的时间等着你都去吃透（还是懒），所以我又重新思考了操作系统，看了很多资料对于操作系统的定义，想明白了，如果仅仅是想开始在linux做开发，根本没必要懂linux内核是怎么弄出来的。但是对于操作系统的一些基础知识，比如上下文切换之类，我还是想吃透。接着前面提到的<strong>协议栈评估项目</strong>，我又怼着freertos源码一顿啃，那时候自己移植了freertos到tc297上，这款芯片借助硬件CSA可以跟高效的实现上下文切换（CSA也是一个难点），即使移植成功了，但是我还是没有完全理解上下文切换的原理，因为硬件做了很大一部分事情。后面我用stm32+freertos的示例，再配上《Cortex-M3权威指南》（这本书写的真的很有趣了），上面就是纯软件来实现上下切换了，终于看懂了，上下文切换之前就是把一些状态（变量、寄存器的值）都先保存到堆里（ram），然后等切换到该线程时再把寄存器、变量的值给恢复了。通过这次啃freertos+《Cortex-M3权威指南》，我对汇编、寄存器以及malloc都有了一些了解。最后我又看了一本书《操作系统导论》，算是从懂mcu的os，到也了解了linux系统；紧紧围绕操作系统的三大主题元素——<strong>虚拟化、并发和持久性</strong>，在我理解就是分别对应虚拟内存、进程以及文件系统，针对这三点我在前面和后面都又提到。<br>&emsp;&emsp;所以在我看来，os是从mcu到linux的一个过渡桥梁，可以先稍微学习一下mcu实时操作系统的原理，然后再看一些linux操作系统的书，这样转到linux开发时，一些linux原理性的东西不会成为你学习、前进阻碍。原理就是一直没变的，无非就是复杂与否。</p><h2 id="2-代码获取-版本管理–git"><a href="#2-代码获取-版本管理–git" class="headerlink" title="2. 代码获取/版本管理–git"></a>2. 代码获取/版本管理–git</h2><p>&emsp;&emsp;还记以前在学校时，完全不知道有git这么个东西，版本管理全靠复制+文件命名；第一份工作时，接触到svn，第一次提交代码，差点把库上的代码给删了，气的导师让必须先去看看版本管理的知识，其实那会根本无从下手，首先svn不是分布式的，你没法本地操练；公司库当然不允许你瞎弄了，直到有一天了解到了git这个玩意儿，终于可以在本地操练了。当时还有模有样的对<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的git教程</a>来学习，你说有用么，有那么一点用；但是其实根本记不住那么多，真正开始上道还是我通过git操作弄丢了一个文件（本地没删），然后喊来领导，领导一堆操作后，我后面怼着他敲过十多个命令去挨个去分析，等后面又经过了一些<strong>犯罪行为</strong>后，才算是入门了git。所以对git，我建议是以实操为主，并且善于终结和回顾。另外的git的教程真的不建议去一些其他人写的，比如上面<strong>廖雪峰的</strong>，直接去<a href="https://git-scm.com/book/zh/v2">官方网站看官方教程</a>，中文版大大增加阅读兴趣，上面对来龙去脉以及你后面可能遇到的一些操作全都写上了。<br>&emsp;&emsp;上面主要是记录我学习git的过程以及经验。可是为什么一定学git呢？其他的可不可以？先回答后一个，不可以，必须学git。因为：</p><ol><li>很多开源软件都是git仓库，为了学习优秀的代码，使用优秀的轮子，必须会git的一些操作</li><li>git是分布式的，你可以在本地练习；另外就是使用的人多，遇到了一些容易查找</li></ol><p>为什么要学呢？</p><ol><li>其实不是说为什么要学git，而是懂得版本管理，版本管理的好处就不用提了；另外一点，linux开发不像是mcu开发，一个人可以负责很大的一块的，自己的代码自己管理，很多情况是一个模块有很多维护、开发，这是版本管理对协同开发的帮助就特别大了。</li><li>还有就是上面提到第1点了，在linux开发对开源需求一下提高了好几个等级，主流都用，你咋能不用</li></ol><p>&emsp;&emsp;所以在linux开发，通过git获取代码和做版本管理是必须的；打开GitHub和gitlab会发现一个新世界。另外就是建议前期使用命令行而是不会一些带gui的软件，因为带gui界面的软件很容易掩盖一些细节；并且提前使用命令行，到了后面在linux上使用命令行时也会更加熟练了。</p><h2 id="3-编译、链接"><a href="#3-编译、链接" class="headerlink" title="3. 编译、链接"></a>3. 编译、链接</h2><blockquote><p>说一下我的理解：编译本质上就是把你写的代码按照芯片的规则最终转成01的格式，而链接就是将O1放置到哪里去（符号解析、重定位）。<br>&emsp;&emsp;具体编译的原理，我也不是很清楚，因为我没学过和看过相关书籍，但听说这个计算机行业的<strong>明珠</strong>。所以我主要还是想聊一下链接相关的。为什么呢？因为我觉得链接器在软件开发中扮演者一个关键的角色，它使得<strong>分离编译</strong>成为可能。我们不需要将应用程序组织为一个巨大的源文件，而是可以把它分解为更小、更好管理的模块，可以独立的修改和编译这些模块。当我们这些模块中的一个时，只需要简单的重新编译它，并重新链接应用，而不必重新编译其他文件。可以参考我的博客<a href="https://jinbaotang.cn/2021/09/05/link/">什么？你还不懂链接</a>(可能还没写/完，记得催我)。<br>&emsp;&emsp;为什么linux开发一定懂链接呢？先说说单片机开发，就我接触到的单片机开发，大部分是在一个IDE上进行开发，然后大部分所有工程都是源码，配置配置，一键点build/rebuild。有error解决error， 很少人会遇到<code>undefined reference xxxx</code>;然后一小部分人可能会分模块，编译成静态库，然后再一起编译成一个可行文件（hex/elf/bin等）。但是anyway最终都是一起生成可执行文件，静态库本质上也是一堆obj文件的集合，静态库编译的过程不会出现<code>undefined reference xxxx</code>。为什么呢？因为这个错误只有链接时才会出现。所以单片机开发有显式链接的过程（使用静态库时），但是重要性相对来说被弱化了，当然并不是说mcu工程师没必要去了解链接，只不过相对来说，即使不了解也不太会影响你去开发，就我了解的大部分mcu工程师了解的都一般。回到linux开发，相对mcu开发，linux的非内核开发很多都是分模块的，一个小模块完成一部分功能，最终某个应用程序在链接时或者运行将不同模块加载进来；链接时加载跟mcu没啥区别，关键大部分都是运行时（包含加载器加载）才将模块加载进来，所以在linux看到绝大部分都是动态库，如果看了我那个关于链接的博客，估计你会有一定的认识。<br>所以在linux开发，<strong>懂链接</strong>:</p></blockquote><ol><li>无论是在你用的别人的模块还是你的模块给别人用，都是很常见的，如果你对链接不是很清楚，出现了问题，会无从下手；但是懂链接的过程和原理就能快速的解决遇到的问题</li><li>使用动态链接可以让你的代码能更好的解耦，因为动态库本质上跟一个应用程序没啥区别，逼着你必须将相关的东西放到一起，不相关的给剔除出去；进而也会培养你的软件架构设计能力</li><li>能够帮助你理解语言的作用域规则是如何实现的，比如全局变量和局部变量，static意味着什么</li><li>能够帮助你避免一些危险的编程行为，比如比如多个库有相同全局函数（非static），可以无错误的加载运行，但是产生奇怪的现象；<strong>针对这个，即使有很多年linux开发经验的工程师，在有很多动态库时也会百思不得其解</strong>。</li><li>同第2条，理解链接的话，能够帮助你构造大型程序（变强变大的基础）</li></ol><p>综上，懂<strong>链接</strong>真的很重要，除非你只想当个<strong>CRUD程序员</strong>。如果你是个单片机开发工程师，你可以先试着将你的代码尽量的将有不同功能的模块变成静态库的形式，而不是所有都是使用源文件，等后面过渡到动态库上也会平滑不少。</p><h2 id="4-存储器的存储结构"><a href="#4-存储器的存储结构" class="headerlink" title="4. 存储器的存储结构"></a>4. 存储器的存储结构</h2><h2 id="5-虚拟内存"><a href="#5-虚拟内存" class="headerlink" title="5. 虚拟内存"></a>5. 虚拟内存</h2><h2 id="6-进程-线程"><a href="#6-进程-线程" class="headerlink" title="6. 进程/线程"></a>6. 进程/线程</h2><h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mcu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于openssl实现tls+socket的安全通信-2</title>
      <link href="2021/06/06/tls-socket2/"/>
      <url>2021/06/06/tls-socket2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://jinbaotang.cn/2021/05/05/tls-socket/">接基于openssl实现tls+socket的安全通信-1</a>,这篇还要是讲解生成秘钥、证书，并且是使用<em>socket api</em>和<em>openssl api</em>来实现基于tls的安全通信。由于证书链并没有新东西，该篇主要还是以单证书为例，后续可以再整一个基于证书链的通信。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 协议栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tls </tag>
            
            <tag> socket </tag>
            
            <tag> openssl </tag>
            
            <tag> ethernet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码重构-1</title>
      <link href="2021/06/05/refactor-1/"/>
      <url>2021/06/05/refactor-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录第一次稍大规模的重构。这是我第三次写DoIP, 第1.5次写UDS，第一次写CANTP、router。</p></blockquote><h1 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h1><p>&emsp;&emsp;在<a href="https://jinbaotang.cn/2021/04/11/why-write/">为什么要写博客</a>里提到了，由于个人关系，换工作了。新工作的首要任务就是优化已有代码，在花了一段时间阅读代码整体框架后，发现已有的代码框架层次不太清楚，如果要优化的话，总感觉是在做错误的事。进而跟领导提出重构的想法，领导也赞同。就开始<strong>浴火重生</strong>之路了，跟之前的工作背景相关，重构了就想做成可迭代、跨平台的，所以在过去的一两个月不是就是在设计就是在验证了，这段时间，无论是在车上、洗澡还是睡觉前都是在脑子里跑流程，也真正的体会到了<em>面向对象</em>（虽然我是用c）带来的好处了。也终于一点点的体会到了，原来之前老虞（<strong>技术偶像之一</strong>）看着规范写代码也没有这么的神奇，<em>注：离老虞的水平当然还有很远的路，梦想还是要有的嘛，莫欺少年穷。</em>—记于2021.06.05 <img src="/medias/refactor-1/dream.jpeg"></p><h1 id="二、-关于面向对象"><a href="#二、-关于面向对象" class="headerlink" title="二、 关于面向对象"></a>二、 关于面向对象</h1><h2 id="1-关于我自己"><a href="#1-关于我自己" class="headerlink" title="1. 关于我自己"></a>1. 关于我自己</h2><p>&emsp;&emsp;自己目前是主<strong>c</strong>，暂时略懂一点c++，有一段时间一直挺想进一步学c++的，虽然自己工作之余也写过一个webserver的小程序，但是暂时受限工作内容，也谈不上能够熟练使用c++了。之前想学c++的原因也比较单纯，很多人都说c是面向过程的语言，c++是面向对象的语言，而面向对象是人正常的思维方式。所以觉得必须得学会c++，无论是为了做知识储备，还是为了学会面向对象的思维方式。可是后面学了一段时间的c++后，其实还是不知道面向对象和面向对象有什么区别，直到有一天看<strong>vsomeip</strong>的源码（并不是第一次看），突然就<strong>顿悟了</strong>，很神奇的一件事。所以我相信，<em>无论任何事，即使遇到了很大的困难，我都相信这些困难和问题会在某一个时间点解决</em>，这是在困境中，一直激励着自己的话。</p><h2 id="2-什么是面向对象"><a href="#2-什么是面向对象" class="headerlink" title="2. 什么是面向对象"></a>2. 什么是面向对象</h2><p>&emsp;&emsp;关于面向对象和面向过程，网上有铺天盖地的解释，比如：<a href="https://www.zhihu.com/question/27468564/answer/226691160">如何通俗易懂地举例说明「面向对象」和「面向过程」有什么区别？</a>。但是我还是想谈谈自己的理解。我觉上面链接说的我挺认可的一句话就是：<strong>首先是命名冲突，英文单词也就那么几个，可能写着写着取名时就没合适的短词用了，为了避免冲突，只能把函数名取得越来越长。</strong>当然这不是面向对象就能解决的，因为比如C语言，由于没有命名空间的概念，有些函数不想弄成<strong>static</strong>，以为有其他的文件可能会用到这个函数，这就到导致了，你的整个工程/动态库都只能有这个一个函数名了；还有就是类型了，用c/c++难免会自己构造一些自己的类型，还是像函数一样，由于了没有像<strong>命名空间</strong>这样作用域的限制，在一个程序里如果有同样的命名，即使不会带来编译、链接出错，也会给代码可读性带来灾难。但是另一方面，如果有了面向对象的思想后，就会自动的对一些数据结构打包（struct）在一起，这就像一个类了，再添加几个函数指针就像是<em>弱化版虚函数</em>，打包的在一起后，也会不自觉地对一些变量和函数添加<strong>static</strong>来修饰了，这样限制了作用域，提高了代码可读性；也减少了上面提到的命名冲突。当然对于稍大规模，又有相近概念的在一个程序里是，上面问题依然会存在，比如我曾经写过的<strong>someip</strong>代码，即使我已经划分了好几个模块，但是由于上面相近概念的太多了，也有点命名词穷（可能还是太菜），去看<strong>vsomeip</strong>代码（c++）时，就发现里面很多都是一样的名字，但是由于作用域的问题，既不会带来冲突，也不会给可读性带来问题。</p><h2 id="3-我理解的面向对象"><a href="#3-我理解的面向对象" class="headerlink" title="3. 我理解的面向对象"></a>3. 我理解的面向对象</h2><p>&emsp;&emsp;上面分析了这么多，介绍了面向对象带来的好处，那到底什么是面向对象呢？有什么区别呢？<a href="https://www.zhihu.com/question/27468564/answer/101951302">编程发展史谈面向对象</a>这位答主讲的我觉得特别适合没咋写过代码，又有一定个概念的人；<a href="https://www.zhihu.com/question/27468564/answer/757537214">力扣官方解答面向过程和面向对象</a>的，早我写了大概2万行两场代码后，看到的，觉得就特别适合一直主要用面向过程写c的人，图文并茂的将面向过程相对面向过程的好处讲解的很清楚。但是我觉得都不够抽象，我自己有一天吃芒果，结合自己一开始提到的<strong>顿悟</strong>，感觉可以更形象的说明<em>面向过程</em>和<em>面向对象</em>的区别：<br>如果我要吃一个芒果，面向过程就是：</p><ol><li>找到芒果</li><li>洗芒果</li><li>给芒果扒皮/切盘</li><li>吃芒果</li><li>消化芒果</li><li>我们就完成了吃掉芒果的任务<br>上面就跟流水线一下，过程化，只有做完了上一步才能下一步，不做完上一步，都不知道下一步要干啥。可能会说，我知道啊，我知道我吃一个芒果，要找、洗、切、吃、消化，对啊，这就是面向对象啊，符合人的思维方式。<br>还是以芒果为例，那面向对象：</li><li>首先就要有一个最终对象，芒果</li><li>为了吃芒果，我需要用手洗，用手扒皮，用刀切，用嘴吃，自己消化，所以还需要<em>手对象</em>，<em>刀对象</em>，<em>嘴对象</em>，<em>消化对象–胃</em>。</li><li>准备完这些对象，设置对应属性，用什么水，什么刀，谁的手扒皮，谁的嘴负责最后的吃，芒果是由哪些器官消化。 </li><li>这些都用弄好，就分别一次使用对应的对选完成对应的过程，这就完成了对应吃芒果这个事了。<br>转成代码就是：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//面向过程 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">mango_s</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//....</span><span class="token punctuation">&#125;</span><span class="token class-name">mango_t</span><span class="token punctuation">;</span><span class="token class-name">mango_t</span> <span class="token operator">*</span><span class="token function">find_mango</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wash_mango</span><span class="token punctuation">(</span><span class="token class-name">mango_t</span> <span class="token operator">*</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">peel_mango</span><span class="token punctuation">(</span><span class="token class-name">mango_t</span> <span class="token operator">*</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cut_mango</span><span class="token punctuation">(</span><span class="token class-name">mango_t</span> <span class="token operator">*</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bite_mango</span><span class="token punctuation">(</span><span class="token class-name">mango_t</span> <span class="token operator">*</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">digest_mango</span><span class="token punctuation">(</span><span class="token class-name">mango_t</span> <span class="token operator">*</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">mango_t</span> <span class="token operator">*</span>mango<span class="token punctuation">;</span>    mango <span class="token operator">=</span> <span class="token function">find_mango</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wash_mango</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cut_mango</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bite_mango</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">digest_mango</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//面向对象</span><span class="token keyword">class</span> <span class="token class-name">Hand</span> <span class="token punctuation">&#123;</span> <span class="token comment">//... &#125;;</span><span class="token keyword">class</span> <span class="token class-name">Knife</span> <span class="token punctuation">&#123;</span> <span class="token comment">//... &#125;;</span><span class="token keyword">class</span> <span class="token class-name">Mouth</span> <span class="token punctuation">&#123;</span> <span class="token comment">//... &#125;;</span><span class="token keyword">class</span> <span class="token class-name">Stomach</span> <span class="token punctuation">&#123;</span> <span class="token comment">//... &#125;;</span><span class="token keyword">class</span> <span class="token class-name">Mango</span> <span class="token punctuation">&#123;</span> <span class="token comment">//... &#125;;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Hand hand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Hand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Knife knife <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Knife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mouth mouth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Mouth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stomach stomach <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Stomach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mango mango <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Mango</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hand<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    hand<span class="token punctuation">.</span><span class="token function">wash</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    hand<span class="token punctuation">.</span><span class="token function">peel</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    knife<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    mouth<span class="token punctuation">.</span><span class="token function">bite</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span>    stomach<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>mango<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;不知道看完上述示例后，有没有更清楚。从最后的处理流程来看，都是需要顺序调用的，不同的是一开始的思考过程，面向过程更多是做完这一步，才会去想我下一步要用什么东西来干什么，最终一步一步完成整个操作。面向对象呢，一开始就想好完成这个任务，我要用什么工具来做什么，给每个工具以特定的功能，比如手可以用来<strong>找、洗、切</strong>，有了对象并且有了操作后，就可以按照流程完后整个任务了。<br>&emsp;&emsp;看完上述代码，可能很多人会说，我觉得没啥多大区别啊。是的，上面这个任务的确没啥多大区别，甚至用面向过程还更简单。但是，你可以参考这个<a href="https://www.zhihu.com/question/27468564/answer/757537214">力扣官方解答面向过程和面向对象</a>，就清楚了。或者又会说，我用c也能完成c++那样的啊，对的，完全没问题哦，linux内核就是这么做的呢。但是你去看这些代码，别说些写出那样的宏了，就是无障碍看懂就是大神了，更别说c++还有虚函数、重载这样秒杀使用函数指针来实现<strong>类虚函数的做法</strong>。另外，更为关键的是，使用c++，<strong>它可以用语法规则上来尽量保证你按照面向对象规范来实现</strong>，比如我可以在<em>类</em>里面定义<em>私有成员变量</em>，外部想要访问这些变量就必须通过接口来实现，这样你就不得不思考如何先定义对应的操作；若你是用c的，就不一定会这样做，大概率你会直接通过结构体变量直接就访问了，因为给每个变量都写个get和set。。。。，着实太繁琐了。<strong>不过</strong>，使用c也能实现类似于<em>私有成员</em>，这样的做法一个是为了不让外部看到里面的成员，另一个是可以减少模块间的耦合度。比如下述操作（我也是看别人这么实现，当时觉得好神奇，着实惊艳）：</p><h2 id="4-c语言实现私有成员"><a href="#4-c语言实现私有成员" class="headerlink" title="4. c语言实现私有成员"></a>4. c语言实现私有成员</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* test.h */</span><span class="token keyword">struct</span> <span class="token class-name">test_s</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* public member */</span>    <span class="token keyword">int</span> test1<span class="token punctuation">;</span>    <span class="token keyword">int</span> test2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test_handle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">test_s</span> <span class="token operator">*</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">test_s</span> <span class="token operator">*</span><span class="token function">alloc_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">free_test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">test_s</span> <span class="token operator">*</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* test.c */</span><span class="token keyword">struct</span> <span class="token class-name">internal_test_s</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* public member */</span>    <span class="token keyword">int</span> test_value1<span class="token punctuation">;</span>    <span class="token keyword">int</span> test_value2<span class="token punctuation">;</span>    <span class="token comment">/* private member */</span>    <span class="token keyword">int</span> test_value3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test_handle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">test_t</span> <span class="token operator">*</span>test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">internal_test_s</span> <span class="token operator">*</span>internal_test <span class="token operator">=</span> test<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> internal_test<span class="token operator">-></span>test_value3 <span class="token operator">+</span> test<span class="token operator">-></span>test_value1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">test_s</span> <span class="token operator">*</span><span class="token function">alloc_test</span><span class="token punctuation">(</span>    <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">internal_test_s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">free_test</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">test_s</span> <span class="token operator">*</span>test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;上述<code>test_value3</code>就是一个私有变量了，在test.c文件内是可用的，但是文件外就不可见了，其实说白了，还是<strong>指针永远的神</strong>。拓展一下，如果<code>test_value3</code>是一个自定义类型，所以在test.c里面就不得不引入自定义的头文件（eg: custom_demo.h），但是针对<code>test_value3</code>，只有test.c文件用的着，完全没必要将其定义在头文件上了；<strong>否则</strong>，如果其他文件(比如模块C )，需要包含test.h，那就不得不将custom_demo.h也包含进去，这样明显会增加代码的耦合度；但是若使用私有成员，明显将<code>custom demo</code>模块和<code>C</code>模块进行解耦了。将随着自己c的代码量直线上升和慢慢更多接触c++，对它俩的区别会越来越有体会，也会更加的注意代码结构、耦合度，比如私有成员，我已经应用到好多个模块了，这真的是一个特别有成就感的事情。对我来说，技术成就感一直是鞭策我学习的最大动力。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> refactor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket-can基础知识和使用</title>
      <link href="2021/05/07/socket-can/"/>
      <url>2021/05/07/socket-can/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第一次接触socket can, 学习和使用的过程，也记录下来，加深印象。</p></blockquote><h1 id="一、-原理"><a href="#一、-原理" class="headerlink" title="一、 原理"></a>一、 原理</h1><p>&emsp;&emsp;虽然作为程序员最希望看到的技术文章就是直接上来甩出demo code，最好直接搬到对应的环境直接执行脚本就能跑起来，再不济也是有cmake，Makefile啥的。不管三七二十一，先跑起来再说，然后再深入学习，效率是最高的。但是这篇文章对我来说是个学习记录，还是得从原理上开始记录，后面整理时再调整顺序咯。</p><h2 id="1-can总线原理"><a href="#1-can总线原理" class="headerlink" title="1. can总线原理"></a>1. can总线原理</h2><p>&emsp;&emsp;socket can涉及到CAN总线协议、套接字、Linux网络设备驱动等。</p>]]></content>
      
      
      <categories>
          
          <category> 协议栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> can </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于openssl实现tls+socket的安全通信-1</title>
      <link href="2021/05/05/tls-socket/"/>
      <url>2021/05/05/tls-socket/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录基于openssl来实现tls的安全通信，借助BSD socket接口来实现。也做tls简单的科普，看这篇文章，默认读者已经会socket编程了。</p></blockquote><blockquote><p>周五朋友圈突然看到前东家，也写了一篇关于tls的简单科普，突然想起我也有一个半成品文章关于tls的。这段时间由于工作繁忙，不是在refactor就是在baidu/google，不过还是蛮有意思的，等重构完成，想好好的总结一下,在<a href="https://jinbaotang.cn/2021/06/05/tls-socket/">代码重构-1</a>会这次重构带来的一些个人的进步，以及还待改进的地方。</p></blockquote><h1 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h1><p>&emsp;&emsp;由于业务需要，得使用tls来完成安全通信，需求也是借助开源的openssl来实现。整了好几天，才实现openssl+socket来进行安全通信。目前是证书都已经生成，但是server获取client证书出错。</p><p>&emsp;&emsp;其中在生成证书的过程中，也走了不少弯路，网上没有找到一篇介绍关于加密通信、证书原理以及使用openssl讲的比较全的文章，特别是基于C/C++ socket的就更少了，所以就萌生了自己在尝试的过程中，记录一下自己的解决轨迹。</p><h1 id="二、关于tls"><a href="#二、关于tls" class="headerlink" title="二、关于tls"></a>二、关于tls</h1><h2 id="1-tls的介绍"><a href="#1-tls的介绍" class="headerlink" title="1. tls的介绍"></a>1. tls的介绍</h2><p>&emsp;&emsp;tls是transport layer security的缩写，顾名思义就是安全传输层协议。关于tls的介绍网上有特别多了，开头也提到了，前东家发表一篇关于<a href="https://mp.weixin.qq.com/s/AnqZkYdk8XQZVT4MRidIEA">tls的文章</a>，觉得是少有的这么短篇幅介绍这么详细、生动的了。关于tls的作用主要是在解决网络安全的几个问题：</p><ol><li>保密(message privacy)，保密通过加密encryption实现，所有信息都加密传输，第三方无法嗅探；</li><li>完整性(message integrity)，通过MAC校验机制，一旦被篡改，通信双方会立刻发现；</li><li>认证(mutual authentication)，双方认证,双方都可以配备证书，防止身份被冒充；<br>对我们写的代码的来说，其实关于这些协议具体是怎么实现的，<em>暂时</em>我们并不是很关心，因为已经很多实现好的库可以使用，比如这篇文章要介绍的<a href="https://www.openssl.org/">openssl</a>。甚至对于https以上的开发者，都不关心tls的使用。但是对于需要使用基于tcpip接口（<em>eg：BSD socket接口</em>），还需要关心一些tls库的使用的。</li></ol><p>&emsp;&emsp;虽然我们可以暂时不关心tls协议的实现，但是对于tls关于密码学部分，觉得了解了原理后，能够正确、更好的使用tls库的接口，前面提到<a href="https://mp.weixin.qq.com/s/AnqZkYdk8XQZVT4MRidIEA">tls的文章</a>对于简单的原理来说，讲的真的蛮不错了，但是对于证书那一块，我觉得可以再展开一下。所以借花献佛了，在上面的文章基础，着重对证书那部分展开讲</p><h2 id="2-tls加密技术"><a href="#2-tls加密技术" class="headerlink" title="2. tls加密技术"></a>2. tls加密技术</h2><p>&emsp;&emsp;tls依赖于两种加密技术：</p><ol><li>对称加密（symmetric encryption）</li><li>非对称加密（asymmetric encryption）</li></ol><h3 id="1-字母缩写"><a href="#1-字母缩写" class="headerlink" title="1). 字母缩写"></a>1). 字母缩写</h3><blockquote><p>K: Key<br>E: Encrypt<br>D: Derypt<br>M: Message<br>C: Certificate</p></blockquote><h3 id="2-对称加密"><a href="#2-对称加密" class="headerlink" title="2). 对称加密"></a>2). 对称加密</h3><p>&emsp;&emsp;关于对称加密是最好理解的，在小唐和小潘手里都有一份秘钥K（比如所有字都是按照一点规则转成数字+1），小唐给小潘发悄悄话之前会用秘钥K加密悄悄话，小潘接收到小唐的悄悄话，小潘是知道规则，先减1，再转成数字，诶，发现是小唐对小潘的情话，那出于双方的交流需要，当然需要响应了。所以小潘也按照之前的方法加密了一下，然后发给了小唐。即：</p><pre class="line-numbers language-none"><code class="language-none">小唐: C &#x3D; E(M, k)小潘: M &#x3D; D(C, K)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-非对称加密"><a href="#3-非对称加密" class="headerlink" title="3). 非对称加密"></a>3). 非对称加密</h3><p>&emsp;&emsp;上面提到小唐和小潘都有一套一样的加密规则，非对称加密呢，就是两个人手上的加密规则是不一样的，比如小唐的是K1(数字+1), 小潘的是K2(数字乘以3)。虽然规则不一样，但是都能互相解密对方的信息，拿到对方真正想要表示的信息。即：</p><pre class="line-numbers language-none"><code class="language-none">小唐: C &#x3D; E(M, k)小潘: M &#x3D; D(C, K)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-数字签名和CA"><a href="#4-数字签名和CA" class="headerlink" title="4). 数字签名和CA"></a>4). 数字签名和CA</h3><p>&emsp;&emsp;在前面提到了秘钥K，消息发送给对方之前会进行加密，然后接收方收到消息后解密。但是想想秘钥怎么发送过去呢，明文发送过去不就被人偷听、篡改，比如<a href="https://mp.weixin.qq.com/s/AnqZkYdk8XQZVT4MRidIEA">tls的文章</a>提到的梁山伯与祝英台。</p><p>为了成全有情人，大佬发明了**数字签名（digital signature)**技术。数字签名的做法是：</p><ol><li>小唐把自己的公钥和ID（比如他身份证号或者生辰八字）一起组成一个<strong>证书签名请求（certificate signing request，CSR）</strong>，</li><li>小唐把<strong>CSR</strong>发给一个德高望重、大家都认可的人<strong>证书管理中心（ certificate authority，CA）</strong>，比如月老，</li><li>月老用自己的私钥加密小唐的<strong>CSR</strong>，得到的密文被称为<strong>数字签名（digital signature）</strong>，</li><li>月老把 <strong>数字签名</strong> 和 <strong>CSR</strong> 的明文合在一起称为<strong>月老签署的身份证（CA signed certificate，CRT</strong>），发给小唐，</li></ol><pre class="line-numbers language-none"><code class="language-none">小唐: CSR &#x3D; 小唐公钥+小唐身份证     数字签名 &#x3D; E(CSR, 月老的私钥)     CRT &#x3D; CSR + 数字签名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;每当其他人（比如小潘）找小唐聊天(eg:htts)的时候，小唐出示自己的月老签署的身份证<strong>（CRT.CSR)<strong>。拿到这个身份证的人，只要他是相信月老的(在自己机器上安装了月老的身份证</strong>CRT</strong>)，就可以:</p><ol><li>从月老的身份证中的月老的<strong>CSR</strong>里提取月老的公钥；</li><li>用月老的公钥解密小唐的身份证中月老的<strong>数字签名</strong>，得到一个小唐的**CSR’**；</li><li>如果这个<strong>CSR’<strong>和小唐身份证中的</strong>CSR</strong>明文一致，则说明<strong>”这个小唐的身份证是月老确认过并且签名的”</strong>。</li><li>小潘只要相信月老，就相信这个身份证，就相信小唐</li></ol><pre class="line-numbers language-none"><code class="language-none">小潘：月老的公钥 &#x3D; 月老的CRT.CSR.月老的公钥     CSR&#39; &#x3D; D(小唐的CRT.数字签名, 月老的公钥)     if CSR&#39; &#x3D;&#x3D;小唐的CRT.CSR then OK     I belive 小唐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;由此过程可以看出来：随便谁都可以当<strong>CA（月老)<strong>——只要愿意公开自己的公钥，即可用自己的私钥去加密别人的认证。那我们要是信错了</strong>CA</strong>，被他摆一道怎么办，比如祝母也想当<strong>CA* *<strong>？答案是：</strong>没办法</strong>。我们必须选择信任社会，要相信如果<strong>CA</strong>说谎，万一被识破，就没有人再相信他了，所谓的<strong>CA</strong>即失去公信力。现实中，很多操作系统（Windows、Mac OS X）和浏览器（Chrome、 Firefox、IE）会内置一些靠谱的 CA 的身份证。但是有没有<strong>CA</strong>冒天下之大不韪说谎呢？从知乎上看到了<a href="https://www.zhihu.com/question/49291684/answer/123313224">CNNIC</a>的机构好像就是一个我们信错的那个人。</p><p>&emsp;&emsp;这个过程可以用下图描述：<img src="/medias/tls-socket/tang_pan.png" alt="小唐和小潘对话"></p><p>&emsp;&emsp;当然，这只是一个示意图，因为大部分聊天都需要双输入账号，上面也加上了账号和密码，但是并不准确的表示协议的握手和通信过程。 图中省略了一些重要的细节，比如握手之后的实际通信都是采用对称加密技术来实现的，因为保证双方获取的公钥是没有被篡改和获取的，使用对称加密能够提到加解密速度。因为TLS模式下所有传输的数据都是加密的，大家会关注加密和解密的性能。客 观的说，非对称加密技术的加密和解密比较慢，相对来说，对称加密技术的加密 解密过程更快。所以实际的连接和握手过程中，通信双方会协商一个对称加密秘 钥，之后的数据通信过程中的加密都是利用对称加密技术来实现的。</p><p>&emsp;&emsp;具体的做法是：握手的时候，双方各自生成一个随机数，并且以非对称加密的方式 分享给对方。然后每一方都把自己的随机数和对方的随机数拼起来，就是接下来 通信时候使用的对称加密方法的秘钥了。</p><h3 id="5-信任链"><a href="#5-信任链" class="headerlink" title="5). 信任链"></a>5). 信任链</h3><p>&emsp;&emsp;月老如果担心没有人信任自己是个好<strong>CA</strong>（就像没人信CNNIC一样），可以找一个大家都信的<strong>CA</strong>（CNNIC改成了DigiCert签发的证书），比如民政局，用民政局的私钥在月老的身份证上签名：</p><pre class="line-numbers language-none"><code class="language-none">月老：CSR &#x3D; 月老的公钥+月老身份证     数字签名 &#x3D; E(CSR, 民政局的私钥)     CRT &#x3D; CSR + 数字签名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;如果浏览器或者操作系统里安装了民政局的公钥则可以验证<strong>“月老的身份证是民政局确认并且签名过的”</strong>，信月老就不再是迷信了，就算是官方认证过的了。</p><p>&emsp;&emsp;这样，月老在签署小唐的身份证的时候，可以在小唐身份证后面附上自己的身份证。这样小唐的身份证就有<strong>“两页”</strong>了。</p><p>&emsp;&emsp;当小潘和小唐通信的时候：</p><ol><li>小潘会先要求小唐出示自己的身份证；</li><li>小潘虽然不信任月老，但是信任民政局，所以小潘可以用民政局的身份证里的月老的公钥来验证小唐身份证附带的月老的身份证，于是就可以信任月老了；</li><li>小潘用月老身份证里的公钥验证小唐的身份证。<br>要是怕 小潘连自己也也不信任，民政局可以再找一个 小潘信任的人来签名确认自己的身份证。这个过程可以不断递推，从而形成了一条**信任链（trust of chain)**。</li></ol><h3 id="6-根身份证和自签名"><a href="#6-根身份证和自签名" class="headerlink" title="6).根身份证和自签名"></a>6).根身份证和自签名</h3><p>&emsp;&emsp;信任链总会有个顶端，被称为根身份证（root CA）。那么根身份证是谁签名的呢？答案是：<strong>自己签名</strong>。实际上，我们每个人都可以自己签名认证自己的身份证，得到<strong>自签名的身份证（self-signed certificate）</strong>。具体过程是：</p><ol><li>生成一对秘钥：公钥 K2 和私钥 K1，</li><li>创建自己的 <strong>CSR</strong>，</li><li>用自己的秘钥加密<strong>CSR</strong>得到<strong>数字签名</strong>，然后把<strong>CSR</strong>明文和<strong>数字签名</strong>一起发布。</li></ol><p>任何人只要信任我们自签名的身份证 <strong>CRT</strong>，也就可以用 <strong>CRT.CSR.K2</strong>作为公钥加密要传递给我们的文本。我们可以用自己的私钥K1来解密文本。</p><p>如果民政局就是根CA了，那么上述各位的身份证的信任链如下：</p><pre class="line-numbers language-none"><code class="language-none">小唐：CSR &#x3D; 小唐公钥+小唐域名     数字签名 &#x3D; E(CSR, 月老的私钥)     CRT &#x3D; CSR + 数字签名月老：CSR &#x3D; 月老的公钥+月老域名     数字签名 &#x3D; E(月老的CSR, 民政局的私钥)     CRT &#x3D; 月老的CSR + 数字签名民政局：CSR &#x3D; 民政局的公钥+民政局的域名      数字签名 &#x3D; E(民政局的CSR, 民政局自己的私钥)      CRT &#x3D; 民政局的CSR + 数字签名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-双方认证"><a href="#7-双方认证" class="headerlink" title="7). 双方认证"></a>7). 双方认证</h3><p>&emsp;&emsp;上述例子解释了通信的一方如何验证另一方的身份。比如车载协议DoIP-2019即是要求server验证client即可，以提高通信效率。这种情况的还有一个常见应用是： 我们通过浏览器访问银行的网页。这里的关键是，我们要能验证银行的身份证， 然后才敢于在网页里输入账号和密码。浏览器验证银行的身份证的过程如下：</p><ol><li>在浏览器和银行的HTTPS服务建立安全连接的过程中，银行的HTTPS服务会把 它的身份证发给浏览器showcerts；</li><li>浏览器使用内置的CA的身份证来验证银行的身份证。</li></ol><p>浏览器验证了银行的HTTPS服务的身份之后，就轮到银行验证浏览器的用户的身份了：</p><ol><li>浏览器展示银行HTTPS服务发来的登陆页面；</li><li>用户在这个页面里输入账号和密码，银行的HTTPS服务由此验证用户的身份。<br>在这个过程中，银行HTTPS服务器的身份是通过TLS身份证来验证的。而我们（用户）的身份是通过我们输入的账号和密码来验证的。</li></ol><p>&emsp;&emsp;有时通信的双方都是程序（而不是人）。此时，让一方输入账号和密码，不如让 双方都通过TLS身份证来互相验证方便。尤其是在很多分布式系统里，有多种类型的程序互相通信，而不只是两方通信。<br>&emsp;&emsp;比如在Kubernetes机群里，不光操作机群的客户端程序kubectl要能验证 Kubernetes master node（具体的说是apiserver的身份，才能放心地把包括 敏感信息（比如数据库密码）的计算作业提交给apiserver。类似的，apiserver也要能验证kubectl的身份，以确认提交作业的是公司的合法雇员，而不是外贼sign。<br>&emsp;&emsp;为此，通信各方都需要有各自的身份证。一个公司可以自签名一个CA身份证，并且用它来给每个雇员以及每个程序签署身份证。这样，只要每台电脑上都预先安装好公司自己的CA身份证，就可以用这个身份证验证每个雇员和程序的身份了。这是目前很多公司的常用做法。</p><h2 id="3-tls协议实现"><a href="#3-tls协议实现" class="headerlink" title="3. tls协议实现"></a>3. tls协议实现</h2><p>&emsp;&emsp;由于tls在安全方面的重要作用，应用特别广泛，相对来说就会有不少开源实现，比较知名就有openssl和mbed-tls，分别应用在通用操作系统和基于mcu的嵌入式系统了。这里要介绍的即是在通用操作系统（linux），对openssl的应用了。</p><h1 id="三、关于openssl"><a href="#三、关于openssl" class="headerlink" title="三、关于openssl"></a>三、关于openssl</h1><p>&emsp;&emsp;上面介绍了tls的基本原理，对我们程序员来说最重要的就是coding了，那我们就看看如何在linux上使用openssl来实现基于tcpip的安全通信。</p><h2 id="1-openssl安装和使用"><a href="#1-openssl安装和使用" class="headerlink" title="1. openssl安装和使用"></a>1. openssl安装和使用</h2><p>&emsp;&emsp;在安装是和使用之前，先简单的介绍一下openssl，openssl是一个安全套接字层密码库，囊括主要的密码算法、常用密钥、证书封装管理功能及实现ssl协议。openssl整个软件包大概可以分成三个主要的功能部分：SSL协议库libssl、应用程序命令工具以及密码算法库libcrypto。<br>&emsp;&emsp;安装之前，直接先<code>openssl version -a</code>看下是否有安装openssl，我日常使用的是ubuntu16和ubuntu18，如下图是已经安装好的。<img src="/medias/tls-socket/openssl_v.png" alt="openssl-version">如果没有，建议直接去<a href="https://www.openssl.org/source/">openssl的官网</a>或者<a href="https://github.com/openssl/openssl">openssl git仓库</a>下载安装，本来还想写下要如何下载、编译安装，后面觉得实在多次一举了。个人建议还是直接在官网或者git仓库查看教程了，git仓库上直接有各个平台的安装教程]了。<img src="/medias/tls-socket/install_course.png" alt="各个平台的安装教程"></p><p><em>注：ubuntu直接<code>sudo apt-get install openssl</code>和<code>sudo apt-get insall libssl-dev</code>即可</em>，其他平台估计也有直接安装的。</p><p>&emsp;&emsp;关于openssl在linux的一些命令并不打算自己去写，可以参考这篇文<a href="https://segmentfault.com/a/1190000014963014">openssl的介绍和使用</a>,后面会降到如何在linux上会使用openssl来生成秘钥和证书，以及证书管理工具。文章<a href="https://segmentfault.com/a/1190000014963014">openssl的介绍和使用</a>介绍命令并不是特别全，但是给出了一个命令具体的含义，很多教程上来就直接生成秘钥证书，像我这种之前从来没有接触过这块东西的人，还是挺懵逼的，但是看到了这这篇文章后，对着其他教程，跌跌撞撞还是跑通了一个demo。上面虽然写的不全，但是也写了可以通过<code>-help</code>来获取更详细的命令参数含义，比如openssl genrsa -help就会将所有的参数显示出来。<img src="/medias/tls-socket/openssl_genrsa_help.png" alt="openssl genrsa -help">。后面再搜到不同的教程，<code>-help</code>一下，从此不再迷茫。</p><p>&emsp;&emsp;对于openssl接口的一些文章，我主要参考了这篇<a href="https://www.cnblogs.com/Yogile/p/12917402.html">基于OpenSSL的简单C/S通信C程序设计使用函数文档</a>和<a href="https://www.openssl.org/docs/man1.0.2/man3/">官方英文文档</a>，当然有时候嫌烦，就直接baidu/google对应函数了。</p><h2 id="2-openssl实操"><a href="#2-openssl实操" class="headerlink" title="2. openssl实操"></a>2. openssl实操</h2><p>&emsp;&emsp;上一小节，除了安装、编译适合在实操之前操作，其他部分更多是在实操过程中去搜索的。当然由于我已经有过相关的实操经验了，对于想使用openssl来完成安全通信的小伙伴，记住上述相关介绍和链接，再结合后面的示例，应该能够达到事半功倍的效果。在tls握手过程之前，需要tcp三次握手后建立tcp连接，而后才开始tls1的握手。tls的握手过程如下图所示，图随便找的，侵删：<img src="/medias/tls-socket/tls_handshake.png" alt="tls handshake"><br>虚线部分为可选的，可选的原因是因为，一般都是server验证client的单向验证，比如前面的提到的DoIP-2019；但是如果需要双向认证，即是client验证server，前面也有提到应用场景，具体步骤如下：</p><ul><li><p>步骤 1. ClientHello – 客户端发送所支持的 SSL/TLS 最高协议版本号和所支持的加密算法集合及压缩方法集合等信息给服务器端。</p></li><li><p>步骤 2. ServerHello – 服务器端收到客户端信息后，选定双方都能够支持的 SSL/TLS 协议版本和加密方法及压缩方法，返回给客户端。</p></li><li><p>（可选）步骤 3. SendCertificate – 服务器端发送服务端证书给客户端。</p></li><li><p>（可选）步骤 4. RequestCertificate – 如果选择双向验证，服务器端向客户端请求客户端证书。</p></li><li><p>步骤 5. ServerHelloDone – 服务器端通知客户端初始协商结束。</p></li><li><p>（可选）步骤 6. ResponseCertificate – 如果选择双向验证，客户端向服务器端发送客户端证书。</p></li><li><p>步骤 7. ClientKeyExchange – 客户端使用服务器端的公钥，对客户端公钥和密钥种子进行加密，再发送给服务器端。</p></li><li><p>（可选）步骤 8. CertificateVerify – 如果选择双向验证，客户端用本地私钥生成数字签名，并发送给服务器端，让其通过收到的客户端公钥进行身份验证。</p></li><li><p>步骤 9. CreateSecretKey – 通讯双方基于密钥种子等信息生成通讯密钥。</p></li><li><p>步骤 10. ChangeCipherSpec – 客户端通知服务器端已将通讯方式切换到加密模式。</p></li><li><p>步骤 11. Finished – 客户端做好加密通讯的准备。</p></li><li><p>步骤 12. ChangeCipherSpec – 服务器端通知客户端已将通讯方式切换到加密模式。</p></li><li><p>步骤 13. Finished – 服务器做好加密通讯的准备。</p></li><li><p>步骤 14. Encrypted/DecryptedData – 双方使用客户端密钥，通过对称加密算法对通讯内容进行加密，进行数据通信。</p></li><li><p>步骤 15. ClosedConnection – 通讯结束后，任何一方发出断开 SSL 连接的消息。</p></li></ul><p>SSL握手主要完成以下任务：</p><ol><li> 协商使用的加密套件。加密套件中包括一组加密参数，这些参数指定了加密算法和密钥的长度等信息。</li><li>验证对方的身份，此操作是可选的。</li><li>确定使用的加密算法。</li><li>SSL握手过程采用非对称加密方法传递数据，由此来建立一个安全的SSL会话。SSL握手完成后，通信双方将采用对称加密方法传递实际的应用数据。</li></ol><p>最简单、应用广泛的应用场景即是server验证client了.</p><h3 id="1-秘钥、证书等生成"><a href="#1-秘钥、证书等生成" class="headerlink" title="1). 秘钥、证书等生成"></a>1). 秘钥、证书等生成</h3><p><strong>暂时没有时间展开细讲，可以参考<a href="https://github.com/jinbaotang/tls_test">我的git仓库–tls_test</a></strong>,这块东西涉及的还是蛮多，感觉可以另开一个话题了，如果不在这篇文章继续，就可以参考链接<a href="https://jinbaotang.cn/2021/06/06/tls-socket2/">基于openssl实现tls+socket的安全通信-2</a>,</p>]]></content>
      
      
      <categories>
          
          <category> 协议栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tls </tag>
            
            <tag> socket </tag>
            
            <tag> openssl </tag>
            
            <tag> ethernet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LwIP使用select，close socket资源释放不完全问题</title>
      <link href="2021/04/12/lwip-close-socket-select/"/>
      <url>2021/04/12/lwip-close-socket-select/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章本应该在4月就写好的，但是博客评论系统一直没有搭建好，走了很多弯路，现在好了，delay这么久，终于要要补过来了。</p></blockquote><blockquote><p>该文章完全原创，除通用、广泛的知识点外，均为个人总结，如需转载还望备注出处，同时如有错误还请指出，虚心接受。</p></blockquote><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-题外话"><a href="#1-题外话" class="headerlink" title="1. 题外话"></a>1. 题外话</h2><p>&emsp;&emsp;以这篇文章为第一篇技术文章，一是萌生写博客的契机是换工作，另外就是这篇文章是我在怿星解决的最后一个bug。</p><p><img src="/medias/lwip-close-socket-select/jinbao-ept.jpg"></p><p>&emsp;&emsp;问题来源是，跑在基于LwIP+FreeRTOS环境的DoIP，在反复初始化/反初始化时几次之后就会失败了。年初由于任务紧张，检查了下初始化和反初始化函数的流程，改掉了几处可能会出现问题的地方，问题依旧。但是同样的上层处理代码，在windows和linux环境下是没问题的，基本怀疑是LwIP某处不完善引起。一直拖到要离职，终于在离开的最后一天解决了，也算是给在怿星的DoIP协议栈画上一个属于自己的句号。</p><p>&emsp;&emsp; LwIP 全名为 Light weight IP，意思是轻量化的 TCP/IP 协议， 是瑞典计算机科学院(SICS)的 Adam Dunkels 开发的一个小型开源的 TCP/IP 协议栈。 LwIP 的设计初衷是：用少量的资源消耗(RAM)实现一个较为完整的 TCP/IP 协议栈，其中“完整”主要指的是 TCP 协议的完整性， 实现的重点是在保持 TCP 协议主要功能的基础上减少对 RAM 的占用。此外 LwIP既可以移植到操作系统上运行，也可以在无操作系统的情况下独立运行。</p><h2 id="2-原因"><a href="#2-原因" class="headerlink" title="2. 原因"></a>2. 原因</h2><p>&emsp;&emsp;引起该问题的根本原因是，LwIP select函数里如果判断对应的socket没有事件产生（读/写/异常），进行简单处理后则改线程休眠，让出cpu控制权。如果在select休眠期间，进行了close socket的操作，会释放对应的socket pcb（<strong>close(socket)<strong>是成功的），然后在select休眠结束后，判断该socket资源不存在，则直接退出select函数，</strong>但是</strong>此时该socket的select_wait标志位没被清除。LwIP在分配socket时（资源都是静态分配的，类似于有一个socket数组，若分配则对应标志位为真），socket是否空闲是会对select_wait该标志位进行判断，所以即使该socket没有被使用，调用*socket()*函数时也会认为该socket是被占用的，所以几次之后，socket资源被<strong>假耗尽</strong>。</p><h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3. 解决"></a>3. 解决</h2><p>&emsp;&emsp;知道原因后，问题就好解决了。有以下两个解决问题的思路。</p><ol><li>更改LwIP源码，对对应的标志位进行判断和清除。该解决方案，如果能够push到LwIP主分支，则是一劳永逸的，否则如果要跟随LwIP官方更新，自己得维护一套代码，并持续merge。</li><li>使用者，在使用接口时，做同步。即在select休眠期间不允许进行close socket操作，同时在close socket也不允许进入select函数。所以只要在两个函数之间加上条件判断就好。</li></ol><p>&emsp;&emsp;考虑到维护成本，最终选择方案2.</p><h1 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h1><p>&emsp;&emsp;解决思路在上面已经给出，下面主要想从源码级对问题进行分析。原因中，涉及三个函数，</p><ol><li><p>socket函数，即lwip_socket，函数原型如下：<br><code>int lwip_socket(int domain, int type, int protocol)</code></p></li><li><p>close函数，即lwip_close，原型如下：<br><code>int lwip_close(int s)</code></p></li><li><p>select函数， 即lwip_select(),原型如下：<br><code>intlwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset, struct timeval *timeout)</code></p></li></ol><h2 id="1-拓展"><a href="#1-拓展" class="headerlink" title="1. 拓展"></a>1. 拓展</h2><p>&emsp;&emsp;LwIP本身提供了类似于bsd socket编程模型，同时也实现了简易版的select函数。</p><p>&emsp;&emsp;关于socket编程的教程是实在太多了，在这不再重复去描述，<a href="https://blog.csdn.net/weixin_39634961/article/details/80236161">socket编程参考链接</a>。辅导过一些人进行socket编程，初学者包括我自己，容易忽略的一点就是，作为server时，listen-socket和accept-socket不是一回事。可以理解为listen-socket窗口，窗口只是负责监听有谁要走通道，走哪个通道，并把真正的通道–accept-socket给到上层。对于其他的，感觉跑跑示例程序，单步走一下，就基本理解了。</p><p>&emsp;&emsp;在不使用select时，并没有发现socket资源释放不完全的问题。本文不展开讲解lwip select的实现，但是对于select的使用需要稍微展开下，<a href="https://www.cnblogs.com/skyfsm/p/7079458.html">select编程参考链接</a>。关于select本质上是一个同步I/O函数，只不过改同步函数可以同时监控多个”IO”通道，所以也称为多路复用。熟悉了上面的socket编程后，如果需要实现多个socket同时通信的话，就应该给每个socket开一个线程，在负载不是特别高的情况下会显得效率特别低，同时线程太多，就不得不考虑资源竞争的问题，如果竞态条件太多，也容易产生问题（<strong>多线程资源竞争问题</strong>）。多路复用即是用一个线程监听多个通道（描述符），一旦某个描述符就绪（可读、可写或者异常），就通知程序进行相应的读写操作。上庙的描述，看起来select是异步的，其实不然，因为产生读写事件后，应用程序必须自己负责读写操作，读写操作本身是阻塞的，而异步I/O是不需要自己读写；同时即使没有读写事件产生，select函数本身也是阻塞的，加了超时也是阻塞的，只不过给阻塞增加了一个时间限制。</p><p>&emsp;&emsp;select最早于1983年出现在4.2BSD中，它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。从<a href="https://www.cnblogs.com/skyfsm/p/7079458.html">select编程参考链接</a>中可以看出最终每个socket都对应到每个bit上，如果对应的socket有事件产生，则会被置位。</p><h2 id="2-函数分析"><a href="#2-函数分析" class="headerlink" title="2. 函数分析"></a>2. 函数分析</h2><p>&emsp;&emsp;该节分析函数socket，close，select实现细节。<strong>LwIP版本2.1.4</strong>。</p><h3 id="2-1-socket函数"><a href="#2-1-socket函数" class="headerlink" title="2.1 socket函数"></a>2.1 socket函数</h3><p>&emsp;&emsp;lwip中<code>#define socket lwip_socket</code>.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lwip_socket</span><span class="token punctuation">(</span><span class="token keyword">int</span> domain<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">netconn</span> <span class="token operator">*</span>conn<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">LWIP_UNUSED_ARG</span><span class="token punctuation">(</span>domain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* @todo: check this */</span>    <span class="token comment">/* create a netconn */</span>    <span class="token comment">/* 下面主要是针对不同的socket类型，分配空间，对相应的成员进行赋值，空间资源为预分配给lwip的堆空间     */</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> SOCK_RAW<span class="token operator">:</span>        conn <span class="token operator">=</span> <span class="token function">netconn_new_with_proto_and_callback</span><span class="token punctuation">(</span>            <span class="token function">DOMAIN_TO_NETCONN_TYPE</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> NETCONN_RAW<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">u8_t</span><span class="token punctuation">)</span>protocol<span class="token punctuation">,</span>            event_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token string">"lwip_socket(%s, SOCK_RAW, %d) = "</span><span class="token punctuation">,</span>                     domain <span class="token operator">==</span> PF_INET <span class="token operator">?</span> <span class="token string">"PF_INET"</span> <span class="token operator">:</span> <span class="token string">"UNKNOWN"</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SOCK_DGRAM<span class="token operator">:</span>        conn <span class="token operator">=</span> <span class="token function">netconn_new_with_callback</span><span class="token punctuation">(</span>            <span class="token function">DOMAIN_TO_NETCONN_TYPE</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>protocol <span class="token operator">==</span> IPPROTO_UDPLITE<span class="token punctuation">)</span>                                                <span class="token operator">?</span> NETCONN_UDPLITE                                                <span class="token operator">:</span> NETCONN_UDP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            event_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token string">"lwip_socket(%s, SOCK_DGRAM, %d) = "</span><span class="token punctuation">,</span>                     domain <span class="token operator">==</span> PF_INET <span class="token operator">?</span> <span class="token string">"PF_INET"</span> <span class="token operator">:</span> <span class="token string">"UNKNOWN"</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SOCK_STREAM<span class="token operator">:</span>        conn <span class="token operator">=</span> <span class="token function">netconn_new_with_callback</span><span class="token punctuation">(</span>            <span class="token function">DOMAIN_TO_NETCONN_TYPE</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> NETCONN_TCP<span class="token punctuation">)</span><span class="token punctuation">,</span> event_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token string">"lwip_socket(%s, SOCK_STREAM, %d) = "</span><span class="token punctuation">,</span>                     domain <span class="token operator">==</span> PF_INET <span class="token operator">?</span> <span class="token string">"PF_INET"</span> <span class="token operator">:</span> <span class="token string">"UNKNOWN"</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"lwip_socket(%d, %d/UNKNOWN, %d) = -1\n"</span><span class="token punctuation">,</span>                                    domain<span class="token punctuation">,</span> type<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_errno</span><span class="token punctuation">(</span>EINVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token string">"-1 / ENOBUFS (could not create netconn)\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_errno</span><span class="token punctuation">(</span>ENOBUFS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     *上面已经分配好了，对应的connection空间，最终要对应的socket上，即socket数组，见下面alloc_socket实现。     */</span>    i <span class="token operator">=</span> <span class="token function">alloc_socket</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">netconn_delete</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">set_errno</span><span class="token punctuation">(</span>ENFILE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    conn<span class="token operator">-></span>socket <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_errno</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">alloc_socket</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netconn</span> <span class="token operator">*</span>newconn<span class="token punctuation">,</span> <span class="token keyword">int</span> accepted<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token function">SYS_ARCH_DECL_PROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* allocate a new socket identifier */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Protect socket array */</span>    <span class="token function">SYS_ARCH_PROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>conn <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>select_waiting <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>conn       <span class="token operator">=</span> newconn<span class="token punctuation">;</span>      <span class="token comment">/* The socket is not yet known to anyone, so no need to protect         after having marked it as used. */</span>      <span class="token function">SYS_ARCH_UNPROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lastdata   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lastoffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rcvevent   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">/* TCP sendbuf is empty, but the socket is not yet writable until connected       * (unless it has been created by accept()). */</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sendevent  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">NETCONNTYPE_GROUP</span><span class="token punctuation">(</span>newconn<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token operator">==</span> NETCONN_TCP <span class="token operator">?</span> <span class="token punctuation">(</span>accepted <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>errevent   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>err        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> i <span class="token operator">+</span> LWIP_SOCKET_OFFSET<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">SYS_ARCH_UNPROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;可以看到，判断socket资源是否有人在使用时，除了判断socket-&gt;conn是否为空，还会判断select_waiting是否等于0。其中select_waiting标识该socket正在被多少个线程在使用。即要释放socket资源（说释放有点不是很准确，因为在lwip中，socket资源是编译前分配的），两个重要条件是，socket-&gt;conn必须为空，并且select_waiting要为0.</p><h3 id="2-2-close函数"><a href="#2-2-close函数" class="headerlink" title="2.2 close函数"></a>2.2 close函数</h3><p>&emsp;&emsp;接下来看看close函数的实现，看为啥会导致资源释放不完全。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lwip_close</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">lwip_sock</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>  <span class="token keyword">int</span> is_tcp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">err_t</span> err<span class="token punctuation">;</span>  <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"lwip_close(%d)\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 本质上是，通过socket数组下标获取到socket结构体 */</span>  sock <span class="token operator">=</span> <span class="token function">get_socket</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock<span class="token operator">-></span>conn <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    is_tcp <span class="token operator">=</span> <span class="token function">NETCONNTYPE_GROUP</span><span class="token punctuation">(</span><span class="token function">netconn_type</span><span class="token punctuation">(</span>sock<span class="token operator">-></span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> NETCONN_TCP<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">LWIP_ASSERT</span><span class="token punctuation">(</span><span class="token string">"sock->lastdata == NULL"</span><span class="token punctuation">,</span> sock<span class="token operator">-></span>lastdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">LWIP_IGMP</span></span>  <span class="token comment">/* drop all possibly joined IGMP memberships */</span>  <span class="token function">lwip_socket_drop_registered_memberships</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* LWIP_IGMP */</span></span><span class="token comment">/* 释放从lwip内存堆里分配到空间 */</span>  err <span class="token operator">=</span> <span class="token function">netconn_delete</span><span class="token punctuation">(</span>sock<span class="token operator">-></span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> ERR_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sock_set_errno</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token function">err_to_errno</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/* 主要是对socket结构体成员进行反初始化，并对数据空间进行释放，看下述对该函数实现分析 */</span>  <span class="token function">free_socket</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> is_tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">set_errno</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">free_socket</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">lwip_sock</span> <span class="token operator">*</span>sock<span class="token punctuation">,</span> <span class="token keyword">int</span> is_tcp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>lastdata<span class="token punctuation">;</span>  lastdata         <span class="token operator">=</span> sock<span class="token operator">-></span>lastdata<span class="token punctuation">;</span>  sock<span class="token operator">-></span>lastdata   <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  sock<span class="token operator">-></span>lastoffset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  sock<span class="token operator">-></span>err        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* Protect socket array */</span>  <span class="token comment">/* 对socket->conn进行置空 */</span>  <span class="token function">SYS_ARCH_SET</span><span class="token punctuation">(</span>sock<span class="token operator">-></span>conn<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* don't use 'sock' after this line, as another task might have allocated it */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastdata <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_tcp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">pbuf_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pbuf</span> <span class="token operator">*</span><span class="token punctuation">)</span>lastdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">netbuf_delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netbuf</span> <span class="token operator">*</span><span class="token punctuation">)</span>lastdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;上述两个函数分析可知，<code>close</code>函数只能使socket-&gt;conn为空，并不能使select_waiting为0，所以其实只有<code>close</code>函数是不能使socket资源完全释放的。</p><h3 id="2-3-select函数"><a href="#2-3-select函数" class="headerlink" title="2.3 select函数"></a>2.3 select函数</h3><p>&emsp;&emsp;从<em>select_waiting</em>名字中能比较容易的猜到，该变量跟select函数肯定是强相关的。全局搜索select_waiting，果然只有select函数有进行写操作。下面分析select函数，该函数较长，做必要的简化。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lwip_select</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxfdp1<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>readset<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>writeset<span class="token punctuation">,</span> fd_set <span class="token operator">*</span>exceptset<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">u32_t</span> waitres <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> nready<span class="token punctuation">;</span>  fd_set lreadset<span class="token punctuation">,</span> lwriteset<span class="token punctuation">,</span> lexceptset<span class="token punctuation">;</span>  <span class="token class-name">u32_t</span> msectimeout<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">lwip_select_cb</span> select_cb<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> maxfdp2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">LWIP_NETCONN_SEM_PER_THREAD</span></span>  <span class="token keyword">int</span> waited <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token comment">/* Go through each socket in each list to count number of sockets which     currently match */</span>  <span class="token comment">/*   *扫描所有socket对应的bit，如果有准备好，则直接将对应的bit置上，后面可以看出，该函数简单的赋值后就退出了，  *不涉及对select_waiting的操作。   */</span>  nready <span class="token operator">=</span> <span class="token function">lwip_selscan</span><span class="token punctuation">(</span>maxfdp1<span class="token punctuation">,</span> readset<span class="token punctuation">,</span> writeset<span class="token punctuation">,</span> exceptset<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lreadset<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lwriteset<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lexceptset<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* If we don't have any current events, then suspend if we are supposed to */</span>  <span class="token comment">/* 只有没有相应的socket准备好并且没有超时，才回置位select_waiting, 并挂起线程。 */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nready<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&amp;&amp;</span> timeout<span class="token operator">-></span>tv_sec <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout<span class="token operator">-></span>tv_usec <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">LWIP_DEBUGF</span><span class="token punctuation">(</span>SOCKETS_DEBUG<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"lwip_select: no timeout, returning 0\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* This is OK as the local fdsets are empty and nready is zero,         or we would have returned earlier. */</span>      <span class="token keyword">goto</span> return_copy_fdsets<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 省略一堆处理，可以看到只要该socket设置了，读写异常通知，并且socket是存在的，则会将select_wainting增加1 */</span>    <span class="token comment">/* Increase select_waiting for each socket we are interested in */</span>    maxfdp2 <span class="token operator">=</span> maxfdp1<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LWIP_SOCKET_OFFSET<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxfdp1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readset <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> readset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span>writeset <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> writeset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span>exceptset <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> exceptset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">lwip_sock</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>        <span class="token function">SYS_ARCH_PROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>        sock <span class="token operator">=</span> <span class="token function">tryget_socket</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sock <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          sock<span class="token operator">-></span>select_waiting<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token function">LWIP_ASSERT</span><span class="token punctuation">(</span><span class="token string">"sock->select_waiting > 0"</span><span class="token punctuation">,</span> sock<span class="token operator">-></span>select_waiting <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">/* Not a valid socket */</span>          nready <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          maxfdp2 <span class="token operator">=</span> i<span class="token punctuation">;</span>          <span class="token function">SYS_ARCH_UNPROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">SYS_ARCH_UNPROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nready <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     *执行完上述操作，还会再扫描一次是否有socket有事件产生，删除细节。    *因为上述，如果socket资源过多，会消耗不少资源，再扫描一次可以提高效率。    */</span>      <span class="token comment">/* 休眠指定时间，让出cpu控制权 */</span>      waitres <span class="token operator">=</span> <span class="token function">sys_arch_sem_wait</span><span class="token punctuation">(</span><span class="token function">SELECT_SEM_PTR</span><span class="token punctuation">(</span>select_cb<span class="token punctuation">.</span>sem<span class="token punctuation">)</span><span class="token punctuation">,</span> msectimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 休眠结束， 将对应socket->select_waiting减1 */</span>    <span class="token comment">/* Decrease select_waiting for each socket we are interested in */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> LWIP_SOCKET_OFFSET<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxfdp2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readset <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> readset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span>writeset <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> writeset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span>exceptset <span class="token operator">&amp;&amp;</span> <span class="token function">FD_ISSET</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> exceptset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">lwip_sock</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>        <span class="token function">SYS_ARCH_PROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>        sock <span class="token operator">=</span> <span class="token function">tryget_socket</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 减1，必须socket是还在的 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sock <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">/* for now, handle select_waiting==0... */</span>          <span class="token function">LWIP_ASSERT</span><span class="token punctuation">(</span><span class="token string">"sock->select_waiting > 0"</span><span class="token punctuation">,</span> sock<span class="token operator">-></span>select_waiting <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>sock<span class="token operator">-></span>select_waiting <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sock<span class="token operator">-></span>select_waiting<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">/* Not a valid socket */</span>          nready <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">SYS_ARCH_UNPROTECT</span><span class="token punctuation">(</span>lev<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* 删除不影响分析代码，感兴趣参考源码。 */</span>  <span class="token keyword">return</span> nready<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><center>这是这一张来自未来的select函数处理流程图</center></strong></p><p>&emsp;&emsp;参考上述代码分析，特别注意<em>socket-&gt;select_waiting</em>加1和减1的地方，可以看到，如果socket存在且的确需要监听事件，且并不是进来事件就已经产生或者已经超时，一定会加1；然后线程会有可能会进行休眠；正常情况下，休眠结束后，<em>socket-&gt;select_waiting</em>减1，离开该函数，<em>socket-&gt;select_waiting</em>恢复原值。<strong>但是</strong>，如果在线程休眠期间，恰巧在另外一个线程进行了close操作，事件就变味了。</p><p>&emsp;&emsp;如果在休眠期间进行了<code>close(socket)</code>,则通过<code>tyr_socket(socket)</code>获取不到socket结构体，则<em>socket-&gt;select_waiting</em>不会进行减1，后面执行一系列语句后，退出该函数，<em>socket-&gt;select_waiting</em>没有恢复原值，且比进来时大1。针对该函数，<em>socket-&gt;select_waiting</em>加1的次数是*&gt;=<em>减1的次数，所以如果只要在函数退出时没有恢复原值，则</em>socket-&gt;select_waiting*永远不可能再减为0了，此时socket资源就出现了<strong>假占用</strong>，该socket再也不能被其他人使用了。</p><h1 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h1><p>&emsp;&emsp;第二章已经对产生的原因进行了分析。解决问题的思路也想一开始提到的有两种，为了不改lwip源码，使用了第二种思路。下面用伪代码给出解决方案。需要使用到两个flag<code>closing_socket_flag</code>和·selecting_flag`。<br><strong>thread1</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">adaptor_closesocket</span><span class="token punctuation">(</span><span class="token keyword">int</span> socket<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">get_select_processing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">set_closesocket_processing</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_closescoket_processing</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>thread2</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">select_loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> socket<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">get_closesocket_processing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">set_select_processing</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>    select_return <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>sockMAX <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>read_set<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>exception_set<span class="token punctuation">,</span> <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_select_processing</span><span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;上面的解决方案，我认为是最为简单通用的解决方案，当然针对两个flag肯定还是需要加锁的。另外还有一种思路就是使用通知类似于condition的方法。知道了错误原因，解决方法的思路就是做同步。</p><h1 id="四、写在最后"><a href="#四、写在最后" class="headerlink" title="四、写在最后"></a>四、写在最后</h1><p>&emsp;&emsp;LwIP无疑是一个很优秀的轻量版的TCP/IP协议实现了，虽然上面的socket接口都是简化版，当时以为如果功能是支持的，在使用以为可以跟BSD的一样。因为在开发DoIP时是跨平台，上层应用代码是一样的，在windows和linux都是支持的，所以比较简单就初步定位出了问题应该是出在了LwIP协议本身，但是当时由于现象特别奇怪（略过不表），也费了一般周折才最终定位出来。一开始觉得认为这是一个bug，后面跟老虞（技术偶像）深度讨论过，觉得这也不属于LwIP本身的一个bug，感觉更像是feature实现的不够完整，但是light weight也已经足够了。同时在使用LwIP本身也学到了很多技巧，如连接符**##**的使用、在MCU上实现分配空间的解决方案。</p><p><img src="https://savannah.nongnu.org/images/Savannah.theme/floating.png"></p>]]></content>
      
      
      <categories>
          
          <category> 协议栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> LwIP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我为什么要写博客</title>
      <link href="2021/04/11/why-write/"/>
      <url>2021/04/11/why-write/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于这篇博客，想记录下自己当前写博客的原因，同时也希望记录自己当前自己的一些看法，后面持续更新。</p></blockquote><blockquote><p>记于2021.4</p></blockquote><h1 id="为什么要写博客"><a href="#为什么要写博客" class="headerlink" title="为什么要写博客"></a>为什么要写博客</h1><p> &emsp;&emsp;一直挺想用文字记录记录自己的成长轨迹，第一份工作在经纬恒润时，部门要求每天都要写写tasklist，当时刚毕业，也算是逗比一个，写的文字不止是每天工作的记录，也包含自己遇到问题时自己苦恼的心情，同时也有自己在解决了问题时开心。在入职2个多月后，转正答辩，看着自己写的tasklist，感觉自己又把前两个月过了一遍似的，当时写转正ppt也蛮顺利的。后面虽然略有偷懒，但是也会“勤勤恳恳”的记录，<br> 在2019年离职前，对在恒润的职业生涯又回顾了一遍，感觉就像看到了一个从校园出来的学生是如何慢慢变为社会人的。</p><p> &emsp;&emsp;从北京到上海，从恒润到怿星，前三个月也像模像样的在每天在记录。当时处于放养状态，很多时候都是自己在学东西，写tasklist，一方面是记录自己的学习，另一方面是为了防止领导觉得我在试用期没有成果。磕磕绊绊、断断续续也写了三个月，终于在某一天就丢了。</p><p><img src="/medias/article/2.jpeg"></p><p>&emsp;&emsp;2020年年终总结，觉得没有达到的目标，考虑到在目前平台自己成长受限就想着要换个平台。找工作嘛，避免不了要更新简历，期间回忆回忆自己做过的事情，也在感慨自己的一些成长和见识。也越来越萌生，自己需要在某个地方记录记录的学习过程以及学习成果。</p><p>&emsp;&emsp;自己在2020年一年中看了很多计算机相关的书籍，但是并没有形成总结。比如自己在看《深入理解计算机系统》时，看到虚拟内存那里，突然就明白了MCU和MPU的差异性在哪里了。在阅读《操作系统导论》时，明白了原来没有完美的设计，总是会在复杂度和性能取个折中。自己本身是一名码农(<strong>还不配称为程序员</strong>），在撸代码时，老是想实现一个完美程序，但是最终往往流产，看完这本书后也算是给了我启发。从《人月神话》这本书不仅知道了软件工作量是不能简单用人月来衡量，而且也教会了我如何看待团队水平不同层次的人，也算是摆正了自己的位置。</p><p>&emsp;&emsp;上面无论精彩的或者不精彩的内容，深刻或者不深刻的瞬间，都没用文字记录下来。现在再去回想，如虚拟内存之类，很难再体会到那种突然顿悟的激动。殊不知，那是自己从MCU转到MPU(通用操作系统)很重要的一件事，扫清了自己的认知障碍。</p><p>&emsp;&emsp;趁着跳槽之际，又是博客园整顿之时，为了让自己的博客掌握在自己的手里。在清明节前后搭建出了属于的博客，也借此希望能够学些学学nodejs，同时也想在此记录自己的心情、学习的技术以及自己的心得。ps：<em>搭建博客也踏了不少坑，希望有时间整理一篇文章。</em></p><h1 id="博客写些什么"><a href="#博客写些什么" class="headerlink" title="博客写些什么"></a>博客写些什么</h1><p>&emsp;&emsp;其实目前阶段没有特别的规划去些什么。心里大概想写一些技术类的文章，并记录自己的心得体会。加深自己对技术理解，同时也希望能够帮到在技术上一样遇到问题的有缘人，或者是在心得体会上有同感的同路人。当然，自己本身是职场人，涉及工作机密的内容或者会对公司造成任何损失的内容肯定不会出现在上面。技术类的文章，计划是完整的，有demo可以直接运行，尽量把自己在学习过程中走的弯路也都列出来，权当给自己记录了。</p><p>&emsp;&emsp;阶段性的写写总结，比如季度总结或者年终总结，在后续回顾能够看到之前的自己是傻子，这就证明了自己是在成长的。</p><p>&emsp;&emsp;后面还想要写的，也会记录在博客上。</p><h1 id="博客写给谁看"><a href="#博客写给谁看" class="headerlink" title="博客写给谁看"></a>博客写给谁看</h1><p>&emsp;&emsp;写博客的很大一个原因就是希望记录自己，所以最主要的是写给自己看的。</p><p>&emsp;&emsp;因为自己本身是一个职场人，做的东西也算是较为前沿的东西；同时自己因为没有读研，工作也还不到三年，跟很多硕士毕业的同学也是同龄人。所以在工作上遇到困难的职场人能够从我这获得启示甚至答案，也希望即将踏入职场的同龄人能够交流交流心得，愿意一起成长。</p><h1 id="博客什么时候更新"><a href="#博客什么时候更新" class="headerlink" title="博客什么时候更新"></a>博客什么时候更新</h1><p>&emsp;&emsp;暂时不定更新日期，因为第一次写博客，也知道写这个玩意儿很浪费时间和经历，用玩手机的时间写博客，最后能够坚持下来，持续的更新，自己就算是成功。最后期望自己能够稳定周期的更新博客。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp Primer 学习</title>
      <link href="2021/04/11/learn-with-cpp-primer/"/>
      <url>2021/04/11/learn-with-cpp-primer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有文章暂时均来自<a href="https://github.com/applenob/Cpp_Primer_Practice">搞定C++👊。cpp-primer 中文版第5版学习仓库，包括笔记和课后练习答案</a>。直接上传仅为了方便自己容易阅读和更改。侵权请直接联系本人删除。随着自己学习，会将笔记替换成自己的。</p></blockquote><h1 id="Cpp-Primer-学习"><a href="#Cpp-Primer-学习" class="headerlink" title="Cpp Primer 学习"></a>Cpp Primer 学习</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>《cpp-primer 中文版（第 5 版）》学习仓库，包括<strong>笔记</strong>和<strong>课后练习答案</strong>。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>system: ubuntu 16.04</li><li>IDE: VS Code</li><li>compiler: g++</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>第1章 : 开始  <a href="https://jinbaotang.cn/2021/04/10/notes/ch01">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch01">练习</a></li><li>第 I 部分 : C++基础<ul><li>第2章 : 变量和基本类型  <a href="https://jinbaotang.cn/2021/04/10/notes/ch02">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch02">练习</a></li><li>第3章 : 字符串、向量和数组  <a href="https://jinbaotang.cn/2021/04/10/notes/ch03">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch03">练习</a></li><li>第4章 : 表达式  <a href="https://jinbaotang.cn/2021/04/10/notes/ch04">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch04">练习</a>  </li><li>第5章 : 语句  <a href="https://jinbaotang.cn/2021/04/10/notes/ch05">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch05">练习</a></li><li>第6章 : 函数  <a href="https://jinbaotang.cn/2021/04/10/notes/ch06">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch06">练习</a></li><li>第7章 : 类  <a href="https://jinbaotang.cn/2021/04/10/notes/ch07">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch07">练习</a></li></ul></li><li>第 II 部分 : C++标准库<ul><li>第8章 : IO库  <a href="https://jinbaotang.cn/2021/04/10/notes/ch08">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch08">练习</a></li><li>第9章 : 顺序容器  <a href="https://jinbaotang.cn/2021/04/10/notes/ch09">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch09">练习</a></li><li>第10章 : 泛型算法  <a href="https://jinbaotang.cn/2021/04/10/notes/ch10">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch10">练习</a></li><li>第11章 : 关联容器  <a href="https://jinbaotang.cn/2021/04/10/notes/ch11">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch11">练习</a></li><li>第12章 : 动态内存  <a href="https://jinbaotang.cn/2021/04/10/notes/ch12">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch12">练习</a></li></ul></li><li>第 III 部分 : 类设计者的工具 <ul><li>第13章 : 拷贝控制   <a href="https://jinbaotang.cn/2021/04/10/notes/ch13">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch13">练习</a></li><li>第14章 : 重载与类型转换  <a href="https://jinbaotang.cn/2021/04/10/notes/ch14">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch14">练习</a></li><li>第15章 : 面向对象程序设计  <a href="https://jinbaotang.cn/2021/04/10/notes/ch15">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch15">练习</a></li><li>第16章 : 模版与泛型编程  <a href="https://jinbaotang.cn/2021/04/10/notes/ch16">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch16">练习</a></li></ul></li><li>第 IV 部分 : 高级主题  <ul><li>第17章 : 标准库与特殊设施  <a href="https://jinbaotang.cn/2021/04/10/notes/ch17">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch17">练习</a></li><li>第18章 : 用于大型程序的工具  <a href="https://jinbaotang.cn/2021/04/10/notes/ch18">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch18">练习</a></li><li>第19章 : 特殊工具与技术  <a href="https://jinbaotang.cn/2021/04/10/notes/ch19">笔记</a>  <a href="https://jinbaotang.cn/2021/04/10/excersize/ch19">练习</a></li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Mooophy/Cpp-Primer">cpp-primer 5 Answers(C++11/14)</a></li><li><a href="https://github.com/huangmingchuan/Cpp_Primer_Answers">《cpp-primer》第五版中文版习题答案</a></li><li><a href="https://github.com/applenob/Cpp_Primer_Practice">搞定C++👊。cpp-primer 中文版第5版学习仓库，包括笔记和课后练习答案</a><h2 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp-primer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案1</title>
      <link href="2021/04/10/excersize/ch01/"/>
      <url>2021/04/10/excersize/ch01/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h1><h2 id="练习1-1"><a href="#练习1-1" class="headerlink" title="练习1.1"></a>练习1.1</h2><p>查阅你使用的编译器的文档，确定它所使用的文件名约定。编译并运行第2页的main程序。</p><p>解：</p><ul><li><code>g++ --std=c++11 ch1.cpp -o main</code></li><li><code>./main</code></li></ul><h2 id="练习1-2"><a href="#练习1-2" class="headerlink" title="练习1.2"></a>练习1.2</h2><p>改写程序，让它返回-1。返回值-1通常被当做程序错误的标识。重新编译并运行你的程序，观察你的系统如何处理main返回的错误标识。</p><p>解：</p><ul><li>在ubuntu下，使用g++，返回-1，<code>./main</code>没有发现任何异常。</li><li><code>echo $?</code>，返回255。</li></ul><h2 id="练习1-3"><a href="#练习1-3" class="headerlink" title="练习1.3"></a>练习1.3</h2><p>编写程序，在标准输出上打印Hello, World。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-4"><a href="#练习1-4" class="headerlink" title="练习1.4"></a>练习1.4</h2><p>我们的程序使用加法运算符<code>+</code>来将两个数相加。编写程序使用乘法运算符<code>*</code>，来打印两个数的积。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter two numbers:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> v1 <span class="token operator">>></span> v2<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The product of "</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> v2              <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">*</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-5"><a href="#练习1-5" class="headerlink" title="练习1.5"></a>练习1.5</h2><p>我们将所有的输出操作放在一条很长的语句中，重写程序，将每个运算对象的打印操作放在一条独立的语句中。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter two numbers:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">int</span> v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> v1 <span class="token operator">>></span> v2<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The product of "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v2<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">*</span> v2<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-6"><a href="#练习1-6" class="headerlink" title="练习1.6"></a>练习1.6</h2><p>解释下面程序片段是否合法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The sum of "</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">;</span>          <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> v2<span class="token punctuation">;</span>          <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果程序是合法的，它的输出是什么？如果程序不合法，原因何在？应该如何修正？</p><p>解：</p><p>程序不合法，有多余的分号，修改如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The sum of "</span> <span class="token operator">&lt;&lt;</span> v1          <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> v2          <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习1-7"><a href="#练习1-7" class="headerlink" title="练习1.7"></a>练习1.7</h2><p>编译一个包含不正确的嵌套注释的程序，观察编译器返回的错误信息。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 正常注释 /* 嵌套注释 */</span> 正常注释<span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误信息：</p><pre class="line-numbers language-none"><code class="language-none">  &#x2F;* 正常注释 &#x2F;* 嵌套注释 *&#x2F; 正常注释*&#x2F;                                     ^ch1.cpp:97:37: error: stray ‘\255’ in programch1.cpp:97:37: error: stray ‘\243’ in programch1.cpp:97:37: error: stray ‘\345’ in programch1.cpp:97:37: error: stray ‘\270’ in programch1.cpp:97:37: error: stray ‘\270’ in programch1.cpp:97:37: error: stray ‘\346’ in programch1.cpp:97:37: error: stray ‘\263’ in programch1.cpp:97:37: error: stray ‘\250’ in programch1.cpp:97:37: error: stray ‘\351’ in programch1.cpp:97:37: error: stray ‘\207’ in programch1.cpp:97:37: error: stray ‘\212’ in programch1.cpp: In function ‘int main()’:ch1.cpp:97:50: error: expected primary-expression before ‘&#x2F;’ token  &#x2F;* 正常注释 &#x2F;* 嵌套注释 *&#x2F; 正常注释*&#x2F;                                                  ^ch1.cpp:98:5: error: expected primary-expression before ‘return’     return 0;     ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-8"><a href="#练习1-8" class="headerlink" title="练习1.8"></a>练习1.8</h2><p>指出下列哪些输出语句是合法的（如果有的话）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"/*"</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*/"</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token comment">/* "*/</span>" <span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token comment">/* "*/</span><span class="token string">" /* "</span><span class="token comment">/*" */</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>预测编译这些语句会产生什么样的结果，实际编译这些语句来验证你的答案(编写一个小程序，每次将上述一条语句作为其主体)，改正每个编译错误。</p><p>解：</p><p>只有第三句编译出错，改成如下即可：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token comment">/* "*/</span><span class="token string">" */"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第四句等价于输出 <code>&quot; /* &quot;</code>。</p><h2 id="练习1-9"><a href="#练习1-9" class="headerlink" title="练习1.9"></a>练习1.9</h2><p>编写程序，使用<code>while</code>循环将50到100整数相加。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>        val <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum of 50 to 100 inclusive is "</span>              <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-10"><a href="#练习1-10" class="headerlink" title="练习1.10"></a>练习1.10</h2><p>除了<code>++</code>运算符将运算对象的值增加1之外，还有一个递减运算符<code>--</code>实现将值减少1.编写程序与，使用递减运算符在循环中按递减顺序打印出10到0之间的整数。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        val <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-11"><a href="#练习1-11" class="headerlink" title="练习1.11"></a>练习1.11</h2><p>编写程序，提示用户输入两个整数，打印出这两个整数所指定的范围内的所有整数。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input two num: "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> start <span class="token operator">>></span> end<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> start <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token operator">++</span>start<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"start should be smaller than end !!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-12"><a href="#练习1-12" class="headerlink" title="练习1.12"></a>练习1.12</h2><p>下面的for循环完成了什么功能？sum的终值是多少？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>从-100加到100，sum的终值是0。</p><h2 id="练习1-13"><a href="#练习1-13" class="headerlink" title="练习1.13"></a>练习1.13</h2><p>使用for循环重做1.4.1节中的所有练习（练习1.9到1.11）。</p><p>解：</p><h3 id="练习1-9-1"><a href="#练习1-9-1" class="headerlink" title="练习1.9"></a>练习1.9</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> val <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum of 50 to 100 inclusive is "</span>              <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习1-10-1"><a href="#练习1-10-1" class="headerlink" title="练习1.10"></a>练习1.10</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> val <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习1-11-1"><a href="#练习1-11-1" class="headerlink" title="练习1.11"></a>练习1.11</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input two num: "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> start <span class="token operator">>></span> end<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> start <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>start<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> start <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"start should be smaller than end !!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-14"><a href="#练习1-14" class="headerlink" title="练习1.14"></a>练习1.14</h2><p>对比for循环和while循环，两种形式的优缺点各是什么？</p><p>解：</p><pre class="line-numbers language-none"><code class="language-none">The main difference between the &#96;for&#96;&#39;s and the &#96;while&#96;&#39;s is a matter of pragmatics: we usually use &#96;for&#96; when there is a known number of iterations, and use &#96;while&#96; constructs when the number of iterations in not known in advance. The &#96;while&#96; vs &#96;do ... while&#96; issue is also of pragmatics, the second executes the instructions once at start, and afterwards it behaves just like the simple &#96;while&#96;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-15"><a href="#练习1-15" class="headerlink" title="练习1.15"></a>练习1.15</h2><p>编写程序，包含第14页“再探编译”中讨论的常见错误。熟悉编译器生成的错误信息。</p><p>解：</p><p>编译器可以检查出的错误有：</p><ul><li>语法错误</li><li>类型错误 </li><li>声明错误</li></ul><h2 id="练习1-16"><a href="#练习1-16" class="headerlink" title="练习1.16"></a>练习1.16</h2><p>编写程序，从cin读取一组数，输出其和。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> value<span class="token punctuation">;</span> <span class="token punctuation">)</span>        sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-17"><a href="#练习1-17" class="headerlink" title="练习1.17"></a>练习1.17</h2><p>如果输入的所有值都是相等的，本节的程序会输出什么？如果没有重复值，输出又会是怎样的？</p><h2 id="练习1-18"><a href="#练习1-18" class="headerlink" title="练习1.18"></a>练习1.18</h2><p>编译并运行本节的程序，给它输入全都相等的值。再次运行程序，输入没有重复的值。</p><p>解：</p><p>全部重复：</p><pre class="line-numbers language-none"><code class="language-none">1 1 1 1 1 1 occurs 5 times <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没有重复：</p><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 51 occurs 1 times 2 occurs 1 times 3 occurs 1 times 4 occurs 1 times 5 occurs 1 times <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-19"><a href="#练习1-19" class="headerlink" title="练习1.19"></a>练习1.19</h2><p>修改你为1.4.1节练习1.11（第11页）所编写的程序（打印一个范围内的数），使其能处理用户输入的第一个数比第二个数小的情况。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input two num: "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> start <span class="token operator">>></span> end<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> start <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token operator">++</span>start<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"start should be smaller than end !!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-20"><a href="#练习1-20" class="headerlink" title="练习1.20"></a>练习1.20</h2><p>在网站<a href="http://www.informit.com/title/032174113">http://www.informit.com/title/032174113</a> 上，第1章的代码目录包含了头文件 Sales_item.h。将它拷贝到你自己的工作目录中。用它编写一个程序，读取一组书籍销售记录，将每条记录打印到标准输出上。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Sales_item.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Sales_item item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;main &lt; data&#x2F;add_item<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">0-201-78345-X 3 60 200-201-78345-X 2 50 25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习1-21"><a href="#练习1-21" class="headerlink" title="练习1.21"></a>练习1.21</h2><p>编写程序，读取两个 ISBN 相同的 Sales_item 对象，输出他们的和。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Sales_item.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_item item_1<span class="token punctuation">;</span>    Sales_item item_2<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> item_1<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item_1 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> item_2<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item_2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum of sale items: "</span> <span class="token operator">&lt;&lt;</span> item_1 <span class="token operator">+</span> item_2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;main &lt; data&#x2F;add_item<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">0-201-78345-X 3 60 200-201-78345-X 2 50 25sum of sale items: 0-201-78345-X 5 110 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习1-22"><a href="#练习1-22" class="headerlink" title="练习1.22"></a>练习1.22</h2><p>编写程序，读取多个具有相同 ISBN 的销售记录，输出所有记录的和。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Sales_item.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_item sum_item<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> sum_item<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sum_item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Sales_item item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> item<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum_item <span class="token operator">+=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum of sale items: "</span> <span class="token operator">&lt;&lt;</span> sum_item <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;main &lt; data&#x2F;add_item<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">0-201-78345-X 3 60 200-201-78345-X 2 50 25sum of sale items: 0-201-78345-X 5 110 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习1-23"><a href="#练习1-23" class="headerlink" title="练习1.23"></a>练习1.23</h2><p>编写程序，读取多条销售记录，并统计每个 ISBN（每本书）有几条销售记录。</p><h2 id="练习1-24"><a href="#练习1-24" class="headerlink" title="练习1.24"></a>练习1.24</h2><p>输入表示多个 ISBN 的多条销售记录来测试上一个程序，每个 ISBN 的记录应该聚在一起。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Sales_item.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_item total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> total<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Sales_item trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> trans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                total <span class="token operator">+=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;main &lt; data&#x2F;book_sales<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">0-201-70353-X 4 99.96 24.990-201-82470-1 4 181.56 45.390-201-88954-4 16 198 12.3750-399-82477-1 5 226.95 45.390-201-78345-X 5 110 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习1-25"><a href="#练习1-25" class="headerlink" title="练习1.25"></a>练习1.25</h2><p>借助网站上的<code>Sales_item.h</code>头文件，编译并运行本节给出的书店程序。</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案8</title>
      <link href="2021/04/10/excersize/ch08/"/>
      <url>2021/04/10/excersize/ch08/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-IO库"><a href="#第八章-IO库" class="headerlink" title="第八章 IO库"></a>第八章 IO库</h1><h2 id="练习8-1"><a href="#练习8-1" class="headerlink" title="练习8.1"></a>练习8.1</h2><blockquote><p>编写函数，接受一个<code>istream&amp;</code>参数，返回值类型也是<code>istream&amp;</code>。此函数须从给定流中读取数据，直至遇到文件结束标识时停止。它将读取的数据打印在标准输出上。完成这些操作后，在返回流之前，对流进行复位，使其处于有效状态。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">>></span> buf<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    is<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-2"><a href="#练习8-2" class="headerlink" title="练习8.2"></a>练习8.2</h2><blockquote><p>测试函数，调用参数为<code>cin</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istream<span class="token punctuation">;</span>istream<span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">>></span> buf<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    is<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    istream<span class="token operator">&amp;</span> is <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> is<span class="token punctuation">.</span><span class="token function">rdstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-3"><a href="#练习8-3" class="headerlink" title="练习8.3"></a>练习8.3</h2><blockquote><p>什么情况下，下面的<code>while</code>循环会终止？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token comment">/*  ...    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>如<code>badbit</code>、<code>failbit</code>、<code>eofbit</code> 的任一个被置位，那么检测流状态的条件会失败。</p><h2 id="练习8-4"><a href="#练习8-4" class="headerlink" title="练习8.4"></a>练习8.4</h2><blockquote><p>编写函数，以读模式打开一个文件，将其内容读入到一个<code>string</code>的<code>vector</code>中，将每一行作为一个独立的元素存于<code>vector</code>中。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ReadFileToVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> fileName<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string buf<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-5"><a href="#练习8-5" class="headerlink" title="练习8.5"></a>练习8.5</h2><blockquote><p>重写上面的程序，将每个单词作为一个独立的元素进行存储。<br>解：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ReadFileToVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> fileName<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string buf<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ifs <span class="token operator">>></span> buf<span class="token punctuation">)</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-6"><a href="#练习8-6" class="headerlink" title="练习8.6"></a>练习8.6</h2><blockquote><p>重写7.1.1节的书店程序，从一个文件中读取交易记录。将文件名作为一个参数传递给<code>main</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../ch07/ex7_26.h"</span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sales_data total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Sales_data trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-7"><a href="#练习8-7" class="headerlink" title="练习8.7"></a>练习8.7</h2><blockquote><p>修改上一节的书店程序，将结果保存到一个文件中。将输出文件名作为第二个参数传递给<code>main</code>函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../ch07/ex7_26.h"</span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ofstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ofstream <span class="token function">output</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Sales_data total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Sales_data trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-8"><a href="#练习8-8" class="headerlink" title="练习8.8"></a>练习8.8</h2><blockquote><p>修改上一题的程序，将结果追加到给定的文件末尾。对同一个输出文件，运行程序至少两次，检验数据是否得以保留。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../ch07/ex7_26.h"</span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ofstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">input</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ofstream <span class="token function">output</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        Sales_data total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Sales_data trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-9"><a href="#练习8-9" class="headerlink" title="练习8.9"></a>练习8.9</h2><blockquote><p>使用你为8.1.2节第一个练习所编写的函数打印一个<code>istringstream</code>对象的内容。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istream<span class="token punctuation">;</span>istream<span class="token operator">&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">>></span> buf<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> buf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    is<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>istringstream <span class="token function">iss</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>iss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-10"><a href="#练习8-10" class="headerlink" title="练习8.10"></a>练习8.10</h2><blockquote><p>编写程序，将来自一个文件中的行保存在一个<code>vector</code>中。然后使用一个<code>istringstream</code>从<code>vector</code>读取数据元素，每次读取一个单词。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"../data/book.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vecLine<span class="token punctuation">;</span>    string line<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>        vecLine<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> vecLine<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        istringstream <span class="token function">iss</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        string word<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iss <span class="token operator">>></span> word<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> word <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-11"><a href="#练习8-11" class="headerlink" title="练习8.11"></a>练习8.11</h2><blockquote><p>本节的程序在外层<code>while</code>循环中定义了<code>istringstream</code>对象。如果<code>record</code>对象定义在循环之外，你需要对程序进行怎样的修改？重写程序，将<code>record</code>的定义移到<code>while</code>循环之外，验证你设想的修改方法是否正确。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">PersonInfo</span> <span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> phones<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string line<span class="token punctuation">,</span> word<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span> people<span class="token punctuation">;</span>    istringstream record<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        PersonInfo info<span class="token punctuation">;</span>        record<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        record<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        record <span class="token operator">>></span> info<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">>></span> word<span class="token punctuation">)</span>            info<span class="token punctuation">.</span>phones<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p <span class="token operator">:</span> people<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> p<span class="token punctuation">.</span>phones<span class="token punctuation">)</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-12"><a href="#练习8-12" class="headerlink" title="练习8.12"></a>练习8.12</h2><blockquote><p>我们为什么没有在<code>PersonInfo</code>中使用类内初始化？</p></blockquote><p>解：</p><p>因为这里只需要聚合类就够了，所以没有必要在<code>PersionInfo</code>中使用类内初始化。</p><h2 id="练习8-13"><a href="#练习8-13" class="headerlink" title="练习8.13"></a>练习8.13</h2><blockquote><p>重写本节的电话号码程序，从一个命名文件而非<code>cin</code>读取数据。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ostringstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>isdigit<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">PersonInfo</span> <span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> phones<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"../data/phonenumbers.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"no phone numbers?"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string line<span class="token punctuation">,</span> word<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span> people<span class="token punctuation">;</span>    istringstream record<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        PersonInfo info<span class="token punctuation">;</span>        record<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        record<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        record <span class="token operator">>></span> info<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">>></span> word<span class="token punctuation">)</span>            info<span class="token punctuation">.</span>phones<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>entry <span class="token operator">:</span> people<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ostringstream formatted<span class="token punctuation">,</span> badNums<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>nums <span class="token operator">:</span> entry<span class="token punctuation">.</span>phones<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> badNums <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">;</span>            <span class="token keyword">else</span> formatted <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> formatted<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"input error: "</span> <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name                 <span class="token operator">&lt;&lt;</span> <span class="token string">" invalid number(s) "</span> <span class="token operator">&lt;&lt;</span> badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习8-14"><a href="#练习8-14" class="headerlink" title="练习8.14"></a>练习8.14</h2><blockquote><p>我们为什么将<code>entry</code>和<code>nums</code>定义为<code>const auto&amp;</code>？</p></blockquote><p>解：</p><p>它们都是类类型，因此使用引用避免拷贝。<br>在循环当中不会改变它们的值，因此用<code>const</code>。</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案4</title>
      <link href="2021/04/10/excersize/ch04/"/>
      <url>2021/04/10/excersize/ch04/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-表达式"><a href="#第四章-表达式" class="headerlink" title="第四章 表达式"></a>第四章 表达式</h1><h2 id="练习4-1"><a href="#练习4-1" class="headerlink" title="练习4.1"></a>练习4.1</h2><p>表达式<code>5 + 10 * 20 / 2</code>的求值结果是多少？</p><p>解：</p><p>等价于<code>5 + ((10 * 20) / 2) = 105</code></p><h2 id="练习4-2"><a href="#练习4-2" class="headerlink" title="练习4.2"></a>练习4.2</h2><p>根据4.12节中的表，在下述表达式的合理位置添加括号，使得添加括号后运算对象的组合顺序与添加括号前一致。<br>(a) <code>*vec.begin()</code><br>(b) <code>*vec.begin() + 1</code></p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习4-3"><a href="#练习4-3" class="headerlink" title="练习4.3"></a>练习4.3</h2><p>C++语言没有明确规定大多数二元运算符的求值顺序，给编译器优化留下了余地。这种策略实际上是在代码生成效率和程序潜在缺陷之间进行了权衡，你认为这可以接受吗？请说出你的理由。</p><p>解：</p><p>可以接受。C++的设计思想是尽可能地“相信”程序员，将效率最大化。然而这种思想却有着潜在的危害，就是无法控制程序员自身引发的错误。因此 Java 的诞生也是必然，Java的思想就是尽可能地“不相信”程序员。</p><h2 id="练习4-4"><a href="#练习4-4" class="headerlink" title="练习4.4"></a>练习4.4</h2><p>在下面的表达式中添加括号，说明其求值过程及最终结果。编写程序编译该（不加括号的）表达式并输出结果验证之前的推断。</p><p><code>12 / 3 * 4 + 5 * 15 + 24 % 4 / 2</code></p><p>解：</p><p><code>((12 / 3) * 4) + (5 * 15) + ((24 % 4) / 2) = 16 + 75 + 0 = 91</code></p><h2 id="练习4-5"><a href="#练习4-5" class="headerlink" title="练习4.5"></a>练习4.5</h2><p>写出下列表达式的求值结果。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">/</span> <span class="token number">5</span>  <span class="token comment">// -90+4 = -86</span><span class="token operator">-</span><span class="token number">30</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">21</span> <span class="token operator">/</span> <span class="token number">5</span>  <span class="token comment">// -30+63/5 = -30+12 = -18</span><span class="token number">30</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">21</span> <span class="token operator">%</span> <span class="token number">5</span>   <span class="token comment">// 10*21%5 = 210%5 = 0</span><span class="token operator">-</span><span class="token number">30</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">21</span> <span class="token operator">%</span> <span class="token number">4</span>  <span class="token comment">// -10*21%4 = -210%4 = -2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习4-6"><a href="#练习4-6" class="headerlink" title="练习4.6"></a>练习4.6</h2><p>写出一条表达式用于确定一个整数是奇数还是偶数。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">/* ... */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token comment">/* ... */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习4-7"><a href="#练习4-7" class="headerlink" title="练习4.7"></a>练习4.7</h2><p>溢出是何含义？写出三条将导致溢出的表达式。</p><p>解：</p><p>当计算的结果超出该类型所能表示的范围时就会产生溢出。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">short</span> svalue <span class="token operator">=</span> <span class="token number">32767</span><span class="token punctuation">;</span> <span class="token operator">++</span>svalue<span class="token punctuation">;</span> <span class="token comment">// -32768</span><span class="token keyword">unsigned</span> uivalue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>uivalue<span class="token punctuation">;</span>  <span class="token comment">// 4294967295</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> usvalue <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span> <span class="token operator">++</span>usvalue<span class="token punctuation">;</span>  <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习4-8"><a href="#练习4-8" class="headerlink" title="练习4.8"></a>练习4.8</h2><p>说明在逻辑与、逻辑或及相等性运算符中运算对象的求值顺序。</p><p>解：</p><ul><li>逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。这种策略称为 <strong>短路求值</strong>。</li><li>相等性运算符未定义求值顺序。</li></ul><h2 id="练习4-9"><a href="#练习4-9" class="headerlink" title="练习4.9"></a>练习4.9</h2><p>解释在下面的<code>if</code>语句中条件部分的判断过程。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cp <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>cp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>首先判断<code>cp</code>，<code>cp</code> 不是一个空指针，因此<code>cp</code>为真。然后判断<code>*cp</code>，<code>*cp</code> 的值是字符<code>&#39;H&#39;</code>，非0。因此最后的结果为真。</p><h2 id="练习4-10"><a href="#练习4-10" class="headerlink" title="练习4.10"></a>练习4.10</h2><p>为<code>while</code>循环写一个条件，使其从标准输入中读取整数，遇到<code>42</code>时停止。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">42</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习4-11"><a href="#练习4-11" class="headerlink" title="练习4.11"></a>练习4.11</h2><p>书写一条表达式用于测试4个值a、b、c、d的关系，确保a大于b、b大于c、c大于d。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a<span class="token operator">></span>b <span class="token operator">&amp;&amp;</span> b<span class="token operator">></span>c <span class="token operator">&amp;&amp;</span> c<span class="token operator">></span>d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习4-12"><a href="#练习4-12" class="headerlink" title="练习4.12"></a>练习4.12</h2><p>假设<code>i</code>、<code>j</code>和<code>k</code>是三个整数，说明表达式<code>i != j &lt; k</code>的含义。</p><p>解：</p><p>这个表达式等于<code>i != (j &lt; k)</code>。首先得到<code>j &lt; k</code>的结果为<code>true</code>或<code>false</code>，转换为整数值是<code>1</code>或<code>0</code>，然后判断<code>i</code>不等于<code>1</code>或<code>0</code> ，最终的结果为<code>bool</code>值。</p><h2 id="练习4-13"><a href="#练习4-13" class="headerlink" title="练习4.13"></a>练习4.13</h2><p>在下述语句中，当赋值完成后 i 和 d 的值分别是多少？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">double</span> d<span class="token punctuation">;</span>d <span class="token operator">=</span> i <span class="token operator">=</span> <span class="token number">3.5</span><span class="token punctuation">;</span> <span class="token comment">// i = 3, d = 3.0</span>i <span class="token operator">=</span> d <span class="token operator">=</span> <span class="token number">3.5</span><span class="token punctuation">;</span> <span class="token comment">// d = 3.5, i = 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习4-14"><a href="#练习4-14" class="headerlink" title="练习4.14"></a>练习4.14</h2><p>执行下述 if 语句后将发生什么情况？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">=</span> i<span class="token punctuation">)</span>   <span class="token comment">// 编译错误。赋值运算符左侧必须是一个可修改的左值。而字面值是右值。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">)</span>   <span class="token comment">// true.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习4-15"><a href="#练习4-15" class="headerlink" title="练习4.15"></a>练习4.15</h2><p>下面的赋值是非法的，为什么？应该如何修改？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> dval<span class="token punctuation">;</span> <span class="token keyword">int</span> ival<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>pi<span class="token punctuation">;</span>dval <span class="token operator">=</span> ival <span class="token operator">=</span> pi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：<br><code>p</code>是指针，不能赋值给<code>int</code>，应该改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dval <span class="token operator">=</span> ival <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习4-16"><a href="#练习4-16" class="headerlink" title="练习4.16"></a>练习4.16</h2><p>尽管下面的语句合法，但它们实际执行的行为可能和预期并不一样，为什么？应该如何修改？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">getPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token function">getPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习4-17"><a href="#练习4-17" class="headerlink" title="练习4.17"></a>练习4.17</h2><p>说明前置递增运算符和后置递增运算符的区别。</p><p>解：</p><p>前置递增运算符将对象本身作为左值返回，而后置递增运算符将对象原始值的副本作为右值返回。</p><h2 id="练习4-18"><a href="#练习4-18" class="headerlink" title="练习4.18"></a>练习4.18</h2><p>如果132页那个输出<code>vector</code>对象元素的<code>while</code>循环使用前置递增运算符，将得到什么结果？</p><p>解：</p><p>将会从第二个元素开始取值，并且最后对<code>v.end()</code>进行取值，结果是未定义的。</p><h2 id="练习4-19"><a href="#练习4-19" class="headerlink" title="练习4.19"></a>练习4.19</h2><p>假设<code>ptr</code>的类型是指向<code>int</code>的指针、<code>vec</code>的类型是<code>vector</code>、<code>ival</code>的类型是<code>int</code>，说明下面的表达式是何含义？如果有表达式不正确，为什么？应该如何修改？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> ptr <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>ptr<span class="token operator">++</span>  <span class="token punctuation">(</span>b<span class="token punctuation">)</span> ival<span class="token operator">++</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ival</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> vec<span class="token punctuation">[</span>ival<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> vec<span class="token punctuation">[</span>ival<span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 判断<code>ptr</code>不是一个空指针，并且<code>ptr</code>当前指向的元素的值也为真，然后将<code>ptr</code>指向下一个元素</li><li>(b) 判断<code>ival</code>的值为真，并且<code>(ival + 1)</code>的值也为真</li><li>(c) 表达式有误。C++并没有规定<code>&lt;=</code>运算符两边的求值顺序，应该改为<code>vec[ival] &lt;= vec[ival+1]</code></li></ul><h2 id="练习4-20"><a href="#练习4-20" class="headerlink" title="练习4.20"></a>练习4.20</h2><p>假设<code>iter</code>的类型是<code>vector::iterator</code>, 说明下面的表达式是否合法。如果合法，表达式的含义是什么？如果不合法，错在何处？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">*</span>iter<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">*</span>iter<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> iter<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">++</span><span class="token operator">*</span>iter<span class="token punctuation">;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> iter<span class="token operator">++</span><span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a)合法。返回迭代器所指向的元素，然后迭代器递增。</li><li>(b)不合法。因为<code>vector</code>元素类型是<code>string</code>，没有<code>++</code>操作。</li><li>(c)不合法。这里应该加括号。</li><li>(d)合法。判断迭代器当前的元素是否为空。</li><li>(e)不合法。<code>string</code>类型没有<code>++</code>操作。</li><li>(f)合法。判断迭代器当前元素是否为空，然后迭代器递增。</li></ul><h2 id="练习4-21"><a href="#练习4-21" class="headerlink" title="练习4.21"></a>练习4.21</h2><p>编写一段程序，使用条件运算符从<code>vector</code>中找到哪些元素的值是奇数，然后将这些奇数值翻倍。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> ivec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习4-22"><a href="#练习4-22" class="headerlink" title="练习4.22"></a>练习4.22</h2><p>本节的示例程序将成绩划分为<code>high pass</code>、<code>pass</code> 和 <code>fail</code> 三种，扩展该程序使其进一步将 60 分到 75 分之间的成绩设定为<code>low pass</code>。要求程序包含两个版本：一个版本只使用条件运算符；另一个版本使用1个或多个<code>if</code>语句。哪个版本的程序更容易理解呢？为什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> g<span class="token punctuation">;</span> cin <span class="token operator">>></span> g<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> result <span class="token operator">=</span> g <span class="token operator">></span> <span class="token number">90</span> <span class="token operator">?</span> <span class="token string">"high pass"</span> <span class="token operator">:</span> g <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"fail"</span> <span class="token operator">:</span> g <span class="token operator">&lt;</span> <span class="token number">75</span> <span class="token operator">?</span> <span class="token string">"low pass"</span> <span class="token operator">:</span> <span class="token string">"pass"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// -------------------------</span><span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">)</span>         cout <span class="token operator">&lt;&lt;</span> <span class="token string">"high pass"</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"fail"</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;</span> <span class="token number">75</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"low pass"</span><span class="token punctuation">;</span><span class="token keyword">else</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"pass"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个版本容易理解。当条件运算符嵌套层数变多之后，代码的可读性急剧下降。而<code>if else</code>的逻辑很清晰。</p><h2 id="练习4-23"><a href="#练习4-23" class="headerlink" title="练习4.23"></a>练习4.23</h2><p>因为运算符的优先级问题，下面这条表达式无法通过编译。根据4.12节中的表指出它的问题在哪里？应该如何修改？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s <span class="token operator">=</span> <span class="token string">"word"</span><span class="token punctuation">;</span>string pl <span class="token operator">=</span> s <span class="token operator">+</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'s'</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">"s"</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>加法运算符的优先级高于条件运算符。因此要改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string pl <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'s'</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">"s"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习4-24"><a href="#练习4-24" class="headerlink" title="练习4.24"></a>练习4.24</h2><p>本节的示例程序将成绩划分为<code>high pass</code>、<code>pass</code>、和<code>fail</code>三种，它的依据是条件运算符满足右结合律。假如条件运算符满足的是左结合律，求值的过程将是怎样的？</p><p>解：</p><p>如果条件运算符满足的是左结合律。那么</p><p><code>finalgrade = (grade &gt; 90) ? &quot;high pass&quot; : (grade &lt; 60) ? &quot;fail&quot; : &quot;pass&quot;;</code><br>等同于<br><code>finalgrade = ((grade &gt; 90) ? &quot;high pass&quot; : (grade &lt; 60)) ? &quot;fail&quot; : &quot;pass&quot;;</code><br>假如此时 <code>grade &gt; 90</code> ，第一个条件表达式的结果是 <code>&quot;high pass&quot;</code> ，而字符串字面值的类型是 <code>const char *</code>，非空所以为真。因此第二个条件表达式的结果是 <code>&quot;fail&quot;</code>。这样就出现了自相矛盾的逻辑。</p><h2 id="练习4-25"><a href="#练习4-25" class="headerlink" title="练习4.25"></a>练习4.25</h2><p>如果一台机器上<code>int</code>占32位、<code>char</code>占8位，用的是<code>Latin-1</code>字符集，其中字符<code>&#39;q&#39;</code> 的二进制形式是<code>01110001</code>，那么表达式<code>~&#39;q&#39; &lt;&lt; 6</code>的值是什么？</p><p>解：</p><p>首先将<code>char</code>类型提升为<code>int</code>类型，即<code>00000000 00000000 00000000 01110001</code>，然后取反，再左移6位，结果是-7296。</p><h2 id="练习4-26"><a href="#练习4-26" class="headerlink" title="练习4.26"></a>练习4.26</h2><p>在本节关于测验成绩的例子中，如果使用<code>unsigned int</code> 作为<code>quiz1</code> 的类型会发生什么情况？</p><p>解：</p><p>在有的机器上，<code>unsigned int</code> 类型可能只有 16 位，因此结果是未定义的。</p><h2 id="练习4-27"><a href="#练习4-27" class="headerlink" title="练习4.27"></a>练习4.27</h2><p>下列表达式的结果是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> ul1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> ul2 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> ul1 <span class="token operator">&amp;</span> <span class="token function">ul2</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> ul1 <span class="token operator">|</span> <span class="token function">ul2</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> ul1 <span class="token operator">&amp;&amp;</span> <span class="token function">ul2</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> ul1 <span class="token operator">||</span> ul2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 3</li><li>(b) 7</li><li>(c) true</li><li>(d) ture</li></ul><h2 id="练习4-28"><a href="#练习4-28" class="headerlink" title="练习4.28"></a>练习4.28</h2><p>编写一段程序，输出每一种内置类型所占空间的大小。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"bool:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"char:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"wchar_t:\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">wchar_t</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"char16_t:\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char16_t</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"char32_t:\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char32_t</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"short:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"int:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"long:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"long long:\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"float:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"double:\t\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"long double:\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" bytes"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">bool:           1 byteschar:           1 byteswchar_t:        4 byteschar16_t:       2 byteschar32_t:       4 bytesshort:          2 bytesint:            4 byteslong:           8 byteslong long:      8 bytesfloat:          4 bytesdouble:         8 byteslong double:    16 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习4-29"><a href="#练习4-29" class="headerlink" title="练习4.29"></a>练习4.29</h2><p>推断下面代码的输出结果并说明理由。实际运行这段程序，结果和你想象的一样吗？如不一样，为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> x<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>第一个输出结果是 10。第二个结果1,此处用法不合理不是未定义，参考<a href="https://www.geeksforgeeks.org/using-sizof-operator-with-array-paratmeters/%E3%80%82">https://www.geeksforgeeks.org/using-sizof-operator-with-array-paratmeters/。</a></p><h2 id="练习4-30"><a href="#练习4-30" class="headerlink" title="练习4.30"></a>练习4.30</h2><p>根据4.12节中的表，在下述表达式的适当位置加上括号，使得加上括号之后的表达式的含义与原来的含义相同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">sizeof</span> x <span class="token operator">+</span> <span class="token function">y</span>      <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">sizeof</span> p<span class="token operator">-></span>mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">sizeof</span> a <span class="token operator">&lt;</span> <span class="token function">b</span>     <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">sizeof</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">y</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token operator">-></span>mem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">b</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习4-31"><a href="#练习4-31" class="headerlink" title="练习4.31"></a>练习4.31</h2><p>本节的程序使用了前置版本的递增运算符和递减运算符，解释为什么要用前置版本而不用后置版本。要想使用后置版本的递增递减运算符需要做哪些改动？使用后置版本重写本节的程序。</p><p>解：</p><p>在4.5节（132页）已经说过了，除非必须，否则不用递增递减运算符的后置版本。在这里要使用后者版本的递增递减运算符不需要任何改动。</p><h2 id="练习4-32"><a href="#练习4-32" class="headerlink" title="练习4.32"></a>练习4.32</h2><p>解释下面这个循环的含义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> ia<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> ia<span class="token punctuation">,</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ix <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> ptr <span class="token operator">!=</span> ia<span class="token operator">+</span>size<span class="token punctuation">;</span>    <span class="token operator">++</span>ix<span class="token punctuation">,</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>这个循环在遍历数组<code>ia</code>，指针<code>ptr</code>和整型<code>ix</code>都是起到一个循环计数的功能。</p><h2 id="练习4-33"><a href="#练习4-33" class="headerlink" title="练习4.33"></a>练习4.33</h2><p>根据4.12节中的表说明下面这条表达式的含义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">someValue <span class="token operator">?</span> <span class="token operator">++</span>x<span class="token punctuation">,</span> <span class="token operator">++</span>y <span class="token operator">:</span> <span class="token operator">--</span>x<span class="token punctuation">,</span> <span class="token operator">--</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>逗号表达式的优先级是最低的。因此这条表达式也等于：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>someValue <span class="token operator">?</span> <span class="token operator">++</span>x<span class="token punctuation">,</span> <span class="token operator">++</span>y <span class="token operator">:</span> <span class="token operator">--</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">--</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<code>someValue</code>的值为真，<code>x</code> 和 <code>y</code> 的值都自增并返回 <code>y</code> 值，然后丢弃<code>y</code>值，<code>y</code>递减并返回<code>y</code>值。如果<code>someValue</code>的值为假，<code>x</code> 递减并返回<code>x</code> 值，然后丢弃<code>x</code>值，<code>y</code>递减并返回<code>y</code>值。</p><h2 id="练习4-34"><a href="#练习4-34" class="headerlink" title="练习4.34"></a>练习4.34</h2><p>根据本节给出的变量定义，说明在下面的表达式中将发生什么样的类型转换：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fval<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> dval <span class="token operator">=</span> fval <span class="token operator">+</span> ival<span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> dval <span class="token operator">+</span> ival <span class="token operator">*</span> cval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意每种运算符遵循的是左结合律还是右结合律。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> fval 转换为 <span class="token keyword">bool</span> 类型<span class="token punctuation">(</span>b<span class="token punctuation">)</span> ival 转换为 <span class="token keyword">float</span> ，相加的结果转换为 <span class="token keyword">double</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> cval 转换为 <span class="token keyword">int</span>，然后相乘的结果转换为 <span class="token keyword">double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习4-35"><a href="#练习4-35" class="headerlink" title="练习4.35"></a>练习4.35</h2><p>假设有如下的定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> cval<span class="token punctuation">;</span><span class="token keyword">int</span> ival<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ui<span class="token punctuation">;</span><span class="token keyword">float</span> fval<span class="token punctuation">;</span><span class="token keyword">double</span> dval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请回答在下面的表达式中发生了隐式类型转换吗？如果有，指出来。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> cval <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> fval <span class="token operator">=</span> ui <span class="token operator">-</span> ival <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> dval <span class="token operator">=</span> ui <span class="token operator">*</span> fval<span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> cval <span class="token operator">=</span> ival <span class="token operator">+</span> fval <span class="token operator">+</span> dval<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) <code>&#39;a&#39;</code> 转换为 <code>int</code> ，然后与 <code>3</code> 相加的结果转换为 <code>char</code></li><li>(b) <code>ival</code> 转换为 <code>double</code>，<code>ui</code> 转换为 <code>double</code>，结果转换为 <code>float</code></li><li>(c) <code>ui</code> 转换为 <code>float</code>，结果转换为 <code>double</code></li><li>(d) <code>ival</code> 转换为 <code>float</code>，与<code>fval</code>相加后的结果转换为 <code>double</code>，最后的结果转换为<code>char</code></li></ul><h2 id="练习4-36"><a href="#练习4-36" class="headerlink" title="练习4.36"></a>练习4.36</h2><p>假设 <code>i</code> 是<code>int</code>类型，<code>d</code> 是<code>double</code>类型，书写表达式 <code>i*=d</code> 使其执行整数类型的乘法而非浮点类型的乘法。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">i <span class="token operator">*=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习4-37"><a href="#练习4-37" class="headerlink" title="练习4.37"></a>练习4.37</h2><p>练习4.37<br>用命名的强制类型转换改写下列旧式的转换语句。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">double</span> d<span class="token punctuation">;</span> <span class="token keyword">const</span> string <span class="token operator">*</span>ps<span class="token punctuation">;</span> <span class="token keyword">char</span> <span class="token operator">*</span>pc<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>pv<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> pv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ps<span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> i <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> pv <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pv<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> pv <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> i <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">*</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> pv <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> pc <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习4-38"><a href="#练习4-38" class="headerlink" title="练习4.38"></a>练习4.38</h2><p>说明下面这条表达式的含义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> slope <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>j<span class="token operator">/</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>将<code>j/i</code>的结果值转换为<code>double</code>，然后赋值给<code>slope</code>。</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案18</title>
      <link href="2021/04/10/excersize/ch18/"/>
      <url>2021/04/10/excersize/ch18/</url>
      
        <content type="html"><![CDATA[<h1 id="第十八章-用于大型程序的工具"><a href="#第十八章-用于大型程序的工具" class="headerlink" title="第十八章 用于大型程序的工具"></a>第十八章 用于大型程序的工具</h1><h2 id="练习18-1"><a href="#练习18-1" class="headerlink" title="练习18.1"></a>练习18.1</h2><blockquote><p>在下列 <code>throw</code> 语句中异常对象的类型是什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> range_error <span class="token function">r</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> r<span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> exception <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>r<span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a): <code>range_error</code></li><li>(b): <code>exception</code></li></ul><h2 id="练习18-2"><a href="#练习18-2" class="headerlink" title="练习18.2"></a>练习18.2</h2><blockquote><p>当在指定的位置发生了异常时将出现什么情况？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">exercise</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ifstream <span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"ints"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处发生异常</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>指针<code>p</code>指向的内容不会被释放，将造成内存泄漏。</p><h2 id="练习18-3"><a href="#练习18-3" class="headerlink" title="练习18.3"></a>练习18.3</h2><blockquote><p>要想让上面的代码在发生异常时能正常工作，有两种解决方案。请描述这两种方法并实现它们。</p></blockquote><p>解：</p><p>方法一：不使用指针，使用对象：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">intArray</span><span class="token punctuation">&#123;</span>    <span class="token function">intArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span>    <span class="token function">intArray</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t s<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">intArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// data meber</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>intArray <span class="token function">p</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：使用智能指针：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习18-4"><a href="#练习18-4" class="headerlink" title="练习18.4"></a>练习18.4</h2><blockquote><p>查看图18.1所示的继承体系，说明下面的 <code>try</code> 块有何错误并修改它。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用 C++ 标准库</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> runtime_error <span class="token operator">&amp;</span>re<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>overflow_error eobj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>细化的异常类型应该写在前面：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用 C++ 标准库</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>overflow_error eobj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> runtime_error <span class="token operator">&amp;</span>re<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习18-5"><a href="#练习18-5" class="headerlink" title="练习18.5"></a>练习18.5</h2><blockquote><p>修改下面的<code>main</code>函数，使其能捕获图18.1所示的任何异常类型：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 使用 C++标准库</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>处理代码应该首先打印异常相关的错误信息，然后调用 <code>abort</code> 终止函数。</p><p>解：</p><p>略</p><h2 id="练习18-6"><a href="#练习18-6" class="headerlink" title="练习18.6"></a>练习18.6</h2><blockquote><p>已知下面的异常类型和 <code>catch</code> 语句，书写一个 <code>throw</code> 表达式使其创建的异常对象能被这些 <code>catch</code> 语句捕获：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">exceptionType</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>exceptionType <span class="token operator">*</span>pet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">typedef</span> <span class="token keyword">int</span> EXCPTYPE<span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>EXCPTYPE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token function">exceptionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token function">expection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">:</span> EXCPTYPE e <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习18-7"><a href="#练习18-7" class="headerlink" title="练习18.7"></a>练习18.7</h2><blockquote><p>根据第16章的介绍定义你自己的 <code>Blob</code> 和 <code>BlobPtr</code>，注意将构造函数写成函数<code>try</code>语句块。</p></blockquote><p>解：</p><p>略</p><h2 id="练习18-8"><a href="#练习18-8" class="headerlink" title="练习18.8"></a>练习18.8</h2><blockquote><p>回顾你之前编写的各个类，为它们的构造函数和析构函数添加正确的异常说明。如果你认为某个析构函数可能抛出异常，尝试修改代码使得该析构函数不会抛出异常。</p></blockquote><p>解：</p><p>略</p><h2 id="练习18-9"><a href="#练习18-9" class="headerlink" title="练习18.9"></a>练习18.9</h2><blockquote><p>定义本节描述的书店程序异常类，然后为 <code>Sales_data</code> 类重新编写一个复合赋值运算符并令其抛出一个异常。</p></blockquote><h2 id="练习18-10"><a href="#练习18-10" class="headerlink" title="练习18.10"></a>练习18.10</h2><blockquote><p>编写程序令其对两个 <code>ISBN</code> 编号不相同的对象执行 <code>Sales_data</code> 的加法运算。为该程序编写两个不同的版本：一个处理异常，另一个不处理异常。观察并比较这两个程序的行为，用心体会当出现了一个未被捕获的异常时程序会发生什么情况。</p></blockquote><p>解：</p><p>略</p><h2 id="练习18-11"><a href="#练习18-11" class="headerlink" title="练习18.11"></a>练习18.11</h2><blockquote><p>为什么 <code>what</code> 函数不应该抛出异常？</p></blockquote><p>解：</p><p>略</p><h2 id="练习18-12"><a href="#练习18-12" class="headerlink" title="练习18.12"></a>练习18.12</h2><blockquote><p>将你为之前各章练习编写的程序放置在各自的命名空间中。也就是说，命名空间chapter15包含<code>Query</code>程序的代码，命名空间chapter10包含<code>TextQuery</code>的代码；使用这种结构重新编译<code>Query</code>代码实例。</p></blockquote><p>解：</p><p>略</p><h2 id="练习18-13"><a href="#练习18-13" class="headerlink" title="练习18.13"></a>练习18.13</h2><blockquote><p>什么时候应该使用未命名的命名空间？</p></blockquote><p>解：</p><p>需要定义一系列静态的变量的时候。</p><p>参考：<a href="https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions">https://stackoverflow.com/questions/154469/unnamed-anonymous-namespaces-vs-static-functions</a></p><h2 id="练习18-14"><a href="#练习18-14" class="headerlink" title="练习18.14"></a>练习18.14</h2><blockquote><p>假设下面的 <code>operator*</code> 声明的是嵌套的命名空间 <code>mathLib::MatrixLib</code> 的一个成员：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> mathLib <span class="token punctuation">&#123;</span><span class="token keyword">namespace</span> MatrixLib <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">matrix</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix <span class="token keyword">operator</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> matrix <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> matrix <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请问你应该如何在全局作用域中声明该运算符？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mathLib<span class="token double-colon punctuation">::</span>MatrixLib<span class="token double-colon punctuation">::</span>matrix mathLib<span class="token double-colon punctuation">::</span>MatrixLib<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">const</span> mathLib<span class="token double-colon punctuation">::</span>MatrixLib<span class="token double-colon punctuation">::</span>matrix <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> mathLib<span class="token double-colon punctuation">::</span>MatrixLib<span class="token double-colon punctuation">::</span>matrix <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习18-15"><a href="#练习18-15" class="headerlink" title="练习18.15"></a>练习18.15</h2><blockquote><p>说明 <code>using</code> 指示与 <code>using</code> 声明的区别。</p></blockquote><p>解：</p><ul><li>一条<code>using</code>声明语句一次只引入命名空间的一个成员。</li><li><code>using</code> 指示使得某个特定的命名空间中所有的名字都可见。</li></ul><p>有点像python中的<code>import</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lib <span class="token keyword">import</span> func<span class="token keyword">from</span> lib <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习18-16"><a href="#练习18-16" class="headerlink" title="练习18.16"></a>练习18.16</h2><blockquote><p>假定在下面的代码中标记为“位置1”的地方是对命名空间 Exercise 中所有成员的<code>using</code>声明，请解释代码的含义。如果这些<code>using</code>声明出现在“位置2”又会怎样呢？将<code>using</code>声明变为<code>using</code>指示，重新回答之前的问题。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> Exercise <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ivar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> dvar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ivar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//位置1</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//位置2</span><span class="token keyword">double</span> dvar <span class="token operator">=</span> <span class="token number">3.1416</span><span class="token punctuation">;</span><span class="token keyword">int</span> iobj <span class="token operator">=</span> limit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>ivar<span class="token punctuation">;</span><span class="token operator">++</span><span class="token double-colon punctuation">::</span>ivar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>略</p><h2 id="练习18-17"><a href="#练习18-17" class="headerlink" title="练习18.17"></a>练习18.17</h2><blockquote><p>实际编写代码检验你对上一题的回答是否正确。</p></blockquote><p>解：</p><p>略</p><h2 id="练习18-18"><a href="#练习18-18" class="headerlink" title="练习18.18"></a>练习18.18</h2><blockquote><p>已知有下面的 <code>swap</code> 的典型定义，当 <code>mem1</code> 是一个 <code>string</code> 时程序使用 <code>swap</code> 的哪个版本？如果 <code>mem1</code> 是 <code>int</code> 呢？说明在这两种情况下名字查找的过程。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>T v1<span class="token punctuation">,</span> T v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>mem1<span class="token punctuation">,</span> v2<span class="token punctuation">.</span>mem1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换类型的其他成员</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>std::swap</code>是一个模板函数，如果是<code>string</code>会找到<code>string</code>版本；反之如果是<code>int</code>会找到<code>int</code>版本。</p><h2 id="练习18-19"><a href="#练习18-19" class="headerlink" title="练习18.19"></a>练习18.19</h2><blockquote><p>如果对 <code>swap</code> 的调用形如 <code>std::swap(v1.mem1, v2.mem1)</code> 将会发生什么情况？</p></blockquote><p>解：</p><p>会直接调用<code>std</code>版的<code>swap</code>，但对后面的调用无影响。</p><h2 id="练习18-20"><a href="#练习18-20" class="headerlink" title="练习18.20"></a>练习18.20</h2><blockquote><p>在下面的代码中，确定哪个函数与<code>compute</code>调用匹配。列出所有候选函数和可行函数，对于每个可行函数的实参与形参的匹配过程来说，发生了哪种类型转换？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> primerLib <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">using</span> primerLib<span class="token double-colon punctuation">::</span>compute<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">=</span> <span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>略</p><h2 id="练习18-21"><a href="#练习18-21" class="headerlink" title="练习18.21"></a>练习18.21</h2><blockquote><p>解释下列声明的含义，在它们当作存在错误吗？如果有，请指出来并说明错误的原因。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">CADVehicle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">CAD</span><span class="token punctuation">,</span> <span class="token class-name">Vehicle</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">DbiList</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">List</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">iostream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">istream</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">ostream</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习18-22"><a href="#练习18-22" class="headerlink" title="练习18.22"></a>练习18.22</h2><blockquote><p>已知存在如下所示的类的继承体系，其中每个类都定义了一个默认构造函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Y</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">X</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Y</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MI</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Z</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于下面的定义来说，构造函数的执行顺序是怎样的？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">MI mi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习18-23"><a href="#练习18-23" class="headerlink" title="练习18.23"></a>练习18.23</h2><blockquote><p>使用练习18.22的继承体系以及下面定义的类 <code>D</code>，同时假定每个类都定义了默认构造函数，请问下面的哪些类型转换是不被允许的？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">X</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>p <span class="token operator">*</span>pd <span class="token operator">=</span> <span class="token keyword">new</span> D<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> X <span class="token operator">*</span>px <span class="token operator">=</span> pd<span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> A <span class="token operator">*</span>pa <span class="token operator">=</span> pd<span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> B <span class="token operator">*</span>pb <span class="token operator">=</span> pd<span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> C <span class="token operator">*</span>pc <span class="token operator">=</span> pd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习18-24"><a href="#练习18-24" class="headerlink" title="练习18.24"></a>练习18.24</h2><blockquote><p>在第714页，我们使用一个指向 <code>Panda</code> 对象的 <code>Bear</code> 指针进行了一系列调用，假设我们使用的是一个指向 <code>Panda</code> 对象的 <code>ZooAnimal</code> 指针将会发生什么情况，请对这些调用语句逐一进行说明。</p></blockquote><h2 id="练习18-25"><a href="#练习18-25" class="headerlink" title="练习18.25"></a>练习18.25</h2><blockquote><p>假设我们有两个基类 <code>Base1</code> 和 <code>Base2</code> ，它们各自定义了一个名为 <code>print</code> 的虚成员和一个虚析构函数。从这两个基类中文名派生出下面的类，它们都重新定义了 <code>print</code> 函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">D1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base2</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MI</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">D1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">D2</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过下面的指针，指出在每个调用中分别使用了哪个函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Base1 <span class="token operator">*</span>pb1 <span class="token operator">=</span> <span class="token keyword">new</span> MI<span class="token punctuation">;</span>Base2 <span class="token operator">*</span>pb2 <span class="token operator">=</span> <span class="token keyword">new</span> MI<span class="token punctuation">;</span>D1 <span class="token operator">*</span>pd1 <span class="token operator">=</span> <span class="token keyword">new</span> MI<span class="token punctuation">;</span>D2 <span class="token operator">*</span>pd2 <span class="token operator">=</span> <span class="token keyword">new</span> MI<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> pb1<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> pd1<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> pd2<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">delete</span> pb2<span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">delete</span> pd1<span class="token punctuation">;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token keyword">delete</span> pd2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Base1</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> ival<span class="token punctuation">;</span><span class="token keyword">double</span> dval<span class="token punctuation">;</span><span class="token keyword">char</span> cval<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token operator">*</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Base2</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">double</span> fval<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">double</span> dval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string sval<span class="token punctuation">;</span><span class="token keyword">double</span> dval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">MI</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Derived</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base2</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token operator">*</span>ival<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> dvec<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习18-26"><a href="#练习18-26" class="headerlink" title="练习18.26"></a>练习18.26</h2><blockquote><p>已知如上所示的继承体系，下面对<code>print</code>的调用为什么是错误的？适当修改<code>MI</code>，令其对<code>print</code>的调用可以编译通过并正确执行。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">MI mi<span class="token punctuation">;</span>mi<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习18-27"><a href="#练习18-27" class="headerlink" title="练习18.27"></a>练习18.27</h2><blockquote><p>已知如上所示的继承体系，同时假定为MI添加了一个名为<code>foo</code>的函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> ival<span class="token punctuation">;</span><span class="token keyword">double</span> dval<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">MI</span><span class="token double-colon punctuation">::</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">double</span> cval<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> dval<span class="token punctuation">;</span><span class="token comment">//练习中的问题发生在此处</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> 列出在MI<span class="token double-colon punctuation">::</span>foo中可见的所有名字。<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 是否存在某个可见的名字是继承自多个基类的？<span class="token punctuation">(</span>c<span class="token punctuation">)</span> 将Base1的dval成员与Derived 的dval 成员求和后赋给dval的局部实例。<span class="token punctuation">(</span>d<span class="token punctuation">)</span> 将MI<span class="token double-colon punctuation">::</span>dvec的最后一个元素的值赋给Base2<span class="token double-colon punctuation">::</span>fval。<span class="token punctuation">(</span>e<span class="token punctuation">)</span> 将从Base1继承的cval赋给从Derived继承的sval的第一个字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习18-28"><a href="#练习18-28" class="headerlink" title="练习18.28"></a>练习18.28</h2><blockquote><p>已知存在如下的继承体系，在 <code>VMI</code> 类的内部哪些继承而来的成员无须前缀限定符就能直接访问？哪些必须有限定符才能访问？说明你的原因。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> ival<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">char</span> cval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> ival<span class="token punctuation">;</span><span class="token keyword">char</span> cval<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VMI</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Derived1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Derived2</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习18-29"><a href="#练习18-29" class="headerlink" title="练习18.29"></a>练习18.29</h2><blockquote><p>已知有如下所示的类继承关系：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Class</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MI</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">D1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">D2</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Final</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MI</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Class</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> 当作用于一个Final对象时，构造函数和析构函数的执行次序分别是什么？<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 在一个Final对象中有几个Base部分？几个Class部分？<span class="token punctuation">(</span>c<span class="token punctuation">)</span> 下面的哪些赋值运算符将造成编译错误？Base <span class="token operator">*</span>pb<span class="token punctuation">;</span> Class <span class="token operator">*</span>pc<span class="token punctuation">;</span> MI <span class="token operator">*</span>pmi<span class="token punctuation">;</span> D2 <span class="token operator">*</span>pd2<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> pb <span class="token operator">=</span> <span class="token keyword">new</span> Class<span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> Final<span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> pmi <span class="token operator">=</span> pb<span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> pd2 <span class="token operator">=</span> pmi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习18-30"><a href="#练习18-30" class="headerlink" title="练习18.30"></a>练习18.30</h2><blockquote><p>在<code>Base</code>中定义一个默认构造函数、一个拷贝构造函数和一个接受<code>int</code>形参的构造函数。在每个派生类中分别定义这三种构造函数，每个构造函数应该使用它的形参初始化其<code>Base</code>部分。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案19</title>
      <link href="2021/04/10/excersize/ch19/"/>
      <url>2021/04/10/excersize/ch19/</url>
      
        <content type="html"><![CDATA[<h1 id="第十九章-特殊工具与技术"><a href="#第十九章-特殊工具与技术" class="headerlink" title="第十九章 特殊工具与技术"></a>第十九章 特殊工具与技术</h1><h2 id="练习19-1"><a href="#练习19-1" class="headerlink" title="练习19.1"></a>练习19.1</h2><blockquote><p>使用 malloc 编写你自己的 operator new(sizt_t)函数，使用 free 编写operator delete(void *)函数。</p></blockquote><h2 id="练习19-2"><a href="#练习19-2" class="headerlink" title="练习19.2"></a>练习19.2</h2><blockquote><p>默认情况下，allocator 类使用 operator new 获取存储空间，然后使用 operator delete 释放它。利用上一题中的两个函数重新编译并运行你的 StrVec 程序。</p></blockquote><h2 id="练习19-3"><a href="#练习19-3" class="headerlink" title="练习19.3"></a>练习19.3</h2><blockquote><p>已知存在如下的类继承体系，其中每个类分别定义了一个公有的默认构造函数和一个析构函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面哪个 dynamic_cast 将失败？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> A <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token keyword">new</span> C<span class="token punctuation">;</span>B <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> B <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token keyword">new</span> B<span class="token punctuation">;</span>C <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> A <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token keyword">new</span> D<span class="token punctuation">;</span>B <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习19-4"><a href="#练习19-4" class="headerlink" title="练习19.4"></a>练习19.4</h2><blockquote><p>使用上一个练习定义的类改写下面的代码，将表达式*pa 转换成类型C&amp;：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>C <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>C<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//使用C的成员</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//使用A的成员</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习19-5"><a href="#练习19-5" class="headerlink" title="练习19.5"></a>练习19.5</h2><blockquote><p>在什么情况下你应该用 dynamic_cast 替代虚函数？</p></blockquote><h2 id="练习19-6"><a href="#练习19-6" class="headerlink" title="练习19.6"></a>练习19.6</h2><blockquote><p>编写一条表达式将 Query_base 指针动态转换为 AndQuery 指针。分别使用 AndQuery 的对象以及其他类型的对象测试转换是否有效。打印一条表示类型转换是否成功的信息，确保实际输出的结果与期望的一致。</p></blockquote><h2 id="练习19-7"><a href="#练习19-7" class="headerlink" title="练习19.7"></a>练习19.7</h2><blockquote><p>编写与上一个练习类似的转换，这一次将 Query_base 对象转换为 AndQuery 的引用。重复上面的测试过程，确保转换能正常工作。</p></blockquote><h2 id="练习19-8"><a href="#练习19-8" class="headerlink" title="练习19.8"></a>练习19.8</h2><blockquote><p>编写一条 typeid 表达式检查两个 Query_base 对象是否指向同一种类型。再检查该类型是否是 AndQuery。</p></blockquote><h2 id="练习19-9"><a href="#练习19-9" class="headerlink" title="练习19.9"></a>练习19.9</h2><blockquote><p>编写与本节最后一个程序类似的代码，令其打印你的编译器为一些常见类型所起的名字。如果你得到的输出结果与本书类似，尝试编写一个函数将这些字符串翻译成人们更容易读懂的形式。</p></blockquote><h2 id="练习19-10"><a href="#练习19-10" class="headerlink" title="练习19.10"></a>练习19.10</h2><blockquote><p>已知存在如下的类继承体系，其中每个类定义了一个默认公有的构造函数和一个虚析构函数。下面的语句将打印哪些类型名字？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> A <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token keyword">new</span> C<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> C cobj<span class="token punctuation">;</span>A<span class="token operator">&amp;</span> ra <span class="token operator">=</span> cobj<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ra<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> B <span class="token operator">*</span>px <span class="token operator">=</span> <span class="token keyword">new</span> B<span class="token punctuation">;</span>A<span class="token operator">&amp;</span> ra <span class="token operator">=</span> <span class="token operator">*</span>px<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>ra<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习19-11"><a href="#练习19-11" class="headerlink" title="练习19.11"></a>练习19.11</h2><blockquote><p>普通的数据指针和指向数据成员的指针有何区别？</p></blockquote><h2 id="练习19-12"><a href="#练习19-12" class="headerlink" title="练习19.12"></a>练习19.12</h2><blockquote><p>定义一个成员指针，令其可以指向 Screen 类的 cursor 成员。通过该指针获得 Screen::cursor 的值。</p></blockquote><h2 id="练习19-13"><a href="#练习19-13" class="headerlink" title="练习19.13"></a>练习19.13</h2><blockquote><p>定义一个类型，使其可以表示指向 Sales_data 类的 bookNo 成员的指针。</p></blockquote><h2 id="练习19-14"><a href="#练习19-14" class="headerlink" title="练习19.14"></a>练习19.14</h2><blockquote><p>下面的代码合法吗？如果合法，代码的含义是什么？如果不合法，解释原因。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> pmf <span class="token operator">=</span> <span class="token operator">&amp;</span>Screen<span class="token double-colon punctuation">::</span>get_cursor<span class="token punctuation">;</span>pmf <span class="token operator">=</span> <span class="token operator">&amp;</span>Screen<span class="token double-colon punctuation">::</span>get<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习19-15"><a href="#练习19-15" class="headerlink" title="练习19.15"></a>练习19.15</h2><blockquote><p>普通函数指针和指向成员函数的指针有何区别？</p></blockquote><h2 id="练习19-16"><a href="#练习19-16" class="headerlink" title="练习19.16"></a>练习19.16</h2><blockquote><p>声明一个类型别名，令其作为指向 Sales_data 的 avg_price 成员的指针的同义词。</p></blockquote><h2 id="练习19-17"><a href="#练习19-17" class="headerlink" title="练习19.17"></a>练习19.17</h2><blockquote><p>为 Screen 的所有成员函数类型各定义一个类型别名。</p></blockquote><h2 id="练习19-18"><a href="#练习19-18" class="headerlink" title="练习19.18"></a>练习19.18</h2><blockquote><p>编写一个函数，使用 count_if 统计在给定的 vector 中有多少个空 string。</p></blockquote><h2 id="练习19-19"><a href="#练习19-19" class="headerlink" title="练习19.19"></a>练习19.19</h2><blockquote><p>编写一个函数，令其接受vector<Sales_data>并查找平均价格高于某个值的第一个元素。</p></blockquote><h2 id="练习19-20"><a href="#练习19-20" class="headerlink" title="练习19.20"></a>练习19.20</h2><blockquote><p>将你的 QueryResult 类嵌套在 TextQuery 中，然后重新运行12.3.2节中使用了 TextQuery 的程序。</p></blockquote><h2 id="练习19-21"><a href="#练习19-21" class="headerlink" title="练习19.21"></a>练习19.21</h2><blockquote><p>编写你自己的 Token 类。</p></blockquote><h2 id="练习19-22"><a href="#练习19-22" class="headerlink" title="练习19.22"></a>练习19.22</h2><blockquote><p>为你的 Token 类添加一个 Sales_data 类型的成员。</p></blockquote><h2 id="练习19-23"><a href="#练习19-23" class="headerlink" title="练习19.23"></a>练习19.23</h2><blockquote><p>为你的 Token 类添加移动构造函数和移动赋值运算符。</p></blockquote><h2 id="练习19-24"><a href="#练习19-24" class="headerlink" title="练习19.24"></a>练习19.24</h2><blockquote><p>如果我们将一个 Token 对象付给它自己将发生什么情况？</p></blockquote><h2 id="练习19-25"><a href="#练习19-25" class="headerlink" title="练习19.25"></a>练习19.25</h2><blockquote><p>编写一系列赋值运算符，令其分别接收 union 中各种类型的值。</p></blockquote><h2 id="练习19-26"><a href="#练习19-26" class="headerlink" title="练习19.26"></a>练习19.26</h2><blockquote><p>说明下列声明语句的含义并判断它们是否合法：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token keyword">double</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记5</title>
      <link href="2021/04/10/notes/ch05/"/>
      <url>2021/04/10/notes/ch05/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-语句"><a href="#第五章-语句" class="headerlink" title="第五章 语句"></a>第五章 语句</h1><h2 id="简单语句"><a href="#简单语句" class="headerlink" title="简单语句"></a>简单语句</h2><ul><li><strong>表达式语句</strong>：一个表达式末尾加上分号，就变成了表达式语句。</li><li><strong>空语句</strong>：只有一个单独的分号。</li><li><strong>复合语句（块）</strong>：用花括号 <code>&#123;&#125;</code>包裹起来的语句和声明的序列。一个块就是一个作用域。</li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul><li><strong>悬垂else</strong>（dangling else）：用来描述在嵌套的<code>if else</code>语句中，如果<code>if</code>比<code>else</code>多时如何处理的问题。C++使用的方法是<code>else</code>匹配最近没有配对的<code>if</code>。</li></ul><h2 id="迭代语句"><a href="#迭代语句" class="headerlink" title="迭代语句"></a>迭代语句</h2><ul><li><strong>while</strong>：当不确定到底要迭代多少次时，使用 <code>while</code>循环比较合适，比如读取输入的内容。</li><li><strong>for</strong>： <code>for</code>语句可以省略掉 <code>init-statement</code>， <code>condition</code>和 <code>expression</code>的任何一个；<strong>甚至全部</strong>。</li><li><strong>范围for</strong>： <code>for (declaration: expression) statement</code></li></ul><h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><ul><li><strong>break</strong>：<code>break</code>语句负责终止离它最近的<code>while</code>、<code>do while</code>、<code>for</code>或者<code>switch</code>语句，并从这些语句之后的第一条语句开始继续执行。</li><li><strong>continue</strong>：终止最近的循环中的当前迭代并立即开始下一次迭代。只能在<code>while</code>、<code>do while</code>、<code>for</code>循环的内部。</li></ul><h2 id="try语句块和异常处理"><a href="#try语句块和异常处理" class="headerlink" title="try语句块和异常处理"></a>try语句块和异常处理</h2><ul><li><strong>throw表达式</strong>：异常检测部分使用 <code>throw</code>表达式来表示它遇到了无法处理的问题。我们说 <code>throw</code>引发 <code>raise</code>了异常。</li><li><strong>try语句块</strong>：以 <code>try</code>关键词开始，以一个或多个 <code>catch</code>字句结束。 <code>try</code>语句块中的代码抛出的异常通常会被某个 <code>catch</code>捕获并处理。 <code>catch</code>子句也被称为<strong>异常处理代码</strong>。</li><li><strong>异常类</strong>：用于在 <code>throw</code>表达式和相关的 <code>catch</code>子句之间传递异常的具体信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记1</title>
      <link href="2021/04/10/notes/ch01/"/>
      <url>2021/04/10/notes/ch01/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-开始"><a href="#第一章-开始" class="headerlink" title="第一章 开始"></a>第一章 开始</h1><h2 id="熟悉编译器"><a href="#熟悉编译器" class="headerlink" title="熟悉编译器"></a>熟悉编译器</h2><p>**g++**：</p><ul><li>编译：<code>g++ --std=c++11 ch01.cpp -o main</code></li><li>运行：<code>./prog1</code></li><li>查看运行状态：<code>echo $?</code></li><li>编译多个文件:<code>g++ ch2.cpp Sales_item.cc -o main</code></li></ul><p>输入 <code>g++ --help</code>，查看编译器选项：</p><pre class="line-numbers language-none"><code class="language-none">Usage: g++ [options] file...Options:  -pass-exit-codes         Exit with highest error code from a phase  --help                   Display this information  --target-help            Display target specific command line options  --help&#x3D;&#123;common|optimizers|params|target|warnings|[^]&#123;joined|separate|undocumented&#125;&#125;[,...]                           Display specific types of command line options  (Use &#39;-v --help&#39; to display command line options of sub-processes)  --version                Display compiler version information  -dumpspecs               Display all of the built in spec strings  -dumpversion             Display the version of the compiler  -dumpmachine             Display the compiler&#39;s target processor  -print-search-dirs       Display the directories in the compiler&#39;s search path  -print-libgcc-file-name  Display the name of the compiler&#39;s companion library  -print-file-name&#x3D;&lt;lib&gt;   Display the full path to library &lt;lib&gt;  -print-prog-name&#x3D;&lt;prog&gt;  Display the full path to compiler component &lt;prog&gt;  -print-multiarch         Display the target&#39;s normalized GNU triplet, used as                           a component in the library path  -print-multi-directory   Display the root directory for versions of libgcc  -print-multi-lib         Display the mapping between command line options and                           multiple library search directories  -print-multi-os-directory Display the relative path to OS libraries  -print-sysroot           Display the target libraries directory  -print-sysroot-headers-suffix Display the sysroot suffix used to find headers  -Wa,&lt;options&gt;            Pass comma-separated &lt;options&gt; on to the assembler  -Wp,&lt;options&gt;            Pass comma-separated &lt;options&gt; on to the preprocessor  -Wl,&lt;options&gt;            Pass comma-separated &lt;options&gt; on to the linker  -Xassembler &lt;arg&gt;        Pass &lt;arg&gt; on to the assembler  -Xpreprocessor &lt;arg&gt;     Pass &lt;arg&gt; on to the preprocessor  -Xlinker &lt;arg&gt;           Pass &lt;arg&gt; on to the linker  -save-temps              Do not delete intermediate files  -save-temps&#x3D;&lt;arg&gt;        Do not delete intermediate files  -no-canonical-prefixes   Do not canonicalize paths when building relative                           prefixes to other gcc components  -pipe                    Use pipes rather than intermediate files  -time                    Time the execution of each subprocess  -specs&#x3D;&lt;file&gt;            Override built-in specs with the contents of &lt;file&gt;  -std&#x3D;&lt;standard&gt;          Assume that the input sources are for &lt;standard&gt;  --sysroot&#x3D;&lt;directory&gt;    Use &lt;directory&gt; as the root directory for headers                           and libraries  -B &lt;directory&gt;           Add &lt;directory&gt; to the compiler&#39;s search paths  -v                       Display the programs invoked by the compiler  -###                     Like -v but options quoted and commands not executed  -E                       Preprocess only; do not compile, assemble or link  -S                       Compile only; do not assemble or link  -c                       Compile and assemble, but do not link  -o &lt;file&gt;                Place the output into &lt;file&gt;  -pie                     Create a position independent executable  -shared                  Create a shared library  -x &lt;language&gt;            Specify the language of the following input files                           Permissible languages include: c c++ assembler none                           &#39;none&#39; means revert to the default behavior of                           guessing the language based on the file&#39;s extension<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入 <code>g++ -v --help</code>可以看到更完整的指令。<br>例如还有些常用的：</p><pre class="line-numbers language-none"><code class="language-none">-h FILENAME, -soname FILENAME: Set internal name of shared library-I PROGRAM, --dynamic-linker PROGRAM: Set PROGRAM as the dynamic linker to use-l LIBNAME, --library LIBNAME: Search for library LIBNAME-L DIRECTORY, --library-path DIRECTORY: Add DIRECTORY to library search path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获得程序状态</strong>:</p><ul><li>windows: <code>echo %ERRORLEVEL%</code></li><li>UNIX: <code>echo $?</code></li></ul><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ul><li><code>#include &lt;iostream&gt;</code></li><li><code>std::cout &lt;&lt; &quot;hello&quot;</code></li><li><code>std::cin &gt;&gt; v1</code></li></ul><p>记住<code>&gt;&gt;</code>和<code>&lt;&lt;</code>返回的结果都是左操作数，也就是输入流和输出流本身。</p><p><strong>endl</strong>：这是一个被称为<strong>操纵符</strong>（manipulator）的特殊值，效果是结束当前行，并将设备关联的缓冲区（buffer）中的内容刷到设备中。</p><p>UNIX和Mac下键盘输入文件结束符：<code>ctrl+d</code>，Windows下：<code>ctrl+z</code></p><p><strong>头文件</strong>：类的类型一般存储在头文件中，标准库的头文件使用<code>&lt;&gt;</code>，非标准库的头文件使用<code>&quot;&quot;</code>。申明写在<code>.h</code>文件，定义实现写在<code>.cpp</code>文件。</p><p><strong>避免多次包含同一头文件</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SALESITEM_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SALESITEM_H</span></span><span class="token comment">// Definition of Sales_itemclass and related functions goes here</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员函数（类方法）</strong>：使用<code>.</code>调用。</p><p><strong>命名空间（namespace）</strong>：使用作用域运算符<code>::</code>调用。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>单行注释： <code>//</code></li><li>多行注释： <code>/**/</code>。编译器将<code>/*</code>和<code>*/</code>之间的内容都作为注释内容忽略。注意不能嵌套。</li></ul><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>循环执行，（直到条件（condition）为假。</p><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>循环头由三部分组成：</p><ul><li>一个初始化语句（init-statement）</li><li>一个循环条件（condition）</li><li>一个表达式（expression）</li></ul><h2 id="使用文件重定向"><a href="#使用文件重定向" class="headerlink" title="使用文件重定向"></a>使用文件重定向</h2><p><code>./main &lt;infile &gt;outfile</code></p>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记6</title>
      <link href="2021/04/10/notes/ch06/"/>
      <url>2021/04/10/notes/ch06/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-函数"><a href="#第六章-函数" class="headerlink" title="第六章 函数"></a>第六章 函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><ul><li><strong>函数定义</strong>：包括返回类型、函数名字和0个或者多个<strong>形参</strong>（parameter）组成的列表和函数体。</li><li><strong>调用运算符</strong>：调用运算符的形式是一对圆括号 <code>()</code>，作用于一个表达式，该表达式是函数或者指向函数的指针。</li><li>圆括号内是用逗号隔开的<strong>实参</strong>（argument）列表。</li><li>函数调用过程：<ul><li>1.主调函数（calling function）的执行被中断。</li><li>2.被调函数（called function）开始执行。</li></ul></li><li><strong>形参和实参</strong>：形参和实参的<strong>个数</strong>和<strong>类型</strong>必须匹配上。</li><li><strong>返回类型</strong>： <code>void</code>表示函数不返回任何值。函数的返回类型不能是数组类型或者函数类型，但可以是指向数组或者函数的指针。</li><li><strong>名字</strong>：名字的作用于是程序文本的一部分，名字在其中可见。</li></ul><h3 id="局部对象"><a href="#局部对象" class="headerlink" title="局部对象"></a>局部对象</h3><ul><li><strong>生命周期</strong>：对象的生命周期是程序执行过程中该对象存在的一段时间。</li><li><strong>局部变量</strong>（local variable）：形参和函数体内部定义的变量统称为局部变量。它对函数而言是局部的，对函数外部而言是<strong>隐藏</strong>的。</li><li><strong>自动对象</strong>：只存在于块执行期间的对象。当块的执行结束后，它的值就变成<strong>未定义</strong>的了。</li><li><strong>局部静态对象</strong>： <code>static</code>类型的局部变量，生命周期贯穿函数调用前后。</li></ul><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><ul><li><strong>函数声明</strong>：函数的声明和定义唯一的区别是声明无需函数体，用一个分号替代。函数声明主要用于描述函数的接口，也称<strong>函数原型</strong>。</li><li><strong>在头文件中进行函数声明</strong>：建议变量在头文件中声明；在源文件中定义。</li><li><strong>分离编译</strong>： <code>CC a.cc b.cc</code>直接编译生成可执行文件；<code>CC -c a.cc b.cc</code>编译生成对象代码<code>a.o b.o</code>； <code>CC a.o b.o</code>编译生成可执行文件。</li></ul><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul><li>形参初始化的机理和变量初始化一样。</li><li><strong>引用传递</strong>（passed by reference）：又称传引用调用（called by reference），指<strong>形参是引用类型</strong>，引用形参是它对应的实参的别名。</li><li><strong>值传递</strong>（passed by value）：又称传值调用（called by value），指实参的值是通过<strong>拷贝</strong>传递给形参。</li></ul><h3 id="传值参数"><a href="#传值参数" class="headerlink" title="传值参数"></a>传值参数</h3><ul><li>当初始化一个非引用类型的变量时，初始值被拷贝给变量。</li><li>函数对形参做的所有操作都不会影响实参。</li><li><strong>指针形参</strong>：常用在C中，<code>C++</code>建议使用引用类型的形参代替指针。</li></ul><h3 id="传引用参数"><a href="#传引用参数" class="headerlink" title="传引用参数"></a>传引用参数</h3><ul><li>通过使用引用形参，允许函数改变一个或多个实参的值。</li><li>引用形参直接关联到绑定的对象，而非对象的副本。</li><li>使用引用形参可以用于<strong>返回额外的信息</strong>。</li><li>经常用引用形参来避免不必要的复制。</li><li><code>void swap(int &amp;v1, int &amp;v2)</code></li><li>如果无需改变引用形参的值，最好将其声明为常量引用。</li></ul><h3 id="const形参和实参"><a href="#const形参和实参" class="headerlink" title="const形参和实参"></a>const形参和实参</h3><ul><li>形参的顶层<code>const</code>被忽略。<code>void func(const int i);</code>调用时既可以传入<code>const int</code>也可以传入<code>int</code>。</li><li>我们可以使用非常量初始化一个底层<code>const</code>对象，但是反过来不行。</li><li>在函数中，不能改变实参的<strong>局部副本</strong>。</li><li>尽量使用常量引用。</li></ul><h3 id="数组形参"><a href="#数组形参" class="headerlink" title="数组形参"></a>数组形参</h3><ul><li>当我们为函数传递一个数组时，实际上传递的是指向数组首元素的指针。</li><li>要注意数组的实际长度，不能越界。</li></ul><h3 id="main处理命令行选项"><a href="#main处理命令行选项" class="headerlink" title="main处理命令行选项"></a>main处理命令行选项</h3><ul><li><code>int main(int argc, char *argv[])&#123;...&#125;</code></li><li>第一个形参代表参数的个数；第二个形参是参数C风格字符串数组。</li></ul><h3 id="可变形参"><a href="#可变形参" class="headerlink" title="可变形参"></a>可变形参</h3><p><code>initializer_list</code>提供的操作（<code>C++11</code>）：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>initializer_list&lt;T&gt; lst;</code></td><td>默认初始化；<code>T</code>类型元素的空列表</td></tr><tr><td><code>initializer_list&lt;T&gt; lst&#123;a,b,c...&#125;;</code></td><td><code>lst</code>的元素数量和初始值一样多；<code>lst</code>的元素是对应初始值的副本；列表中的元素是<code>const</code>。</td></tr><tr><td><code>lst2(lst)</code></td><td>拷贝或赋值一个<code>initializer_list</code>对象不会拷贝列表中的元素；拷贝后，原始列表和副本共享元素。</td></tr><tr><td><code>lst2 = lst</code></td><td>同上</td></tr><tr><td><code>lst.size()</code></td><td>列表中的元素数量</td></tr><tr><td><code>lst.begin()</code></td><td>返回指向<code>lst</code>中首元素的指针</td></tr><tr><td><code>lst.end()</code></td><td>返回指向<code>lst</code>中微元素下一位置的指针</td></tr></tbody></table><p><code>initializer_list</code>使用demo：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">err_msg</span><span class="token punctuation">(</span>ErrCode e<span class="token punctuation">,</span> initializer_list<span class="token operator">&lt;</span>string<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span>msg <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> bed <span class="token operator">=</span> il<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> beg <span class="token operator">!=</span> il<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span> beg<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>beg <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">err_msg</span><span class="token punctuation">(</span><span class="token function">ErrCode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"functionX"</span><span class="token punctuation">,</span> "okay<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所有实参类型相同，可以使用 <code>initializer_list</code>的标准库类型。</li><li>实参类型不同，可以使用<code>可变参数模板</code>。</li><li>省略形参符： <code>...</code>，便于<code>C++</code>访问某些C代码，这些C代码使用了 <code>varargs</code>的C标准功能。</li></ul><h2 id="返回类型和return语句"><a href="#返回类型和return语句" class="headerlink" title="返回类型和return语句"></a>返回类型和return语句</h2><h3 id="无返回值函数"><a href="#无返回值函数" class="headerlink" title="无返回值函数"></a>无返回值函数</h3><p>没有返回值的 <code>return</code>语句只能用在返回类型是 <code>void</code>的函数中，返回 <code>void</code>的函数不要求非得有 <code>return</code>语句。</p><h3 id="有返回值函数"><a href="#有返回值函数" class="headerlink" title="有返回值函数"></a>有返回值函数</h3><ul><li><code>return</code>语句的返回值的类型必须和函数的返回类型相同，或者能够<strong>隐式地</strong>转换成函数的返回类型。</li><li>值的返回：返回的值用于初始化调用点的一个<strong>临时量</strong>，该临时量就是函数调用的结果。</li><li><strong>不要返回局部对象的引用或指针</strong>。</li><li><strong>引用返回左值</strong>：函数的返回类型决定函数调用是否是左值。调用一个返回引用的函数得到左值；其他返回类型得到右值。</li><li><strong>列表初始化返回值</strong>：函数可以返回花括号包围的值的列表。（<code>C++11</code>）</li><li><strong>主函数main的返回值</strong>：如果结尾没有<code>return</code>，编译器将隐式地插入一条返回0的<code>return</code>语句。返回0代表执行成功。</li></ul><h3 id="返回数组指针"><a href="#返回数组指针" class="headerlink" title="返回数组指针"></a>返回数组指针</h3><ul><li><code>Type (*function (parameter_list))[dimension]</code></li><li>使用类型别名： <code>typedef int arrT[10];</code> 或者 <code>using arrT = int[10;]</code>，然后 <code>arrT* func() &#123;...&#125;</code></li><li>使用 <code>decltype</code>： <code>decltype(odd) *arrPtr(int i) &#123;...&#125;</code></li><li><strong>尾置返回类型</strong>： 在形参列表后面以一个<code>-&gt;</code>开始：<code>auto func(int i) -&gt; int(*)[10]</code>（<code>C++11</code>）</li></ul><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><ul><li><strong>重载</strong>：如果同一作用域内几个函数名字相同但形参列表不同，我们称之为重载（overload）函数。</li><li><code>main</code>函数不能重载。</li><li><strong>重载和const形参</strong>：<ul><li>一个有顶层const的形参和没有它的函数无法区分。 <code>Record lookup(Phone* const)</code>和 <code>Record lookup(Phone*)</code>无法区分。</li><li>相反，是否有某个底层const形参可以区分。 <code>Record lookup(Account*)</code>和 <code>Record lookup(const Account*)</code>可以区分。</li></ul></li><li><strong>重载和作用域</strong>：若在内层作用域中声明名字，它将隐藏外层作用域中声明的同名实体，在不同的作用域中无法重载函数名。</li></ul><h2 id="特殊用途语言特性"><a href="#特殊用途语言特性" class="headerlink" title="特殊用途语言特性"></a>特殊用途语言特性</h2><h3 id="默认实参"><a href="#默认实参" class="headerlink" title="默认实参"></a>默认实参</h3><ul><li><code>string screen(sz ht = 24, sz wid = 80, char backgrnd = &#39; &#39;);</code></li><li>一旦某个形参被赋予了默认值，那么它之后的形参都必须要有默认值。</li></ul><h3 id="内联（inline）函数"><a href="#内联（inline）函数" class="headerlink" title="内联（inline）函数"></a>内联（inline）函数</h3><ul><li>普通函数的缺点：调用函数比求解等价表达式要慢得多。</li><li><code>inline</code>函数可以避免函数调用的开销，可以让编译器在编译时<strong>内联地展开</strong>该函数。</li><li><code>inline</code>函数应该在头文件中定义。</li></ul><h3 id="constexpr函数"><a href="#constexpr函数" class="headerlink" title="constexpr函数"></a>constexpr函数</h3><ul><li>指能用于常量表达式的函数。</li><li><code>constexpr int new_sz() &#123;return 42;&#125;</code></li><li>函数的返回类型及所有形参类型都要是字面值类型。</li><li><code>constexpr</code>函数应该在头文件中定义。</li></ul><h3 id="调试帮助"><a href="#调试帮助" class="headerlink" title="调试帮助"></a>调试帮助</h3><ul><li><code>assert</code>预处理宏（preprocessor macro）：<code>assert(expr);</code></li></ul><p>开关调试状态：</p><p><code>CC -D NDEBUG main.c</code>可以定义这个变量<code>NDEBUG</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token constant">__func__</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"..."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数匹配"><a href="#函数匹配" class="headerlink" title="函数匹配"></a>函数匹配</h2><ul><li>重载函数匹配的<strong>三个步骤</strong>：1.候选函数；2.可行函数；3.寻找最佳匹配。</li><li><strong>候选函数</strong>：选定本次调用对应的重载函数集，集合中的函数称为候选函数（candidate function）。</li><li><strong>可行函数</strong>：考察本次调用提供的实参，选出可以被这组实参调用的函数，新选出的函数称为可行函数（viable function）。</li><li><strong>寻找最佳匹配</strong>：基本思想：实参类型和形参类型越接近，它们匹配地越好。</li></ul><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><ul><li><strong>函数指针</strong>：是指向函数的指针。</li><li><code>bool (*pf)(const string &amp;, const string &amp;);</code> 注：两端的括号不可少。</li><li><strong>函数指针形参</strong>：<ul><li>形参中使用函数定义或者函数指针定义效果一样。</li><li>使用类型别名或者<code>decltype</code>。</li></ul></li><li><strong>返回指向函数的指针</strong>：1.类型别名；2.尾置返回类型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记7</title>
      <link href="2021/04/10/notes/ch07/"/>
      <url>2021/04/10/notes/ch07/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-类-（Class）"><a href="#第七章-类-（Class）" class="headerlink" title="第七章 类 （Class）"></a>第七章 类 （Class）</h1><h2 id="定义抽象数据类型"><a href="#定义抽象数据类型" class="headerlink" title="定义抽象数据类型"></a>定义抽象数据类型</h2><ul><li><strong>类背后的基本思想</strong>：<strong>数据抽象</strong>（data abstraction）和<strong>封装</strong>（encapsulation）。</li><li>数据抽象是一种依赖于<strong>接口</strong>（interface）和<strong>实现</strong>（implementation）分离的编程技术。</li></ul><h3 id="类成员-（Member）"><a href="#类成员-（Member）" class="headerlink" title="类成员 （Member）"></a>类成员 （Member）</h3><ul><li>必须在类的内部声明，不能在其他地方增加成员。</li><li>成员可以是数据，函数，类型别名。</li></ul><h3 id="类的成员函数"><a href="#类的成员函数" class="headerlink" title="类的成员函数"></a>类的成员函数</h3><ul><li>成员函数的<strong>声明</strong>必须在类的内部。</li><li>成员函数的<strong>定义</strong>既可以在类的内部也可以在外部。</li><li>使用点运算符 <code>.</code> 调用成员函数。</li><li>必须对任何<code>const</code>或引用类型成员以及没有默认构造函数的类类型的任何成员使用初始化式。</li><li><code>ConstRef::ConstRef(int ii): i(ii), ci(i), ri(ii) &#123; &#125;</code></li><li>默认实参： <code>Sales_item(const std::string &amp;book): isbn(book), units_sold(0), revenue(0.0) &#123; &#125;</code></li><li><code>*this</code>：<ul><li>每个成员函数都有一个额外的，隐含的形参<code>this</code>。</li><li><code>this</code>总是指向当前对象，因此<code>this</code>是一个常量指针。</li><li>形参表后面的<code>const</code>，改变了隐含的<code>this</code>形参的类型，如 <code>bool same_isbn(const Sales_item &amp;rhs) const</code>，这种函数称为“常量成员函数”（<code>this</code>指向的当前对象是常量）。</li><li><code>return *this;</code>可以让成员函数连续调用。</li><li>普通的非<code>const</code>成员函数：<code>this</code>是指向类类型的<code>const</code>指针（可以改变<code>this</code>所指向的值，不能改变<code>this</code>保存的地址）。</li><li><code>const</code>成员函数：<code>this</code>是指向const类类型的<code>const</code>指针（既不能改变<code>this</code>所指向的值，也不能改变<code>this</code>保存的地址）。</li></ul></li></ul><h3 id="非成员函数"><a href="#非成员函数" class="headerlink" title="非成员函数"></a>非成员函数</h3><ul><li>和类相关的非成员函数，定义和声明都应该在类的外部。</li></ul><h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><ul><li>类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做<strong>构造函数</strong>。</li><li>构造函数是特殊的成员函数。</li><li>构造函数放在类的<code>public</code>部分。</li><li>与类同名的成员函数。</li><li><code>Sales_item(): units_sold(0), revenue(0.0) &#123; &#125;</code></li><li><code>=default</code>要求编译器合成默认的构造函数。(<code>C++11</code>)</li><li>初始化列表：冒号和花括号之间的代码： <code>Sales_item(): units_sold(0), revenue(0.0) &#123; &#125;</code></li></ul><h2 id="访问控制与封装"><a href="#访问控制与封装" class="headerlink" title="访问控制与封装"></a>访问控制与封装</h2><ul><li><strong>访问说明符</strong>（access specifiers）：<ul><li><code>public</code>：定义在 <code>public</code>后面的成员在整个程序内可以被访问； <code>public</code>成员定义类的接口。</li><li><code>private</code>：定义在 <code>private</code>后面的成员可以被类的成员函数访问，但不能被使用该类的代码访问； <code>private</code>隐藏了类的实现细节。</li></ul></li><li>使用 <code>class</code>或者 <code>struct</code>：都可以被用于定义一个类。唯一的却别在于访问权限。<ul><li>使用 <code>class</code>：在第一个访问说明符之前的成员是 <code>priavte</code>的。</li><li>使用 <code>struct</code>：在第一个访问说明符之前的成员是 <code>public</code>的。</li></ul></li></ul><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><ul><li>允许特定的<strong>非成员函数</strong>访问一个类的<strong>私有成员</strong>.</li><li>友元的声明以关键字 <code>friend</code>开始。 <code>friend Sales_data add(const Sales_data&amp;, const Sales_data&amp;);</code>表示非成员函数<code>add</code>可以访问类的非公有成员。</li><li>通常将友元声明成组地放在<strong>类定义的开始或者结尾</strong>。</li><li>类之间的友元：<ul><li>如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。</li></ul></li></ul><h3 id="封装的益处"><a href="#封装的益处" class="headerlink" title="封装的益处"></a>封装的益处</h3><ul><li>确保用户的代码不会无意间破坏封装对象的状态。</li><li>被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。</li></ul><h2 id="类的其他特性"><a href="#类的其他特性" class="headerlink" title="类的其他特性"></a>类的其他特性</h2><ul><li>成员函数作为内联函数 <code>inline</code>：<ul><li>在类的内部，常有一些规模较小的函数适合于被声明成内联函数。</li><li><strong>定义</strong>在类内部的函数是<strong>自动内联</strong>的。</li><li>在类外部定义的成员函数，也可以在声明时显式地加上 <code>inline</code>。</li></ul></li><li><strong>可变数据成员</strong> （mutable data member）：<ul><li><code>mutable size_t access_ctr;</code></li><li>永远不会是<code>const</code>，即使它是<code>const</code>对象的成员。</li></ul></li><li><strong>类类型</strong>：<ul><li>每个类定义了唯一的类型。</li></ul></li></ul><h2 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h2><ul><li>每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由引用、对象、指针使用成员访问运算符来访问。</li><li>函数的<strong>返回类型</strong>通常在函数名前面，因此当成员函数定义在类的外部时，返回类型中使用的名字都位于类的作用域之外。</li><li>如果成员使用了外层作用域中的某个名字，而该名字代表一种<strong>类型</strong>，则类不能在之后重新定义该名字。</li><li>类中的<strong>类型名定义</strong>都要放在一开始。</li></ul><h2 id="构造函数再探"><a href="#构造函数再探" class="headerlink" title="构造函数再探"></a>构造函数再探</h2><ul><li>构造函数初始值列表：<ul><li>类似<code>python</code>使用赋值的方式有时候不行，比如<code>const</code>或者引用类型的数据，只能初始化，不能赋值。（注意初始化和赋值的区别）</li><li>最好让构造函数初始值的顺序和成员声明的顺序保持一致。</li><li>如果一个构造函数为所有参数都提供了默认参数，那么它实际上也定义了默认的构造函数。</li></ul></li></ul><h3 id="委托构造函数-（delegating-constructor-C-11）"><a href="#委托构造函数-（delegating-constructor-C-11）" class="headerlink" title="委托构造函数 （delegating constructor, C++11）"></a>委托构造函数 （delegating constructor, <code>C++11</code>）</h3><ul><li>委托构造函数将自己的职责委托给了其他构造函数。</li><li><code>Sale_data(): Sale_data(&quot;&quot;, 0, 0) &#123;&#125;</code></li></ul><h3 id="隐式的类型转换"><a href="#隐式的类型转换" class="headerlink" title="隐式的类型转换"></a>隐式的类型转换</h3><ul><li>如果构造函数<strong>只接受一个实参</strong>，则它实际上定义了转换为此类类型的<strong>隐式转换机制</strong>。这种构造函数又叫<strong>转换构造函数</strong>（converting constructor）。</li><li>编译器只会自动地执行<code>仅一步</code>类型转换。</li><li>抑制构造函数定义的隐式转换：<ul><li>将构造函数声明为<code>explicit</code>加以阻止。</li><li><code>explicit</code>构造函数只能用于直接初始化，不能用于拷贝形式的初始化。</li></ul></li></ul><h3 id="聚合类-（aggregate-class）"><a href="#聚合类-（aggregate-class）" class="headerlink" title="聚合类 （aggregate class）"></a>聚合类 （aggregate class）</h3><ul><li>满足以下所有条件：<ul><li>所有成员都是<code>public</code>的。</li><li>没有定义任何构造函数。</li><li>没有类内初始值。</li><li>没有基类，也没有<code>virtual</code>函数。</li></ul></li><li>可以使用一个花括号括起来的成员初始值列表，初始值的顺序必须和声明的顺序一致。</li></ul><h3 id="字面值常量类"><a href="#字面值常量类" class="headerlink" title="字面值常量类"></a>字面值常量类</h3><ul><li><code>constexpr</code>函数的参数和返回值必须是字面值。</li><li><strong>字面值类型</strong>：除了算术类型、引用和指针外，某些类也是字面值类型。</li><li>数据成员都是字面值类型的聚合类是字面值常量类。</li><li>如果不是聚合类，则必须满足下面所有条件：<ul><li>数据成员都必须是字面值类型。</li><li>类必须至少含有一个<code>constexpr</code>构造函数。</li><li>如果一个数据成员含有类内部初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的<code>constexpr</code>构造函数。</li><li>类必须使用析构函数的默认定义，该成员负责销毁类的对象。</li></ul></li></ul><h2 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h2><ul><li>非<code>static</code>数据成员存在于类类型的每个对象中。</li><li><code>static</code>数据成员独立于该类的任意对象而存在。</li><li>每个<code>static</code>数据成员是与类关联的对象，并不与该类的对象相关联。</li><li>声明：<ul><li>声明之前加上关键词<code>static</code>。</li></ul></li><li>使用：<ul><li>使用<strong>作用域运算符</strong><code>::</code>直接访问静态成员:<code>r = Account::rate();</code></li><li>也可以使用对象访问：<code>r = ac.rate();</code></li></ul></li><li>定义：<ul><li>在类外部定义时不用加<code>static</code>。</li></ul></li><li>初始化：<ul><li>通常不在类的内部初始化，而是在定义时进行初始化，如 <code>double Account::interestRate = initRate();</code></li><li>如果一定要在类内部定义，则要求必须是字面值常量类型的<code>constexpr</code>。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记3</title>
      <link href="2021/04/10/notes/ch03/"/>
      <url>2021/04/10/notes/ch03/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-字符串、向量和数组"><a href="#第三章-字符串、向量和数组" class="headerlink" title="第三章 字符串、向量和数组"></a>第三章 字符串、向量和数组</h1><h2 id="using声明"><a href="#using声明" class="headerlink" title="using声明"></a>using声明</h2><ul><li>使用某个命名空间：例如 <code>using std::cin</code>表示使用命名空间<code>std</code>中的名字<code>cin</code>。</li><li>头文件中不应该包含<code>using</code>声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。</li></ul><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ul><li>标准库类型<code>string</code>表示可变长的字符序列。</li><li><code>#include &lt;string&gt;</code>，然后 <code>using std::string;</code></li><li><strong>string对象</strong>：注意，不同于字符串字面值。</li></ul><h3 id="定义和初始化string对象"><a href="#定义和初始化string对象" class="headerlink" title="定义和初始化string对象"></a>定义和初始化string对象</h3><p>初始化<code>string</code>对象的方式：</p><table><thead><tr><th>方式</th><th>解释</th></tr></thead><tbody><tr><td><code>string s1</code></td><td>默认初始化，<code>s1</code>是个空字符串</td></tr><tr><td><code>string s2(s1)</code></td><td><code>s2</code>是<code>s1</code>的副本</td></tr><tr><td><code>string s2 = s1</code></td><td>等价于<code>s2(s1)</code>，<code>s2</code>是<code>s1</code>的副本</td></tr><tr><td><code>string s3(&quot;value&quot;)</code></td><td><code>s3</code>是字面值“value”的副本，除了字面值最后的那个空字符外</td></tr><tr><td><code>string s3 = &quot;value&quot;</code></td><td>等价于<code>s3(&quot;value&quot;)</code>，<code>s3</code>是字面值”value”的副本</td></tr><tr><td><code>string s4(n, &#39;c&#39;)</code></td><td>把<code>s4</code>初始化为由连续<code>n</code>个字符<code>c</code>组成的串</td></tr></tbody></table><ul><li>拷贝初始化（copy initialization）：使用等号<code>=</code>将一个已有的对象拷贝到正在创建的对象。</li><li>直接初始化（direct initialization）：通过括号给对象赋值。</li></ul><h3 id="string对象上的操作"><a href="#string对象上的操作" class="headerlink" title="string对象上的操作"></a>string对象上的操作</h3><p><code>string</code>的操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>os &lt;&lt; s</code></td><td>将<code>s</code>写到输出流<code>os</code>当中，返回<code>os</code></td></tr><tr><td><code>is &gt;&gt; s</code></td><td>从<code>is</code>中读取字符串赋给<code>s</code>，字符串以空白分割，返回<code>is</code></td></tr><tr><td><code>getline(is, s)</code></td><td>从<code>is</code>中读取一行赋给<code>s</code>，返回<code>is</code></td></tr><tr><td><code>s.empty()</code></td><td><code>s</code>为空返回<code>true</code>，否则返回<code>false</code></td></tr><tr><td><code>s.size()</code></td><td>返回<code>s</code>中字符的个数</td></tr><tr><td><code>s[n]</code></td><td>返回<code>s</code>中第<code>n</code>个字符的引用，位置<code>n</code>从0计起</td></tr><tr><td><code>s1+s2</code></td><td>返回<code>s1</code>和<code>s2</code>连接后的结果</td></tr><tr><td><code>s1=s2</code></td><td>用<code>s2</code>的副本代替<code>s1</code>中原来的字符</td></tr><tr><td><code>s1==s2</code></td><td>如果<code>s1</code>和<code>s2</code>中所含的字符完全一样，则它们相等；<code>string</code>对象的相等性判断对字母的大小写敏感</td></tr><tr><td><code>s1!=s2</code></td><td>同上</td></tr><tr><td><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></td><td>利用字符在字典中的顺序进行比较，且对字母的大小写敏感</td></tr></tbody></table><ul><li>string io：<ul><li>执行读操作<code>&gt;&gt;</code>：忽略掉开头的空白（包括空格、换行符和制表符），直到遇到下一处空白为止。</li><li><code>getline</code>：读取一整行，<strong>包括空白符</strong>。</li></ul></li><li>字符串字面值和string是不同的类型。</li></ul><h3 id="处理string对象中的字符"><a href="#处理string对象中的字符" class="headerlink" title="处理string对象中的字符"></a>处理string对象中的字符</h3><ul><li><strong>ctype.h vs. cctype</strong>：C++修改了c的标准库，名称为去掉<code>.h</code>，前面加<code>c</code>。</li></ul><p><code>cctype</code>头文件中定义了一组标准函数：</p><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td><code>isalnum(c)</code></td><td>当<code>c</code>是字母或数字时为真</td></tr><tr><td><code>isalpha(c)</code></td><td>当<code>c</code>是字母时为真</td></tr><tr><td><code>iscntrl(c)</code></td><td>当<code>c</code>是控制字符时为真</td></tr><tr><td><code>isdigit(c)</code></td><td>当<code>c</code>是数字时为真</td></tr><tr><td><code>isgraph(c)</code></td><td>当<code>c</code>不是空格但可以打印时为真</td></tr><tr><td><code>islower(c)</code></td><td>当<code>c</code>是小写字母时为真</td></tr><tr><td><code>isprint(c)</code></td><td>当<code>c</code>是可打印字符时为真</td></tr><tr><td><code>ispunct(c)</code></td><td>当<code>c</code>是标点符号时为真</td></tr><tr><td><code>isspace(c)</code></td><td>当<code>c</code>是空白时为真（空格、横向制表符、纵向制表符、回车符、换行符、进纸符）</td></tr><tr><td><code>isupper(c)</code></td><td>当<code>c</code>是大写字母时为真</td></tr><tr><td><code>isxdigit(c)</code></td><td>当<code>c</code>是十六进制数字时为真</td></tr><tr><td><code>tolower(c)</code></td><td>当<code>c</code>是大写字母，输出对应的小写字母；否则原样输出<code>c</code></td></tr><tr><td><code>toupper(c)</code></td><td>当<code>c</code>是小写字母，输出对应的大写字母；否则原样输出<code>c</code></td></tr></tbody></table><ul><li>遍历字符串：使用<strong>范围for</strong>（range for）语句： <code>for (auto c: str)</code>，或者 <code>for (auto &amp;c: str)</code>使用引用直接改变字符串中的字符。 （C++11）</li></ul><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><ul><li>vector是一个<strong>容器</strong>，也是一个类模板；</li><li><code>#include &lt;vector&gt;</code> 然后 <code>using std::vector;</code></li><li>容器：包含其他对象。</li><li>类模板：本身不是类，但可以<strong>实例化instantiation</strong>出一个类。 <code>vector</code>是一个模板， <code>vector&lt;int&gt;</code>是一个类型。</li><li>通过将类型放在类模板名称后面的<strong>尖括号</strong>中来指定<strong>类型</strong>，如<code>vector&lt;int&gt; ivec</code>。</li></ul><h3 id="定义和初始化vector对象"><a href="#定义和初始化vector对象" class="headerlink" title="定义和初始化vector对象"></a>定义和初始化vector对象</h3><p>初始化<code>vector</code>对象的方法</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td><code>vector&lt;T&gt; v1</code></td><td><code>v1</code>是一个空<code>vector</code>，它潜在的元素是<code>T</code>类型的，执行默认初始化</td></tr><tr><td><code>vector&lt;T&gt; v2(v1)</code></td><td><code>v2</code>中包含有<code>v1</code>所有元素的副本</td></tr><tr><td><code>vector&lt;T&gt; v2 = v1</code></td><td>等价于<code>v2(v1)</code>，<code>v2</code>中包含<code>v1</code>所有元素的副本</td></tr><tr><td><code>vector&lt;T&gt; v3(n, val)</code></td><td><code>v3</code>包含了n个重复的元素，每个元素的值都是<code>val</code></td></tr><tr><td><code>vector&lt;T&gt; v4(n)</code></td><td><code>v4</code>包含了n个重复地执行了值初始化的对象</td></tr><tr><td><code>vector&lt;T&gt; v5&#123;a, b, c...&#125;</code></td><td><code>v5</code>包含了初始值个数的元素，每个元素被赋予相应的初始值</td></tr><tr><td><code>vector&lt;T&gt; v5=&#123;a, b, c...&#125;</code></td><td>等价于<code>v5&#123;a, b, c...&#125;</code></td></tr></tbody></table><ul><li>列表初始化： <code>vector&lt;string&gt; v&#123;&quot;a&quot;, &quot;an&quot;, &quot;the&quot;&#125;;</code> （C++11）</li></ul><h3 id="向vector对象中添加元素"><a href="#向vector对象中添加元素" class="headerlink" title="向vector对象中添加元素"></a>向vector对象中添加元素</h3><ul><li><code>v.push_back(e)</code> 在尾部增加元素。</li></ul><h3 id="其他vector操作"><a href="#其他vector操作" class="headerlink" title="其他vector操作"></a>其他vector操作</h3><p><code>vector</code>支持的操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>v.emtpy()</code></td><td>如果<code>v</code>不含有任何元素，返回真；否则返回假</td></tr><tr><td><code>v.size()</code></td><td>返回<code>v</code>中元素的个数</td></tr><tr><td><code>v.push_back(t)</code></td><td>向<code>v</code>的尾端添加一个值为<code>t</code>的元素</td></tr><tr><td><code>v[n]</code></td><td>返回<code>v</code>中第<code>n</code>个位置上元素的<strong>引用</strong></td></tr><tr><td><code>v1 = v2</code></td><td>用<code>v2</code>中的元素拷贝替换<code>v1</code>中的元素</td></tr><tr><td><code>v1 = &#123;a,b,c...&#125;</code></td><td>用列表中元素的拷贝替换<code>v1</code>中的元素</td></tr><tr><td><code>v1 == v2</code></td><td><code>v1</code>和<code>v2</code>相等当且仅当它们的元素数量相同且对应位置的元素值都相同</td></tr><tr><td><code>v1 != v2</code></td><td>同上</td></tr><tr><td><code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>, <code>&gt;=</code></td><td>以字典顺序进行比较</td></tr></tbody></table><ul><li>范围<code>for</code>语句内不应该改变其遍历序列的大小。</li><li><code>vector</code>对象（以及<code>string</code>对象）的下标运算符，只能对确知已存在的元素执行下标操作，不能用于添加元素。</li></ul><h2 id="迭代器iterator"><a href="#迭代器iterator" class="headerlink" title="迭代器iterator"></a>迭代器iterator</h2><ul><li>所有标准库容器都可以使用迭代器。</li><li>类似于指针类型，迭代器也提供了对对象的间接访问。</li></ul><h3 id="使用迭代器"><a href="#使用迭代器" class="headerlink" title="使用迭代器"></a>使用迭代器</h3><ul><li><code>vector&lt;int&gt;::iterator iter</code>。</li><li><code>auto b = v.begin();</code>返回指向第一个元素的迭代器。</li><li><code>auto e = v.end();</code>返回指向最后一个元素的下一个（哨兵，尾后,one past the end）的迭代器（off the end）。</li><li>如果容器为空， <code>begin()</code>和 <code>end()</code>返回的是同一个迭代器，都是尾后迭代器。</li><li>使用解引用符<code>*</code>访问迭代器指向的元素。</li><li>养成使用迭代器和<code>!=</code>的习惯（泛型编程）。</li><li><strong>容器</strong>：可以包含其他对象；但所有的对象必须类型相同。</li><li><strong>迭代器（iterator）</strong>：每种标准容器都有自己的迭代器。<code>C++</code>倾向于用迭代器而不是下标遍历元素。</li><li><strong>const_iterator</strong>：只能读取容器内元素不能改变。</li><li><strong>箭头运算符</strong>： 解引用 + 成员访问，<code>it-&gt;mem</code>等价于 <code>(*it).mem</code></li><li><strong>谨记</strong>：但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。</li></ul><p>标准容器迭代器的运算符:</p><table><thead><tr><th>运算符</th><th>解释</th></tr></thead><tbody><tr><td><code>*iter</code></td><td>返回迭代器<code>iter</code>所指向的<strong>元素的引用</strong></td></tr><tr><td><code>iter-&gt;mem</code></td><td>等价于<code>(*iter).mem</code></td></tr><tr><td><code>++iter</code></td><td>令<code>iter</code>指示容器中的下一个元素</td></tr><tr><td><code>--iter</code></td><td>令<code>iter</code>指示容器中的上一个元素</td></tr><tr><td><code>iter1 == iter2</code></td><td>判断两个迭代器是否相等</td></tr></tbody></table><h3 id="迭代器运算"><a href="#迭代器运算" class="headerlink" title="迭代器运算"></a>迭代器运算</h3><p><code>vector</code>和<code>string</code>迭代器支持的运算：</p><table><thead><tr><th>运算符</th><th>解释</th></tr></thead><tbody><tr><td><code>iter + n</code></td><td>迭代器加上一个整数值仍得到一个迭代器，迭代器指示的新位置和原来相比向前移动了若干个元素。结果迭代器或者指示容器内的一个元素，或者指示容器尾元素的下一位置。</td></tr><tr><td><code>iter - n</code></td><td>迭代器减去一个证书仍得到一个迭代器，迭代器指示的新位置比原来向后移动了若干个元素。结果迭代器或者指向容器内的一个元素，或者指示容器尾元素的下一位置。</td></tr><tr><td><code>iter1 += n</code></td><td>迭代器加法的复合赋值语句，将<code>iter1</code>加n的结果赋给<code>iter1</code></td></tr><tr><td><code>iter1 -= n</code></td><td>迭代器减法的复合赋值语句，将<code>iter2</code>减n的加过赋给<code>iter1</code></td></tr><tr><td><code>iter1 - iter2</code></td><td>两个迭代器相减的结果是它们之间的距离，也就是说，将运算符右侧的迭代器向前移动差值个元素后得到左侧的迭代器。参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一位置。</td></tr><tr><td><code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code></td><td>迭代器的关系运算符，如果某迭代器</td></tr></tbody></table><ul><li><strong>difference_type</strong>：保证足够大以存储任何两个迭代器对象间的距离，可正可负。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>相当于vector的低级版，<strong>长度固定</strong>。</li></ul><h3 id="定义和初始化内置数组"><a href="#定义和初始化内置数组" class="headerlink" title="定义和初始化内置数组"></a>定义和初始化内置数组</h3><ul><li>初始化：<code>char input_buffer[buffer_size];</code>，长度必须是const表达式，或者不写，让编译器自己推断。</li><li>数组不允许直接赋值给另一个数组。</li></ul><h3 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h3><ul><li>数组下标的类型：<code>size_t</code> 。</li><li>字符数组的特殊性：结尾处有一个空字符，如 <code>char a[] = &quot;hello&quot;;</code> 。</li><li>用数组初始化 <code>vector</code>： <code>int a[] = &#123;1,2,3,4,5&#125;; vector&lt;int&gt; v(begin(a), end(a));</code> 。</li></ul><h3 id="数组和指针"><a href="#数组和指针" class="headerlink" title="数组和指针"></a>数组和指针</h3><ul><li>使用数组时，编译器一般会把它转换成指针。</li><li>标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。 </li><li><strong>指针访问数组</strong>：在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。</li></ul><h2 id="C风格字符串"><a href="#C风格字符串" class="headerlink" title="C风格字符串"></a>C风格字符串</h2><ul><li>从C继承来的字符串。</li><li>用空字符结束（<code>\0</code>）。</li><li>对大多数应用来说，使用标准库 <code>string</code>比使用C风格字符串更安全、更高效。</li><li>获取 <code>string</code> 中的 <code>cstring</code> ： <code>const char *str = s.c_str();</code> 。</li></ul><p>C标准库String函数，定义在<code>&lt;cstring&gt;</code> 中：</p><table><thead><tr><th>函数</th><th>介绍</th></tr></thead><tbody><tr><td><code>strlen(p)</code></td><td>返回<code>p</code>的长度，空字符不计算在内</td></tr><tr><td><code>strcmp(p1, p2)</code></td><td>比较<code>p1</code>和<code>p2</code>的相等性。如果<code>p1==p2</code>，返回0；如果<code>p1&gt;p2</code>，返回一个正值；如果<code>p1&lt;p2</code>，返回一个负值。</td></tr><tr><td><code>strcat(p1, p2)</code></td><td>将<code>p2</code>附加到<code>p1</code>之后，返回<code>p1</code></td></tr><tr><td><code>strcpy(p1, p2)</code></td><td>将<code>p2</code>拷贝给<code>p1</code>，返回<code>p1</code></td></tr></tbody></table><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ul><li><strong>多维数组的初始化</strong>： <code>int ia[3][4] = &#123;&#123;0,1,2,3&#125;, ...&#125;</code>。</li><li>使用范围for语句时，除了最内层的循环外，其他所有循环的控制变量都应该是引用类型。</li></ul><h2 id="指针vs引用"><a href="#指针vs引用" class="headerlink" title="指针vs引用"></a>指针vs引用</h2><ul><li>引用总是指向某个对象，定义引用时没有初始化是错的。</li><li>给引用赋值，修改的是该引用所关联的对象的值，而不是让引用和另一个对象相关联。</li></ul><h2 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h2><ul><li>定义： <code>int **ppi = &amp;pi;</code></li><li>解引用：<code>**ppi</code></li></ul><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><ul><li>使用 <code>new</code>和 <code>delete</code>表达和c中<code>malloc</code>和<code>free</code>类似的功能，即在堆（自由存储区）中分配存储空间。</li><li>定义： <code>int *pia = new int[10];</code> 10可以被一个变量替代。</li><li>释放： <code>delete [] pia;</code>，注意不要忘记<code>[]</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记2</title>
      <link href="2021/04/10/notes/ch02/"/>
      <url>2021/04/10/notes/ch02/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-变量和基本类型"><a href="#第二章-变量和基本类型" class="headerlink" title="第二章 变量和基本类型"></a>第二章 变量和基本类型</h1><h3 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h3><p><strong>基本算数类型</strong>：</p><table><thead><tr><th>类型</th><th>含义</th><th>最小尺寸</th></tr></thead><tbody><tr><td><code>bool</code></td><td>布尔类型</td><td>8bits</td></tr><tr><td><code>char</code></td><td>字符</td><td>8bits</td></tr><tr><td><code>wchar_t</code></td><td>宽字符</td><td>16bits</td></tr><tr><td><code>char16_t</code></td><td>Unicode字符</td><td>16bits</td></tr><tr><td><code>char32_t</code></td><td>Unicode字符</td><td>32bits</td></tr><tr><td><code>short</code></td><td>短整型</td><td>16bits</td></tr><tr><td><code>int</code></td><td>整型</td><td>16bits (在32位机器中是32bits)</td></tr><tr><td><code>long</code></td><td>长整型</td><td>32bits</td></tr><tr><td><code>long long</code></td><td>长整型</td><td>64bits （是在C++11中新定义的）</td></tr><tr><td><code>float</code></td><td>单精度浮点数</td><td>6位有效数字</td></tr><tr><td><code>double</code></td><td>双精度浮点数</td><td>10位有效数字</td></tr><tr><td><code>long double</code></td><td>扩展精度浮点数</td><td>10位有效数字</td></tr></tbody></table><h3 id="如何选择类型"><a href="#如何选择类型" class="headerlink" title="如何选择类型"></a>如何选择类型</h3><ul><li>1.当明确知晓数值不可能是负数时，选用无符号类型；</li><li>2.使用<code>int</code>执行整数运算。一般<code>long</code>的大小和<code>int</code>一样，而<code>short</code>常常显得太小。除非超过了<code>int</code>的范围，选择<code>long long</code>。</li><li>3.算术表达式中不要使用<code>char</code>或<code>bool</code>。</li><li>4.浮点运算选用<code>double</code>。</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>非布尔型赋给布尔型，初始值为0则结果为false，否则为true。</li><li>布尔型赋给非布尔型，初始值为false结果为0，初始值为true结果为1。</li></ul><h3 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h3><ul><li>一个形如<code>42</code>的值被称作<strong>字面值常量</strong>（literal）。<ul><li>整型和浮点型字面值。</li><li>字符和字符串字面值。<ul><li>使用空格连接，继承自C。</li><li>字符字面值：单引号， <code>&#39;a&#39;</code></li><li>字符串字面值：双引号， <code>&quot;Hello World&quot;&quot;</code></li></ul></li><li>转义序列。<code>\n</code>、<code>\t</code>等。</li><li>布尔字面值。<code>true</code>，<code>false</code>。</li><li>指针字面值。<code>nullptr</code></li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量</strong>提供一个<strong>具名</strong>的、可供程序操作的存储空间。   <code>C++</code>中<strong>变量</strong>和<strong>对象</strong>一般可以互换使用。</p><h3 id="变量定义（define）"><a href="#变量定义（define）" class="headerlink" title="变量定义（define）"></a>变量定义（define）</h3><ul><li><strong>定义形式</strong>：类型说明符（type specifier） + 一个或多个变量名组成的列表。如<code>int sum = 0, value, units_sold = 0;</code></li><li><strong>初始化</strong>（initialize）：对象在创建时获得了一个特定的值。<ul><li><strong>初始化不是赋值！</strong>：</li><li>初始化 = 创建变量 + 赋予初始值</li><li>赋值 = 擦除对象的当前值 + 用新值代替</li><li><strong>列表初始化</strong>：使用花括号<code>&#123;&#125;</code>，如<code>int units_sold&#123;0&#125;;</code></li><li>默认初始化：定义时没有指定初始值会被默认初始化；在函数体内部的内置类型变量将不会被初始化。</li><li>建议初始化每一个内置类型的变量。</li></ul></li></ul><h3 id="变量的声明（declaration）-vs-定义（define）"><a href="#变量的声明（declaration）-vs-定义（define）" class="headerlink" title="变量的声明（declaration） vs 定义（define）"></a>变量的<strong>声明</strong>（declaration） vs <strong>定义</strong>（define）</h3><ul><li>为了支持分离式编译，<code>C++</code>将声明和定义区分开。<strong>声明</strong>使得名字为程序所知。<strong>定义</strong>负责创建与名字关联的实体。</li><li><strong>extern</strong>：只是说明变量定义在其他地方。</li><li>只声明而不定义： 在变量名前添加关键字 <code>extern</code>，如<code>extern int i;</code>。但如果包含了初始值，就变成了定义：<code>extern double pi = 3.14;</code></li><li>变量只能被定义一次，但是可以多次声明。</li><li>名字的<strong>作用域</strong>（namescope）</li></ul><h2 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h2><ul><li><strong>左值</strong>（l-value）<strong>可以</strong>出现在赋值语句的左边或者右边，比如变量；</li><li><strong>右值</strong>（r-value）<strong>只能</strong>出现在赋值语句的右边，比如常量。</li></ul><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><strong>引用</strong>：引用是一个对象的别名，引用类型引用（refer to）另外一种类型。如<code>int &amp;refVal = val;</code>。</li><li>引用必须初始化。</li><li>引用和它的初始值是<strong>绑定bind</strong>在一起的，而<strong>不是拷贝</strong>。</li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>是一种 <code>&quot;指向（point to）&quot;</code>另外一种类型的复合类型。</li><li><strong>定义</strong>指针类型： <code>int *ip1;</code>，<strong>从右向左读</strong>，<code>ip1</code>是指向<code>int</code>类型的指针。</li><li>指针存放某个对象的<strong>地址</strong>。</li><li>获取对象的地址： <code>int i=42; int *p = &amp;i;</code>。 <code>&amp;</code>是<strong>取地址符</strong>。</li><li>指针的值的四种状态：<ul><li>1.指向一个对象；</li><li>2.指向紧邻对象的下一个位置；</li><li>3.空指针；</li><li>4.无效指针。</li></ul></li><li>指针访问对象： <code>cout &lt;&lt; *p;</code>， <code>*</code>是<strong>解引用符</strong>。</li><li>空指针不指向任何对象。</li><li><code>void*</code>指针可以存放<strong>任意</strong>对象的地址。</li><li>其他指针类型必须要与所指对象<strong>严格匹配</strong>。</li><li>两个指针相减的类型是<code>ptrdiff_t</code>。</li><li>建议：初始化所有指针。</li></ul><h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><ul><li>动机：希望定义一些不能被改变值的变量。</li></ul><h3 id="初始化和const"><a href="#初始化和const" class="headerlink" title="初始化和const"></a>初始化和const</h3><ul><li>const对象<strong>必须初始化</strong>，且<strong>不能被改变</strong>。</li><li>const变量默认不能被其他文件访问，非要访问，必须在指定const前加extern。</li></ul><h3 id="const的引用"><a href="#const的引用" class="headerlink" title="const的引用"></a>const的引用</h3><ul><li><strong>reference to const</strong>（对常量的引用）：指向const对象的引用，如 <code>const int ival=1; const int &amp;refVal = ival;</code>，可以读取但不能修改<code>refVal</code>。</li><li><strong>临时量</strong>（temporary）对象：当编译器需要一个空间来暂存表达式的求值结果时，临时创建的一个未命名的对象。</li><li>对临时量的引用是非法行为。</li></ul><h3 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h3><ul><li><strong>pointer to const</strong>（指向常量的指针）：不能用于改变其所指对象的值, 如 <code>const double pi = 3.14; const double *cptr = &amp;pi;</code>。</li><li><strong>const pointer</strong>：指针本身是常量，如 <code>int i = 0; int *const ptr = &amp;i;</code></li></ul><h3 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h3><ul><li><code>顶层const</code>：指针本身是个常量。</li><li><code>底层const</code>：指针指向的对象是个常量。拷贝时严格要求相同的底层const资格。</li></ul><h3 id="constexpr和常量表达式"><a href="#constexpr和常量表达式" class="headerlink" title="constexpr和常量表达式"></a><code>constexpr</code>和常量表达式</h3><ul><li>常量表达式：指值不会改变，且在编译过程中就能得到计算结果的表达式。</li><li><code>C++11</code>新标准规定，允许将变量声明为<code>constexpr</code>类型以便由编译器来验证变量的值是否是一个常量的表达式。</li></ul><h2 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h2><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><ul><li>传统别名：使用<strong>typedef</strong>来定义类型的同义词。 <code>typedef double wages;</code></li><li>新标准别名：别名声明（alias declaration）： <code>using SI = Sales_item;</code>（C++11）</li></ul><h3 id="auto类型说明符"><a href="#auto类型说明符" class="headerlink" title="auto类型说明符"></a>auto类型说明符</h3><ul><li><strong>auto</strong>类型说明符：让编译器<strong>自动推断类型</strong>。</li><li><code>int i = 0, &amp;r = i; auto a = r;</code> 推断<code>a</code>的类型是<code>int</code>。</li><li>会忽略<code>顶层const</code>。</li><li><code>const int ci = 1; const auto f = ci;</code>推断类型是<code>int</code>，需要自己加<code>const</code></li><li><code>C++11</code></li></ul><h3 id="decltype类型指示符"><a href="#decltype类型指示符" class="headerlink" title="decltype类型指示符"></a>decltype类型指示符</h3><ul><li>从表达式的类型推断出要定义的变量的类型。</li><li><strong>decltype</strong>：选择并返回操作数的<strong>数据类型</strong>。</li><li><code>decltype(f()) sum = x;</code> 推断<code>sum</code>的类型是函数<code>f</code>的返回类型。</li><li>不会忽略<code>顶层const</code>。</li><li><code>C++11</code></li></ul><h2 id="自定义数据结构"><a href="#自定义数据结构" class="headerlink" title="自定义数据结构"></a>自定义数据结构</h2><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><ul><li>类可以以关键字<code>struct</code>开始，紧跟类名和类体。</li><li>类数据成员：类体定义类的成员。</li><li><code>C++11</code>：可以为类数据成员提供一个<strong>类内初始值</strong>（in-class initializer）。</li></ul><h3 id="编写自己的头文件"><a href="#编写自己的头文件" class="headerlink" title="编写自己的头文件"></a>编写自己的头文件</h3><ul><li>头文件通常包含哪些只能被定义一次的实体：类、<code>const</code>和<code>constexpr</code>变量。</li></ul><p>预处理器概述：</p><ul><li><strong>预处理器</strong>（preprocessor）：确保头文件多次包含仍能安全工作。</li><li>当预处理器看到<code>#include</code>标记时，会用指定的头文件内容代替<code>#include</code></li><li><strong>头文件保护符</strong>（header guard）：头文件保护符依赖于预处理变量的状态：已定义和未定义。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SALES_DATA_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SALES_DATA_H</span></span>strct Sale_data<span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记4</title>
      <link href="2021/04/10/notes/ch04/"/>
      <url>2021/04/10/notes/ch04/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-表达式"><a href="#第四章-表达式" class="headerlink" title="第四章 表达式"></a>第四章 表达式</h1><h2 id="表达式基础"><a href="#表达式基础" class="headerlink" title="表达式基础"></a>表达式基础</h2><ul><li><strong>重载运算符</strong>：当运算符作用在类类型的运算对象时，用户可以自行定义其含义。</li><li><strong>左值和右值</strong>：<ul><li>C中原意：左值<strong>可以</strong>在表达式左边，右值不能。</li><li><code>C++</code>：当一个对象被用作<strong>右值</strong>的时候，用的是对象的<strong>值</strong>（内容）；</li><li>被用做<strong>左值</strong>时，用的是对象的<strong>身份</strong>（在内存中的位置）。</li></ul></li></ul><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li><strong>溢出</strong>：当计算的结果超出该类型所能表示的范围时就会产生溢出。</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul><li><strong>短路求值</strong>：逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。</li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li>如果赋值运算的左右侧运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。</li><li>赋值运算符满足右结合律，这点和其他二元运算符不一样。 <code>ival = jval = 0;</code>等价于<code>ival = (jval = 0);</code></li><li>赋值运算优先级比较低。</li></ul><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><ul><li>条件运算符（<code>?:</code>）允许我们把简单的<code>if-else</code>逻辑嵌入到单个表达式中去，按照如下形式：<code>cond? expr1: expr2</code></li></ul><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><ul><li>位运算符是作用于<strong>整数类型</strong>的运算对象。</li><li>二进制位向左移（<code>&lt;&lt;</code>）或者向右移（<code>&gt;&gt;</code>），移出边界外的位就被舍弃掉了。</li><li>位取反（<code>~</code>）、与（<code>&amp;</code>）、或（<code>|</code>）、异或（<code>^</code>）</li></ul><h2 id="sizeof运算符"><a href="#sizeof运算符" class="headerlink" title="sizeof运算符"></a>sizeof运算符</h2><ul><li>返回一条表达式或一个类型名字所占的<strong>字节数</strong>。返回的类型是 <code>size_t</code>。</li><li>两种形式： <code>sizeof (type)</code>和 <code>sizeof expr</code></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><ul><li>比 <code>int</code>类型小的整数值先提升为较大的整数类型。</li><li>条件中，非布尔转换成布尔。</li><li>初始化中，初始值转换成变量的类型。</li><li>算术运算或者关系运算的运算对象有多种类型，要转换成同一种类型。</li><li>函数调用时。</li></ul><h3 id="显式类型转换（尽量避免）"><a href="#显式类型转换（尽量避免）" class="headerlink" title="显式类型转换（尽量避免）"></a>显式类型转换（尽量避免）</h3><ul><li><strong>static_cast</strong>：任何明确定义的类型转换，只要不包含底层const，都可以使用。 <code>double slope = static_cast&lt;double&gt;(j);</code></li><li><strong>dynamic_cast</strong>：支持运行时类型识别。</li><li><strong>const_cast</strong>：只能改变运算对象的底层const，一般可用于去除const性质。 <code>const char *pc; char *p = const_cast&lt;char*&gt;(pc)</code></li><li><strong>reinterpret_cast</strong>：通常为运算对象的位模式提供低层次上的重新解释。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记8</title>
      <link href="2021/04/10/notes/ch08/"/>
      <url>2021/04/10/notes/ch08/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-IO库"><a href="#第八章-IO库" class="headerlink" title="第八章 IO库"></a>第八章 IO库</h1><h2 id="前面章节已经在用的IO库设施"><a href="#前面章节已经在用的IO库设施" class="headerlink" title="前面章节已经在用的IO库设施"></a>前面章节已经在用的IO库设施</h2><ul><li><strong>istream</strong>：输入流类型，提供输入操作。</li><li><strong>ostream</strong>：输出流类型，提供输出操作</li><li><strong>cin</strong>：一个<code>istream</code>对象，从标准输入读取数据。</li><li><strong>cout</strong>：一个<code>ostream</code>对象，向标准输出写入数据。</li><li><strong>cerr</strong>：一个<code>ostream</code>对象，向标准错误写入消息。</li><li><strong>&gt;&gt;运算符</strong>：用来从一个<code>istream</code>对象中读取输入数据。</li><li><strong>&lt;&lt;运算符</strong>：用来向一个<code>ostream</code>对象中写入输出数据。</li><li><strong>getline函数</strong>：从一个给定的<code>istream</code>对象中读取一行数据，存入到一个给定的<code>string</code>对象中。</li></ul><h2 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h2><h3 id="标准库定义的IO类型"><a href="#标准库定义的IO类型" class="headerlink" title="标准库定义的IO类型"></a>标准库定义的IO类型</h3><ul><li><code>iostream</code>头文件：从标准流中读写数据，<code>istream</code>、<code>ostream</code>等。</li><li><code>fstream</code>头文件：从文件中读写数据，<code>ifstream</code>、<code>ofstream</code>等。</li><li><code>sstream</code>头文件：从字符串中读写数据，<code>istringstream</code>、<code>ostringstream</code></li></ul><h3 id="IO对象不可复制或赋值"><a href="#IO对象不可复制或赋值" class="headerlink" title="IO对象不可复制或赋值"></a>IO对象不可复制或赋值</h3><ul><li>1.IO对象不能存在容器里.</li><li>2.形参和返回类型也不能是流类型。</li><li>3.形参和返回类型一般是流的<strong>引用</strong>。</li><li>4.读写一个IO对象会改变其状态，因此传递和返回的引用不能是<code>const</code>的。</li></ul><h3 id="条件状态"><a href="#条件状态" class="headerlink" title="条件状态"></a>条件状态</h3><table><thead><tr><th>状态</th><th>解释</th></tr></thead><tbody><tr><td><code>strm:iostate</code></td><td>是一种机器无关的<strong>类型</strong>，提供了表达条件状态的完整功能</td></tr><tr><td><code>strm:badbit</code></td><td>用来指出流已经崩溃</td></tr><tr><td><code>strm:failbit</code></td><td>用来指出一个IO操作失败了</td></tr><tr><td><code>strm:eofbit</code></td><td>用来指出流到达了文件结束</td></tr><tr><td><code>strm:goodbit</code></td><td>用来指出流未处于错误状态，此值保证为零</td></tr><tr><td><code>s.eof()</code></td><td>若流<code>s</code>的<code>eofbit</code>置位，则返回<code>true</code></td></tr><tr><td><code>s.fail()</code></td><td>若流<code>s</code>的<code>failbit</code>置位，则返回<code>true</code></td></tr><tr><td><code>s.bad()</code></td><td>若流<code>s</code>的<code>badbit</code>置位，则返回<code>true</code></td></tr><tr><td><code>s.good()</code></td><td>若流<code>s</code>处于有效状态，则返回<code>true</code></td></tr><tr><td><code>s.clear()</code></td><td>将流<code>s</code>中所有条件状态位复位，将流的状态设置成有效，返回<code>void</code></td></tr><tr><td><code>s.clear(flags)</code></td><td>将流<code>s</code>中指定的条件状态位复位，返回<code>void</code></td></tr><tr><td><code>s.setstate(flags)</code></td><td>根据给定的标志位，将流<code>s</code>中对应的条件状态位置位，返回<code>void</code></td></tr><tr><td><code>s.rdstate()</code></td><td>返回流<code>s</code>的当前条件状态，返回值类型为<code>strm::iostate</code></td></tr></tbody></table><p>上表中，<code>strm</code>是一种IO类型，（如<code>istream</code>）， <code>s</code>是一个流对象。</p><h3 id="管理输出缓冲"><a href="#管理输出缓冲" class="headerlink" title="管理输出缓冲"></a>管理输出缓冲</h3><ul><li>每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。</li><li>刷新缓冲区，可以使用如下IO操纵符：<ul><li><code>endl</code>：输出一个换行符并刷新缓冲区。</li><li><code>flush</code>：刷新流，单不添加任何字符。</li><li><code>ends</code>：在缓冲区插入空字符<code>null</code>，然后刷新。</li><li><code>unitbuf</code>：告诉流接下来每次操作之后都要进行一次<code>flush</code>操作。</li><li><code>nounitbuf</code>：回到正常的缓冲方式。</li></ul></li></ul><h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><ul><li>头文件<code>fstream</code>定义了三个类型来支持文件IO：<ul><li><code>ifstream</code>从一个给定文件读取数据。</li><li><code>ofstream</code>向一个给定文件写入数据。</li><li><code>fstream</code>可以读写给定文件。</li></ul></li><li><strong>文件流</strong>：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。</li></ul><h3 id="fstream特有的操作"><a href="#fstream特有的操作" class="headerlink" title="fstream特有的操作"></a>fstream特有的操作</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>fstream fstrm;</code></td><td>创建一个未绑定的文件流。</td></tr><tr><td><code>fstream fstrm(s);</code></td><td>创建一个文件流，并打开名为<code>s</code>的文件，<code>s</code>可以是<code>string</code>也可以是<code>char</code>指针</td></tr><tr><td><code>fstream fstrm(s, mode);</code></td><td>与前一个构造函数类似，但按指定<code>mode</code>打开文件</td></tr><tr><td><code>fstrm.open(s)</code></td><td>打开名为<code>s</code>的文件，并和<code>fstrm</code>绑定</td></tr><tr><td><code>fstrm.close()</code></td><td>关闭和<code>fstrm</code>绑定的文件</td></tr><tr><td><code>fstrm.is_open()</code></td><td>返回一个<code>bool</code>值，指出与<code>fstrm</code>关联的文件是否成功打开且尚未关闭</td></tr></tbody></table><p>上表中，<code>fstream</code>是头文件<code>fstream</code>中定义的一个类型，<code>fstrm</code>是一个文件流对象。</p><h3 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h3><table><thead><tr><th>文件模式</th><th>解释</th></tr></thead><tbody><tr><td><code>in</code></td><td>以读的方式打开</td></tr><tr><td><code>out</code></td><td>以写的方式打开</td></tr><tr><td><code>app</code></td><td>每次写操作前均定位到文件末尾</td></tr><tr><td><code>ate</code></td><td>打开文件后立即定位到文件末尾</td></tr><tr><td><code>trunc</code></td><td>截断文件</td></tr><tr><td><code>binary</code></td><td>以二进制方式进行IO操作。</td></tr></tbody></table><h2 id="string流"><a href="#string流" class="headerlink" title="string流"></a>string流</h2><ul><li>头文件<code>sstream</code>定义了三个类型来支持内存IO：<ul><li><code>istringstream</code>从<code>string</code>读取数据。</li><li><code>ostringstream</code>向<code>string</code>写入数据。</li><li><code>stringstream</code>可以读写给定<code>string</code>。</li></ul></li></ul><h3 id="stringstream特有的操作"><a href="#stringstream特有的操作" class="headerlink" title="stringstream特有的操作"></a>stringstream特有的操作</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>sstream strm</code></td><td>定义一个未绑定的<code>stringstream</code>对象</td></tr><tr><td><code>sstream strm(s)</code></td><td>用<code>s</code>初始化对象</td></tr><tr><td><code>strm.str()</code></td><td>返回<code>strm</code>所保存的<code>string</code>的拷贝</td></tr><tr><td><code>strm.str(s)</code></td><td>将<code>s</code>拷贝到<code>strm</code>中，返回<code>void</code></td></tr></tbody></table><p>上表中<code>sstream</code>是头文件<code>sstream</code>中任意一个类型。<code>s</code>是一个<code>string</code>。</p>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记11</title>
      <link href="2021/04/10/notes/ch11/"/>
      <url>2021/04/10/notes/ch11/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章-关联容器"><a href="#第十一章-关联容器" class="headerlink" title="第十一章 关联容器"></a>第十一章 关联容器</h1><ul><li>关联容器和顺序容器的不同：关联容器中的元素时按照<strong>关键字</strong>来保存和访问的。</li><li>关联容器支持通过关键字来高效地查找和读取元素，基本的关联容器类型是 <code>map</code>和 <code>set</code>。</li></ul><p><strong>关联容器类型</strong>：</p><table><thead><tr><th>容器类型</th><th>解释</th></tr></thead><tbody><tr><td>按顺序存储</td><td></td></tr><tr><td><code>map</code></td><td>关键数组：保存<code>关键字-值</code>对</td></tr><tr><td><code>set</code></td><td>关键字即值，即只保存关键字的容器</td></tr><tr><td><code>multimap</code></td><td>支持同一个键多次出现的<code>map</code></td></tr><tr><td><code>multiset</code></td><td>支持同一个键多次出现的<code>set</code></td></tr><tr><td>无序集合</td><td></td></tr><tr><td><code>unordered_map</code></td><td>用哈希函数组织的<code>map</code></td></tr><tr><td><code>unordered_set</code></td><td>用哈希函数组织的<code>set</code></td></tr><tr><td><code>unordered_multimap</code></td><td>哈希组织的<code>map</code>，关键字可以重复出现</td></tr><tr><td><code>unordered_multiset</code></td><td>哈希组织的<code>set</code>，关键字可以重复出现</td></tr></tbody></table><h2 id="关联容器概述"><a href="#关联容器概述" class="headerlink" title="关联容器概述"></a>关联容器概述</h2><h3 id="定义关联容器"><a href="#定义关联容器" class="headerlink" title="定义关联容器"></a>定义关联容器</h3><ul><li>需要指定元素类型。</li><li>列表初始化：<ul><li><code>map</code>：<code>map&lt;string, int&gt; word_count = &#123;&#123;"a", 1&#125;, &#123;"b", 2&#125;&#125;;</code></li><li><code>set</code>：<code>set&lt;string&gt; exclude = &#123;&quot;the&quot;, &quot;a&quot;&#125;;</code></li></ul></li></ul><h3 id="关键字类型的要求"><a href="#关键字类型的要求" class="headerlink" title="关键字类型的要求"></a>关键字类型的要求</h3><ul><li>对于有序容器，关键字类型必须定义元素比较的方法。默认是<code>&lt;</code>。</li><li>如果想传递一个比较的函数，可以这样定义：<code>multiset&lt;Sales_data, decltype(compareIsbn)*&gt; bookstore(compareIsbn);</code></li></ul><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><ul><li>在<code>utility</code>头文件中定义。</li><li>一个<code>pair</code>保存两个数据成员，两个类型不要求一样。</li></ul><p><strong>pair的操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>pair&lt;T1, T2&gt; p;</code></td><td><code>p</code>是一个<code>pair</code>，两个类型分别是<code>T1</code>和<code>T2</code>的成员都进行了值初始化。</td></tr><tr><td><code>pair&lt;T1, T2&gt; p(v1, v2);</code></td><td><code>first</code>和<code>second</code>分别用<code>v1</code>和<code>v2</code>进行初始化。</td></tr><tr><td><code>pair&lt;T1, T2&gt;p = &#123;v1, v2&#125;;</code></td><td>等价于`p(v1, v2)</td></tr><tr><td><code>make_pair(v1, v2);</code></td><td><code>pair</code>的类型从<code>v1</code>和<code>v2</code>的类型推断出来。</td></tr><tr><td><code>p.first</code></td><td>返回<code>p</code>的名为<code>first</code>的数据成员。</td></tr><tr><td><code>p.second</code></td><td>返回<code>p</code>的名为<code>second</code>的数据成员。</td></tr><tr><td><code>p1 relop p2</code></td><td>运算关系符按字典序定义。</td></tr><tr><td><code>p1 == p2</code></td><td>必须两对元素两两相等</td></tr><tr><td><code>p1 != p2</code></td><td>同上</td></tr></tbody></table><h2 id="关联容器操作"><a href="#关联容器操作" class="headerlink" title="关联容器操作"></a>关联容器操作</h2><p><strong>关联容器额外的类型别名</strong>：</p><table><thead><tr><th>类型别名</th><th>解释</th></tr></thead><tbody><tr><td><code>key_type</code></td><td>此容器类型的关键字类型</td></tr><tr><td><code>mapped_type</code></td><td>每个关键字关联的类型，只适用于<code>map</code></td></tr><tr><td><code>value_type</code></td><td>对于<code>map</code>，是<code>pair&lt;const key_type, mapped_type&gt;</code>; 对于<code>set</code>，和<code>key_type</code>相同。</td></tr></tbody></table><h3 id="关联容器迭代器"><a href="#关联容器迭代器" class="headerlink" title="关联容器迭代器"></a>关联容器迭代器</h3><ul><li>解引用一个关联容器迭代器时，会得到一个类型为容器的<code>value_type</code>的值的引用。</li><li><code>set</code>的迭代器是<code>const</code>的。</li><li>遍历关联容器：使用<code>begin</code>和<code>end</code>，遍历<code>map</code>、<code>multimap</code>、<code>set</code>、<code>multiset</code>时，迭代器按<strong>关键字升序</strong>遍历元素。</li></ul><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p><strong>关联容器<code>insert</code>操作</strong>：</p><table><thead><tr><th><code>insert</code>操作</th><th>关联容器</th></tr></thead><tbody><tr><td><code>c.insert(v)</code>  <code>c.emplace(args)</code></td><td><code>v</code>是<code>value_type</code>类型的对象；<code>args</code>用来构造一个元素。 对于<code>map</code>和<code>set</code>，只有元素的关键字不存在<code>c</code>中才插入或构造元素。函数返回一个<code>pair</code>，包含一个迭代器，指向具有指定关键字的元素，以及一个指示插入是否成功的<code>bool</code>值。对于<code>multimap</code>和<code>multiset</code>则会插入范围中的每个元素。</td></tr><tr><td><code>c.insert(b, e)</code> <code>c.insert(il)</code></td><td><code>b</code>和<code>e</code>是迭代器，表示一个<code>c::value_type</code>类型值的范围；<code>il</code>是这种值的花括号列表。函数返回<code>void</code>。对于 <code>map</code>和<code>set</code>，只插入关键字不在<code>c</code>中的元素。</td></tr><tr><td><code>c.insert(p, v)</code>  <code>c.emplace(p, args)</code></td><td>类似<code>insert(v)</code>，但将迭代器<code>p</code>作为一个提示，指出从哪里开始搜索新元素应该存储的位置。返回一个迭代器，指向具有给定关键字的元素。</td></tr></tbody></table><p>向<code>map</code>添加元素：</p><ul><li><code>word_count.insert(&#123;word, 1&#125;);</code></li><li><code>word_count.insert(make_pair(word, 1));</code></li><li><code>word_count.insert(pair&lt;string, size_t&gt;(word, 1));</code></li><li><code>word_count.insert(map&lt;string, size_t&gt;::value_type (word, 1));</code></li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p><strong>从关联容器中删除元素</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.erase(k)</code></td><td>从<code>c</code>中删除每个关键字为<code>k</code>的元素。返回一个<code>size_type</code>值，指出删除的元素的数量。</td></tr><tr><td><code>c.erase(p)</code></td><td>从<code>c</code>中删除迭代器<code>p</code>指定的元素。<code>p</code>必须指向<code>c</code>中一个真实元素，不能等于<code>c.end()</code>。返回一个指向<code>p</code>之后元素的迭代器，若<code>p</code>指向<code>c</code>中的尾元素，则返回<code>c.end()</code></td></tr><tr><td><code>c.erase(b, e)</code></td><td>删除迭代器对<code>b</code>和<code>e</code>所表示范围中的元素。返回<code>e</code>。</td></tr></tbody></table><h3 id="下标操作"><a href="#下标操作" class="headerlink" title="下标操作"></a>下标操作</h3><p><strong><code>map</code>和<code>unordered_map</code>的下标操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c[k]</code></td><td>返回关键字为<code>k</code>的元素；如果<code>k</code>不在<code>c</code>中，添加一个关键字为<code>k</code>的元素，对其值初始化。</td></tr><tr><td><code>c.at(k)</code></td><td>访问关键字为<code>k</code>的元素，带参数检查；若<code>k</code>不存在在<code>c</code>中，抛出一个<code>out_of_range</code>异常。</td></tr></tbody></table><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p><strong>在一个关联容器中查找元素</strong>:</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.find(k)</code></td><td>返回一个迭代器，指向第一个关键字为<code>k</code>的元素，若<code>k</code>不在容器中，则返回尾后迭代器</td></tr><tr><td><code>c.count(k)</code></td><td>返回关键字等于<code>k</code>的元素的数量。对于不允许重复关键字的容器，返回值永远是0或1。</td></tr><tr><td><code>c.lower_bound(k)</code></td><td>返回一个迭代器，指向第一个关键字<strong>不小于</strong><code>k</code>的元素。</td></tr><tr><td><code>c.upper_bound(k)</code></td><td>返回一个迭代器，指向第一个关键字<strong>大于</strong><code>k</code>的元素。</td></tr><tr><td><code>c.equal_range(k)</code></td><td>返回一个迭代器<code>pair</code>，表示关键字等于<code>k</code>的元素的范围。若<code>k</code>不存在，<code>pair</code>的两个成员均等于<code>c.end()</code>。</td></tr></tbody></table><ul><li><code>lower_bound</code>和<code>upper_bound</code>不适用于无序容器。</li><li>下标和<code>at</code>操作只适用于非<code>const</code>的<code>map</code>和<code>unordered_map</code>。</li></ul><h2 id="无序容器"><a href="#无序容器" class="headerlink" title="无序容器"></a>无序容器</h2><ul><li>有序容器使用比较运算符来组织元素；无序容器使用哈希函数和关键字类型的<code>==</code>运算符。</li><li>理论上哈希技术可以获得更好的性能。</li><li>无序容器在存储上组织为一组桶(bucket)，每个桶保存零个或多个元素。无序容器使用一个哈希函数将元素映射到桶。</li></ul><p><strong>无序容器管理操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><strong>桶接口</strong></td><td></td></tr><tr><td><code>c.bucket_count()</code></td><td>正在使用的桶的数目</td></tr><tr><td><code>c.max_bucket_count()</code></td><td>容器能容纳的最多的桶的数目</td></tr><tr><td><code>c.bucket_size(n)</code></td><td>第<code>n</code>个桶中有多少个元素</td></tr><tr><td><code>c.bucket(k)</code></td><td>关键字为<code>k</code>的元素在哪个桶中</td></tr><tr><td><strong>桶迭代</strong></td><td></td></tr><tr><td><code>local_iterator</code></td><td>可以用来访问桶中元素的迭代器类型</td></tr><tr><td><code>const_local_iterator</code></td><td>桶迭代器的<code>const</code>版本</td></tr><tr><td><code>c.begin(n)</code>，<code>c.end(n)</code></td><td>桶<code>n</code>的首元素迭代器</td></tr><tr><td><code>c.cbegin(n)</code>，<code>c.cend(n)</code></td><td>与前两个函数类似，但返回<code>const_local_iterator</code>。</td></tr><tr><td><strong>哈希策略</strong></td><td></td></tr><tr><td><code>c.load_factor()</code></td><td>每个桶的平均元素数量，返回<code>float</code>值。</td></tr><tr><td><code>c.max_load_factor()</code></td><td><code>c</code>试图维护的平均比桶大小，返回<code>float</code>值。<code>c</code>会在需要时添加新的桶，以使得<code>load_factor&lt;=max_load_factor</code></td></tr><tr><td><code>c.rehash(n)</code></td><td>重组存储，使得<code>bucket_count&gt;=n</code>，且<code>bucket_count&gt;size/max_load_factor</code></td></tr><tr><td><code>c.reverse(n)</code></td><td>重组存储，使得<code>c</code>可以保存<code>n</code>个元素且不必<code>rehash</code>。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记12</title>
      <link href="2021/04/10/notes/ch12/"/>
      <url>2021/04/10/notes/ch12/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二章-动态内存"><a href="#第十二章-动态内存" class="headerlink" title="第十二章 动态内存"></a>第十二章 动态内存</h1><ul><li><p>对象的生命周期：</p><ul><li>全局对象在程序启动时分配，结束时销毁。</li><li>局部对象在进入程序块时创建，离开块时销毁。</li><li>局部<code>static</code>对象在第一次使用前分配，在程序结束时销毁。</li><li>动态分配对象：只能显式地被释放。</li></ul></li><li><p>对象的内存位置：</p><ul><li><strong>静态内存</strong>用来保存局部<code>static</code>对象、类<code>static</code>对象、定义在任何函数之外的变量。</li><li><strong>栈内存</strong>用来保存定义在函数内的非<code>static</code>对象。</li><li><strong>堆内存</strong>，又称自由空间，用来存储<strong>动态分配</strong>的对象。</li></ul></li></ul><h2 id="动态内存与智能指针"><a href="#动态内存与智能指针" class="headerlink" title="动态内存与智能指针"></a>动态内存与智能指针</h2><ul><li>动态内存管理：<ul><li><code>new</code>：在动态内存中为对象分配空间并返回一个指向该对象的指针。</li><li><code>delete</code>：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。</li></ul></li><li>智能指针：<ul><li>管理动态对象。</li><li>行为类似常规指针。</li><li>负责自动释放所指向的对象。</li><li>智能指针也是模板。</li></ul></li></ul><h3 id="shared-ptr类"><a href="#shared-ptr类" class="headerlink" title="shared_ptr类"></a>shared_ptr类</h3><p><strong>shared_ptr和unique_ptr都支持的操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>shared_ptr&lt;T&gt; sp</code>  <code>unique_ptr&lt;T&gt; up</code></td><td>空智能指针，可以指向类型是<code>T</code>的对象</td></tr><tr><td><code>p</code></td><td>将<code>p</code>用作一个条件判断，若<code>p</code>指向一个对象，则为<code>true</code></td></tr><tr><td><code>*p</code></td><td>解引用<code>p</code>，获得它指向的对象。</td></tr><tr><td><code>p-&gt;mem</code></td><td>等价于<code>(*p).mem</code></td></tr><tr><td><code>p.get()</code></td><td>返回<code>p</code>中保存的指针，要小心使用，若智能指针释放了对象，返回的指针所指向的对象也就消失了。</td></tr><tr><td><code>swap(p, q)</code> <code>p.swap(q)</code></td><td>交换<code>p</code>和<code>q</code>中的指针</td></tr></tbody></table><p><strong>shared_ptr独有的操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>make_shared&lt;T&gt;(args)</code></td><td>返回一个<code>shared_ptr</code>，指向一个动态分配的类型为<code>T</code>的对象。使用<code>args</code>初始化此对象。</td></tr><tr><td><code>shared_ptr&lt;T&gt;p(q)</code></td><td><code>p</code>是<code>shared_ptr q</code>的拷贝；此操作会<strong>递增</strong><code>q</code>中的计数器。<code>q</code>中的指针必须能转换为<code>T*</code></td></tr><tr><td><code>p = q</code></td><td><code>p</code>和<code>q</code>都是<code>shared_ptr</code>，所保存的指针必须能互相转换。此操作会<strong>递减</strong><code>p</code>的引用计数，<strong>递增</strong><code>q</code>的引用计数；若<code>p</code>的引用计数变为0，则将其管理的原内存释放。</td></tr><tr><td><code>p.unique()</code></td><td>若<code>p.use_count()</code>是1，返回<code>true</code>；否则返回<code>false</code></td></tr><tr><td><code>p.use_count()</code></td><td>返回与<code>p</code>共享对象的智能指针数量；可能很慢，主要用于调试。</td></tr></tbody></table><ul><li><strong>使用动态内存的三种原因</strong>：<ul><li>程序不知道自己需要使用多少对象（比如容器类）。</li><li>程序不知道所需要对象的准确类型。</li><li>程序需要在多个对象间共享数据。</li></ul></li></ul><h3 id="直接管理内存"><a href="#直接管理内存" class="headerlink" title="直接管理内存"></a>直接管理内存</h3><ul><li>用<code>new</code>动态分配和初始化对象。<ul><li><code>new</code>无法为分配的对象命名（因为自由空间分配的内存是无名的），因此是返回一个指向该对象的指针。</li><li><code>int *pi = new int(123);</code></li><li>一旦内存耗尽，会抛出类型是<code>bad_alloc</code>的异常。</li></ul></li><li>用<code>delete</code>将动态内存归还给系统。<ul><li>接受一个指针，指向要释放的对象。</li><li><code>delete</code>后的指针称为空悬指针（dangling pointer）。</li></ul></li><li>使用<code>new</code>和<code>delete</code>管理动态内存存在三个常见问题：<ul><li>1.忘记<code>delete</code>内存。</li><li>2.使用已经释放掉的对象。</li><li>3.同一块内存释放两次。</li></ul></li><li>坚持只使用智能指针可以避免上述所有问题。</li></ul><h3 id="shared-ptr和new结合使用"><a href="#shared-ptr和new结合使用" class="headerlink" title="shared_ptr和new结合使用"></a>shared_ptr和new结合使用</h3><p><strong>定义和改变shared_ptr的其他方法</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>shared_ptr&lt;T&gt; p(q)</code></td><td><code>p</code>管理内置指针<code>q</code>所指向的对象；<code>q</code>必须指向<code>new</code>分配的内存，且能够转换为<code>T*</code>类型</td></tr><tr><td><code>shared_ptr&lt;T&gt; p(u)</code></td><td><code>p</code>从<code>unique_ptr u</code>那里接管了对象的所有权；将<code>u</code>置为空</td></tr><tr><td><code>shared_ptr&lt;T&gt; p(q, d)</code></td><td><code>p</code>接管了内置指针<code>q</code>所指向的对象的所有权。<code>q</code>必须能转换为<code>T*</code>类型。<code>p</code>将使用可调用对象<code>d</code>来代替<code>delete</code>。</td></tr><tr><td><code>shared_ptr&lt;T&gt; p(p2, d)</code></td><td><code>p</code>是<code>shared_ptr p2</code>的拷贝，唯一的区别是<code>p</code>将可调用对象<code>d</code>来代替<code>delete</code>。</td></tr><tr><td><code>p.reset()</code></td><td>若<code>p</code>是唯一指向其对象的<code>shared_ptr</code>，<code>reset</code>会释放此对象。若传递了可选的参数内置指针<code>q</code>，会令<code>p</code>指向<code>q</code>，否则会将<code>p</code>置空。若还传递了参数<code>d</code>，则会调用<code>d</code>而不是<code>delete</code>来释放<code>q</code>。</td></tr><tr><td><code>p.reset(q)</code></td><td>同上</td></tr><tr><td><code>p.reset(q, d)</code></td><td>同上</td></tr></tbody></table><h3 id="智能指针和异常"><a href="#智能指针和异常" class="headerlink" title="智能指针和异常"></a>智能指针和异常</h3><ul><li>如果使用智能指针，即使程序块由于异常过早结束，智能指针类也能确保在内存不需要的时候将其释放。</li><li><strong>智能指针陷阱</strong>：<ul><li>不用相同的内置指针初始化（或<code>reset</code>）多个智能指针</li><li>不<code>delete get()</code>返回的指针。</li><li>如果你使用<code>get()</code>返回的指针，记得当最后一个对应的智能指针销毁后，你的指针就无效了。</li><li>如果你使用智能指针管理的资源不是<code>new</code>分配的内存，记住传递给它一个删除器。</li></ul></li></ul><h3 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h3><ul><li>某一个时刻只能有一个<code>unique_ptr</code>指向一个给定的对象。</li><li>不支持拷贝或者赋值操作。</li><li>向后兼容：<code>auto_ptr</code>：老版本，具有<code>unique_ptr</code>的部分特性。特别是，不能在容器中保存<code>auto_ptr</code>，也不能从函数返回<code>auto_ptr</code>。</li></ul><p><strong>unique_ptr操作</strong>:</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>unique_ptr&lt;T&gt; u1</code></td><td>空<code>unique_ptr</code>，可以指向类型是<code>T</code>的对象。<code>u1</code>会使用<code>delete</code>来是释放它的指针。</td></tr><tr><td><code>unique_ptr&lt;T, D&gt; u2</code></td><td><code>u2</code>会使用一个类型为<code>D</code>的可调用对象来释放它的指针。</td></tr><tr><td><code>unique_ptr&lt;T, D&gt; u(d)</code></td><td>空<code>unique_ptr</code>，指向类型为<code>T</code>的对象，用类型为<code>D</code>的对象<code>d</code>代替<code>delete</code></td></tr><tr><td><code>u = nullptr</code></td><td>释放<code>u</code>指向的对象，将<code>u</code>置为空。</td></tr><tr><td><code>u.release()</code></td><td><code>u</code>放弃对指针的控制权，返回指针，并将<code>u</code>置空。</td></tr><tr><td><code>u.reset()</code></td><td>释放<code>u</code>指向的对象</td></tr><tr><td><code>u.reset(q)</code></td><td>令<code>u</code>指向<code>q</code>指向的对象</td></tr><tr><td><code>u.reset(nullptr)</code></td><td>将<code>u</code>置空</td></tr></tbody></table><h3 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h3><ul><li><code>weak_ptr</code>是一种不控制所指向对象生存期的智能指针。</li><li>指向一个由<code>shared_ptr</code>管理的对象，不改变<code>shared_ptr</code>的引用计数。</li><li>一旦最后一个指向对象的<code>shared_ptr</code>被销毁，对象就会被释放，不管有没有<code>weak_ptr</code>指向该对象。</li></ul><p><strong>weak_ptr操作</strong>:</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>weak_ptr&lt;T&gt; w</code></td><td>空<code>weak_ptr</code>可以指向类型为<code>T</code>的对象</td></tr><tr><td><code>weak_ptr&lt;T&gt; w(sp)</code></td><td>与<code>shared_ptr</code>指向相同对象的<code>weak_ptr</code>。<code>T</code>必须能转换为<code>sp</code>指向的类型。</td></tr><tr><td><code>w = p</code></td><td><code>p</code>可以是<code>shared_ptr</code>或一个<code>weak_ptr</code>。赋值后<code>w</code>和<code>p</code>共享对象。</td></tr><tr><td><code>w.reset()</code></td><td>将<code>w</code>置为空。</td></tr><tr><td><code>w.use_count()</code></td><td>与<code>w</code>共享对象的<code>shared_ptr</code>的数量。</td></tr><tr><td><code>w.expired()</code></td><td>若<code>w.use_count()</code>为0，返回<code>true</code>，否则返回<code>false</code></td></tr><tr><td><code>w.lock()</code></td><td>如果<code>expired</code>为<code>true</code>，则返回一个空<code>shared_ptr</code>；否则返回一个指向<code>w</code>的对象的<code>shared_ptr</code>。</td></tr></tbody></table><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><h3 id="new和数组"><a href="#new和数组" class="headerlink" title="new和数组"></a>new和数组</h3><ul><li><p><code>new</code>一个动态数组：</p><ul><li>类型名之后加一对方括号，指明分配的对象数目（必须是整型，不必是常量）。</li><li>返回<strong>指向第一个对象的指针</strong>。</li><li><code>int *p = new int[size];</code></li></ul></li><li><p><code>delete</code>一个动态数组：</p><ul><li><code>delete [] p;</code></li></ul></li><li><p><code>unique_ptr</code>和数组：</p><ul><li>指向数组的<code>unique_ptr</code>不支持成员访问运算符（点和箭头）。</li></ul></li></ul><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>unique_ptr&lt;T[]&gt; u</code></td><td><code>u</code>可以指向一个动态分配的数组，整数元素类型为<code>T</code></td></tr><tr><td><code>unique_ptr&lt;T[]&gt; u(p)</code></td><td><code>u</code>指向内置指针<code>p</code>所指向的动态分配的数组。<code>p</code>必须能转换为类型<code>T*</code>。</td></tr><tr><td><code>u[i]</code></td><td>返回<code>u</code>拥有的数组中位置<code>i</code>处的对象。<code>u</code>必须指向一个数组。</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="allocator类"><a href="#allocator类" class="headerlink" title="allocator类"></a>allocator类</h3><ul><li>标准库<code>allocator</code>类定义在头文件<code>memory</code>中，帮助我们将内存分配和对象构造分离开。</li><li>分配的是原始的、未构造的内存。</li><li><code>allocator</code>是一个模板。</li><li><code>allocator&lt;string&gt; alloc;</code></li></ul><p><strong>标准库allocator类及其算法</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>allocator&lt;T&gt; a</code></td><td>定义了一个名为<code>a</code>的<code>allocator</code>对象，它可以为类型为<code>T</code>的对象分配内存</td></tr><tr><td><code>a.allocate(n)</code></td><td>分配一段原始的、未构造的内存，保存<code>n</code>个类型为<code>T</code>的对象。</td></tr><tr><td><code>a.deallocate(p, n)</code></td><td>释放从<code>T*</code>指针<code>p</code>中地址开始的内存，这块内存保存了<code>n</code>个类型为<code>T</code>的对象；<code>p</code>必须是一个先前由<code>allocate</code>返回的指针。且<code>n</code>必须是<code>p</code>创建时所要求的大小。在调用<code>deallocate</code>之前，用户必须对每个在这块内存中创建的对象调用<code>destroy</code>。</td></tr><tr><td><code>a.construct(p, args)</code></td><td><code>p</code>必须是一个类型是<code>T*</code>的指针，指向一块原始内存；<code>args</code>被传递给类型为<code>T</code>的构造函数，用来在<code>p</code>指向的内存中构造一个对象。</td></tr><tr><td><code>a.destroy(p)</code></td><td><code>p</code>为<code>T*</code>类型的指针，此算法对<code>p</code>指向的对象执行析构函数。</td></tr></tbody></table><p><strong>allocator伴随算法</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>uninitialized_copy(b, e, b2)</code></td><td>从迭代器<code>b</code>和<code>e</code>给定的输入范围中拷贝元素到迭代器<code>b2</code>指定的未构造的原始内存中。<code>b2</code>指向的内存必须足够大，能够容纳输入序列中元素的拷贝。</td></tr><tr><td><code>uninitialized_copy_n(b, n, b2)</code></td><td>从迭代器<code>b</code>指向的元素开始，拷贝<code>n</code>个元素到<code>b2</code>开始的内存中。</td></tr><tr><td><code>uninitialized_fill(b, e, t)</code></td><td>在迭代器<code>b</code>和<code>e</code>执行的原始内存范围中创建对象，对象的值均为<code>t</code>的拷贝。</td></tr><tr><td><code>uninitialized_fill_n(b, n, t)</code></td><td>从迭代器<code>b</code>指向的内存地址开始创建<code>n</code>个对象。<code>b</code>必须指向足够大的未构造的原始内存，能够容纳给定数量的对象。</td></tr></tbody></table><ul><li>定义在头文件<code>memory</code>中。</li><li>在给定目的位置创建元素，而不是由系统分配内存给他们。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记13</title>
      <link href="2021/04/10/notes/ch13/"/>
      <url>2021/04/10/notes/ch13/</url>
      
        <content type="html"><![CDATA[<h1 id="第十三章-拷贝控制"><a href="#第十三章-拷贝控制" class="headerlink" title="第十三章 拷贝控制"></a>第十三章 拷贝控制</h1><p><strong>拷贝控制操作</strong>（copy control）:</p><ul><li>拷贝构造函数（copy constructor）</li><li>拷贝赋值运算符（copy-assignment operator）</li><li>移动构造函数（move constructor）</li><li>移动赋值函数（move-assignement operator）</li><li>析构函数（destructor）</li></ul><h2 id="拷贝、赋值和销毁"><a href="#拷贝、赋值和销毁" class="headerlink" title="拷贝、赋值和销毁"></a>拷贝、赋值和销毁</h2><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><ul><li>如果一个构造函数的第一个参数是<strong>自身类类型的引用</strong>，且任何额外参数都有默认值，则此构造函数是<strong>拷贝构造函数</strong>。</li><li><code>class Foo&#123; public: Foo(const Foo&amp;); &#125;</code></li><li><strong>合成的拷贝构造函数</strong>（synthesized copy constructor）：会将参数的成员逐个拷贝到正在创建的对象中。</li><li><strong>拷贝初始化</strong>：<ul><li>将右侧运算对象拷贝到正在创建的对象中，如果需要，还需进行类型转换。</li><li>通常使用拷贝构造函数完成。</li><li><code>string book = &quot;9-99&quot;;</code></li><li>出现场景：<ul><li>用<code>=</code>定义变量时。</li><li>将一个对象作为实参传递给一个非引用类型的形参。</li><li>从一个返回类型为非引用类型的函数返回一个对象。</li><li>用花括号列表初始化一个数组中的元素或者一个聚合类中的成员。</li></ul></li></ul></li></ul><h3 id="拷贝赋值运算符"><a href="#拷贝赋值运算符" class="headerlink" title="拷贝赋值运算符"></a>拷贝赋值运算符</h3><ul><li><strong>重载赋值运算符</strong>：<ul><li>重写一个名为<code>operator=</code>的函数.</li><li>通常返回一个指向其左侧运算对象的引用。</li><li><code>Foo&amp; operator=(const Foo&amp;);</code></li></ul></li><li><strong>合成拷贝赋值运算符</strong>：<ul><li>将右侧运算对象的每个非<code>static</code>成员赋予左侧运算对象的对应成员。</li></ul></li></ul><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><ul><li>释放对象所使用的资源，并销毁对象的非<code>static</code>数据成员。</li><li>名字由波浪号接类名构成。没有返回值，也不接受参数。</li><li><code>~Foo();</code></li><li>调用时机：<ul><li>变量在离开其作用域时。</li><li>当一个对象被销毁时，其成员被销毁。</li><li>容器被销毁时，其元素被销毁。</li><li>动态分配的对象，当对指向它的指针应用<code>delete</code>运算符时。</li><li>对于临时对象，当创建它的完整表达式结束时。</li></ul></li><li><strong>合成析构函数</strong>：<ul><li>空函数体执行完后，<strong>成员会被自动销毁。</strong></li><li>注意：析构函数体本身并不直接销毁成员。</li></ul></li></ul><h3 id="三-五法则"><a href="#三-五法则" class="headerlink" title="三/五法则"></a>三/五法则</h3><ul><li>需要析构函数的类也需要拷贝和赋值操作。</li><li>需要拷贝操作的类也需要赋值操作，反之亦然。</li></ul><h3 id="使用-default"><a href="#使用-default" class="headerlink" title="使用=default"></a>使用=default</h3><ul><li>可以通过将拷贝控制成员定义为<code>=default</code>来显式地要求编译器生成合成的版本。</li><li>合成的函数将隐式地声明为内联的。</li></ul><h3 id="阻止拷贝"><a href="#阻止拷贝" class="headerlink" title="阻止拷贝"></a>阻止拷贝</h3><ul><li>大多数类应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是隐式地还是显式地。</li><li>定义删除的函数：<code>=delete</code>。</li><li>虽然声明了它们，但是不能以任何方式使用它们。</li><li>析构函数不能是删除的成员。</li><li>如果一个类有数据成员不能默认构造、拷贝、复制或者销毁，则对应的成员函数将被定义为删除的。</li><li>老版本使用<code>private</code>声明来阻止拷贝。</li></ul><h2 id="拷贝控制和资源管理"><a href="#拷贝控制和资源管理" class="headerlink" title="拷贝控制和资源管理"></a>拷贝控制和资源管理</h2><ul><li>类的行为可以像一个值，也可以像一个指针。<ul><li>行为像值：对象有自己的状态，副本和原对象是完全独立的。</li><li>行为像指针：共享状态，拷贝一个这种类的对象时，副本和原对象使用相同的底层数据。</li></ul></li></ul><h2 id="交换操作"><a href="#交换操作" class="headerlink" title="交换操作"></a>交换操作</h2><ul><li>管理资源的类通常还定义一个名为<code>swap</code>的函数。</li><li>经常用于重排元素顺序的算法。</li><li>用<code>swap</code>而不是<code>std::swap</code>。</li></ul><h2 id="对象移动"><a href="#对象移动" class="headerlink" title="对象移动"></a>对象移动</h2><ul><li>很多拷贝操作后，原对象会被销毁，因此引入移动操作可以大幅度提升性能。</li><li>在新标准中，我们可以用容器保存不可拷贝的类型，只要它们可以被移动即可。</li><li>标准库容器、<code>string</code>和<code>shared_ptr</code>类既可以支持移动也支持拷贝。<code>IO</code>类和<code>unique_ptr</code>类可以移动但不能拷贝。</li></ul><h3 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h3><ul><li>新标准引入右值引用以支持移动操作。</li><li>通过<code>&amp;&amp;</code>获得右值引用。</li><li>只能绑定到一个将要销毁的对象。</li><li>常规引用可以称之为左值引用。</li><li>左值持久，右值短暂。</li></ul><p><strong>move函数</strong>：</p><ul><li><code>int &amp;&amp;rr2 = std::move(rr1);</code></li><li><code>move</code>告诉编译器，我们有一个左值，但我希望像右值一样处理它。</li><li>调用<code>move</code>意味着：除了对<code>rr1</code>赋值或者销毁它外，我们将不再使用它。</li></ul><h3 id="移动构造函数和移动赋值运算符"><a href="#移动构造函数和移动赋值运算符" class="headerlink" title="移动构造函数和移动赋值运算符"></a>移动构造函数和移动赋值运算符</h3><ul><li><strong>移动构造函数</strong>：<ul><li>第一个参数是该类类型的一个引用，关键是，这个引用参数是一个<strong>右值引用</strong>。</li><li><code>StrVec::StrVec(StrVec &amp;&amp;s) noexcept&#123;&#125;</code></li><li>不分配任何新内存，只是接管给定的内存。</li></ul></li><li><strong>移动赋值运算符</strong>：<ul><li><code>StrVec&amp; StrVec::operator=(StrVec &amp;&amp; rhs) noexcept&#123;&#125;</code> </li></ul></li><li>移动右值，拷贝左值。</li><li>如果没有移动构造函数，右值也被拷贝。</li><li>更新三/五法则：如果一个类定义了任何一个拷贝操作，它就应该定义所有五个操作。</li><li>移动迭代器：<ul><li><code>make_move_iterator</code>函数讲一个普通迭代器转换为一个移动迭代器。</li></ul></li><li>建议：小心地使用移动操作，以获得性能提升。</li></ul><h3 id="右值引用和成员函数"><a href="#右值引用和成员函数" class="headerlink" title="右值引用和成员函数"></a>右值引用和成员函数</h3><ul><li>区分移动和拷贝的重载函数通常有一个版本接受一个<code>const T&amp;</code>，而另一个版本接受一个<code>T&amp;&amp;</code>。</li><li>引用限定符：<ul><li>在参数列表后面防止一个<code>&amp;</code>，限定只能向可修改的左值赋值而不能向右值赋值。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记10</title>
      <link href="2021/04/10/notes/ch10/"/>
      <url>2021/04/10/notes/ch10/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-泛型算法"><a href="#第十章-泛型算法" class="headerlink" title="第十章 泛型算法"></a>第十章 泛型算法</h1><h2 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h2><ul><li>因为它们实现共同的操作，所以称之为“<strong>算法</strong>”；而“<strong>泛型</strong>”、指的是它们可以操作在多种容器类型上。</li><li>泛型算法本身不执行容器操作，只是单独依赖迭代器和迭代器操作实现。</li><li>头文件： <code>#include &lt;algorithm&gt;</code>或者 <code>#include &lt;numeric&gt;</code>(算数相关)</li><li>大多数算法是通过遍历两个迭代器标记的一段元素来实现其功能。</li><li>必要的编程假定：算法永远不会改变底层容器的大小。算法可能改变容器中保存的元素的值，也可能在容器内移动元素，但不能直接添加或者删除元素。</li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul><li><code>vector&lt;int&gt;::const_iterator result = find(vec.begin(), vec.end(), search_value);</code></li><li>输入：两个标记范围的迭代器和目标查找值。返回：如果找到，返回对应的迭代器，否则返回第二个参数，即标记结尾的迭代器。</li></ul><h2 id="初识泛型算法"><a href="#初识泛型算法" class="headerlink" title="初识泛型算法"></a>初识泛型算法</h2><ul><li>标准库提供了超过100个算法，但这些算法有一致的结构。</li><li>理解算法的最基本的方法是了解它们是否读取元素、改变元素、重排元素顺序。</li></ul><h3 id="只读算法"><a href="#只读算法" class="headerlink" title="只读算法"></a>只读算法</h3><ul><li>只读取范围中的元素，不改变元素。</li><li>如 <code>find</code>和 <code>accumulate</code>（在<code>numeric</code>中定义，求和）。</li><li><code>find_first_of</code>，输入：两对迭代器标记两段范围，在第一段中找第二段中任意元素，返回第一个匹配的元素，找不到返回第一段的<code>end</code>迭代器。</li><li>通常最好使用<code>cbegin</code>和<code>cend</code>。</li><li><code>equal</code>：确定两个序列是否保存相同的值。</li></ul><h3 id="写容器元素的算法"><a href="#写容器元素的算法" class="headerlink" title="写容器元素的算法"></a>写容器元素的算法</h3><ul><li>一些算法将新值赋予序列中的元素。</li><li>算法不检查写操作。</li><li><code>fill</code>： <code>fill(vec.begin(), vec.end(), 0);</code> 将每个元素重置为0</li><li><code>fill_n</code>： <code>fill_n(vec.begin(), 10, 0);</code></li><li>插入迭代器<code>back_inserter</code>：<ul><li>用来确保算法有足够的空间存储数据。</li><li><code>#include &lt;iterator&gt;</code></li><li><code>back_inserter(vec)</code></li></ul></li><li>拷贝算法<code>copy</code>：</li><li>输入：前两个参数指定输入范围，第三个指向目标序列。</li><li><code>copy (ilst.begin(), ilst.end(), back_inserter(ivec));</code></li><li><code>copy</code>时必须保证目标目的序列至少要包含与输入序列一样多的元素。</li></ul><h3 id="重排容器元素的算法"><a href="#重排容器元素的算法" class="headerlink" title="重排容器元素的算法"></a>重排容器元素的算法</h3><ul><li>这些算法会重排容器中元素的顺序。</li><li>排序算法<code>sort</code>：<ul><li>接受两个迭代器，表示要排序的元素范围。</li></ul></li><li>消除重复<code>unique</code>：<ul><li>之前要先调用<code>sort</code></li><li>返回的迭代器指向最后一个不重复元素之后的位置。</li><li>顺序会变，重复的元素被“删除”。</li><li>并没有真正删除，真正删除必须使用容器操作。</li></ul></li></ul><h2 id="定制操作"><a href="#定制操作" class="headerlink" title="定制操作"></a>定制操作</h2><h3 id="向算法传递函数："><a href="#向算法传递函数：" class="headerlink" title="向算法传递函数："></a>向算法传递函数：</h3><ul><li><p>谓词（<code>predicate</code>）：</p><ul><li>是一个<strong>可调用的表达式</strong>，返回结果是一个能用作条件的值</li><li>一元谓词：接受一个参数</li><li>二元谓词：接受两个参数</li></ul></li><li><p>例子：</p><ul><li><code>stable_sort</code>：<ul><li>保留相等元素的原始相对位置。</li><li><code>stable_sort(words.begin(), words.end(), isShorter);</code></li></ul></li></ul></li></ul><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><ul><li><p>有时可能希望操作可以接受更多的参数。</p></li><li><p><code>lambda</code>表达式表示一个可调用的代码单元，可以理解成是一个未命名的内联函数。</p></li><li><p>形式：<code>[capture list](parameter list) -&gt; return type &#123;function body&#125;</code>。</p><ul><li>其中<code>capture list</code>捕获列表是一个<code>lambda</code>所在函数定义的局部变量的列表（通常为空）。不可忽略。</li><li><code>return type</code>是返回类型。可忽略。</li><li><code>parameter</code>是参数列表。可忽略。</li><li><code>function body</code>是函数体。不可忽略。</li><li><code>auto f = [] &#123;return 42;&#125;</code></li></ul></li><li><p>例子：</p><ul><li><code>find_if</code>:<ul><li>接受一对表示范围的迭代器和一个谓词，用来查找第一个满足特定要求的元素。返回第一个使谓词返回非0值的元素。</li><li><code>auto wc = find_if(words.begin(), words.end(), [sz](const string &amp;a)&#123;return a.size() &gt;= sz;&#125;);</code></li></ul></li><li><code>for_each</code>：<ul><li>接受一个可调用对象，并对序列中每个元素调用此对象。</li><li><code>for_each(wc, words.end(), [](const string &amp;s)&#123;cout &lt;&lt; s &lt;&lt; &quot; &quot;;&#125;)</code></li></ul></li></ul></li></ul><h3 id="lambda捕获和返回"><a href="#lambda捕获和返回" class="headerlink" title="lambda捕获和返回"></a>lambda捕获和返回</h3><ul><li>定义<code>lambda</code>时会生成一个新的类类型和该类型的一个对象。</li><li>默认情况下，从<code>lambda</code>生成的类都包含一个对应该<code>lambda</code>所捕获的变量的数据成员，在<code>lambda</code>对象创建时被初始化。</li><li><strong>值捕获</strong>：前提是变量可以拷贝，<code>size_t v1 = 42; auto f = [v1] &#123;return v1;&#125;;</code>。</li><li><strong>引用捕获</strong>：必须保证在<code>lambda</code>执行时，变量是存在的，<code>auto f2 = [&amp;v1] &#123;return v1;&#125;;</code></li><li>尽量减少捕获的数据量，尽可能避免捕获指针或引用。</li><li><strong>隐式捕获</strong>：让编译器推断捕获列表，在捕获列表中写一个<code>&amp;</code>（引用方式）或<code>=</code>（值方式）。<code>auto f3 = [=] &#123;return v1;&#125;</code></li></ul><p><strong>lambda捕获列表</strong>：</p><table><thead><tr><th>捕获列表</th><th>解释</th></tr></thead><tbody><tr><td><code>[]</code></td><td>空捕获列表。<code>lambda</code>不能使用所在函数中的变量。一个<code>lambda</code>只有在捕获变量后才能使用它们。</td></tr><tr><td><code>[names]</code></td><td><code>names</code>是一个逗号分隔的名字列表，这些名字都是在<code>lambda</code>所在函数的局部变量，捕获列表中的变量都被拷贝，名字前如果使用了<code>&amp;</code>，则采用引用捕获方式。</td></tr><tr><td><code>[&amp;]</code></td><td>隐式捕获列表，采用引用捕获方式。<code>lambda</code>体中所使用的来自所在函数的实体都采用引用方式使用。</td></tr><tr><td><code>[=]</code></td><td>隐式捕获列表，采用值捕获方式。</td></tr><tr><td><code>[&amp;, identifier_list]</code></td><td><code>identifier_list</code>是一个逗号分隔的列表，包含0个或多个来自所在函数的变量。这些变量采用值捕获方式，而任何隐式捕获的变量都采用引用方式捕获。<code>identifier_list</code>中的名字前面不能使用<code>&amp;</code></td></tr><tr><td><code>[=, identifier_list]</code></td><td><code>identifier_list</code>中的变量采用引用方式捕获，而任何隐式捕获的变量都采用值方式捕获。<code>identifier_list</code>中的名字不能包括<code>this</code>，且前面必须使用<code>&amp;</code></td></tr></tbody></table><h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><ul><li><code>lambda</code>表达式更适合在一两个地方使用的简单操作。</li><li>如果是很多地方使用相同的操作，还是需要定义函数。</li><li>函数如何包装成一元谓词？使用参数绑定。</li><li>标准库<code>bind</code>函数：<ul><li>定义在头文件<code>functional</code>中，可以看做为一个通用的函数适配器。</li><li><code>auto newCallable = bind(callable, arg_list);</code></li><li>我们再调用<code>newCallable</code>的时候，<code>newCallable</code>会调用<code>callable</code>并传递给它<code>arg_list</code>中的参数。</li><li><code>_n</code>代表第n个位置的参数。定义在<code>placeholders</code>的命名空间中。<code>using std::placeholder::_1;</code></li><li><code>auto g = bind(f, a, b, _2, c, _1);</code>，调用<code>g(_1, _2)</code>实际上调用<code>f(a, b, _2, c, _1)</code></li><li>非占位符的参数要使用引用传参，必须使用标准库<code>ref</code>函数或者<code>cref</code>函数。</li></ul></li></ul><h2 id="再探迭代器"><a href="#再探迭代器" class="headerlink" title="再探迭代器"></a>再探迭代器</h2><h3 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h3><ul><li>插入器是一种迭代器适配器，接受一个容器，生成一个迭代器，能实现向给定容器添加元素。</li><li>三种类型：<ul><li><code>back_inserter</code>：创建一个使用<code>push_back</code>的迭代器。</li><li><code>front_inserter</code>创建一个使用<code>push_front</code>的迭代器。</li><li><code>inserter</code>创建一个使用<code>insert</code>的迭代器。接受第二个参数，即一个指向给定容器的迭代器，元素会被查到迭代器所指向的元素之前。</li></ul></li></ul><p><strong>插入迭代器操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>it=t</code></td><td>在<code>it</code>指定的当前位置插入值<code>t</code>。假定<code>c</code>是<code>it</code>绑定的容器，依赖于插入迭代器的不同种类，此赋值会分别调用<code>c.push_back(t)</code>、<code>c.push_front(t)</code>、<code>c.insert(t, p)</code>，其中<code>p</code>是传递给<code>inserter</code>的迭代器位置</td></tr><tr><td><code>*it, ++it, it++</code></td><td>这些操作虽然存在，但不会对<code>it</code>做任何事情，每个操作都返回<code>it</code></td></tr></tbody></table><h3 id="iostream迭代器"><a href="#iostream迭代器" class="headerlink" title="iostream迭代器"></a>iostream迭代器</h3><ul><li>迭代器可与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。</li><li>通过使用流迭代器，我们可以用泛型算法从流对象中读取数据以及向其写入数据。</li></ul><p><strong>istream_iterator的操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>istream_iterator&lt;T&gt; in(is);</code></td><td><code>in</code>从输入流<code>is</code>读取类型为<code>T</code>的值</td></tr><tr><td><code>istream_iterator&lt;T&gt; end;</code></td><td>读取类型是<code>T</code>的值的<code>istream_iterator</code>迭代器，表示尾后位置</td></tr><tr><td><code>in1 == in2</code></td><td><code>in1</code>和<code>in2</code>必须读取相同类型。如果他们都是尾后迭代器，或绑定到相同的输入，则两者相等。</td></tr><tr><td><code>in1 != in2</code></td><td>类似上条</td></tr><tr><td><code>*in</code></td><td>返回从流中读取的值</td></tr><tr><td><code>in-&gt;mem</code></td><td>与<code>*(in).mem</code>含义相同</td></tr><tr><td><code>++in, in++</code></td><td>使用元素类型所定义的<code>&gt;&gt;</code>运算符从流中读取下一个值。前置版本返回一个指向递增后迭代器的引用，后置版本返回旧值。</td></tr></tbody></table><p><strong>ostream_iterator的操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>ostream_iterator&lt;T&gt; out(os);</code></td><td><code>out</code>将类型为<code>T</code>的值写到输出流<code>os</code>中</td></tr><tr><td><code>ostream_iterator&lt;T&gt; out(os, d);</code></td><td><code>out</code>将类型为<code>T</code>的值写到输出流<code>os</code>中，每个值后面都输出一个<code>d</code>。<code>d</code>指向一个空字符结尾的字符数组。</td></tr><tr><td><code>out = val</code></td><td>用<code>&lt;&lt;</code>运算符将<code>val</code>写入到<code>out</code>所绑定的<code>ostream</code>中。<code>val</code>的类型必须和<code>out</code>可写的类型兼容。</td></tr><tr><td><code>*out, ++out, out++</code></td><td>这些运算符是存在的，但不对<code>out</code>做任何事情。每个运算符都返回<code>out</code>。</td></tr></tbody></table><h3 id="反向迭代器"><a href="#反向迭代器" class="headerlink" title="反向迭代器"></a>反向迭代器</h3><ul><li>反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。</li><li>对于反向迭代器，递增和递减的操作含义会颠倒。</li><li>实现向后遍历，配合<code>rbegin</code>和<code>rend</code>。</li></ul><h2 id="泛型算法结构"><a href="#泛型算法结构" class="headerlink" title="泛型算法结构"></a>泛型算法结构</h2><h3 id="5类迭代器"><a href="#5类迭代器" class="headerlink" title="5类迭代器"></a>5类迭代器</h3><table><thead><tr><th>迭代器类别</th><th>解释</th><th>支持的操作</th></tr></thead><tbody><tr><td>输入迭代器</td><td>只读，不写；单遍扫描，只能递增</td><td><code>==</code>,<code>!=</code>,<code>++</code>,<code>*</code>,<code>-&gt;</code></td></tr><tr><td>输出迭代器</td><td>只写，不读；单遍扫描，只能递增</td><td><code>++</code>,<code>*</code></td></tr><tr><td>前向迭代器</td><td>可读写；多遍扫描，只能递增</td><td><code>==</code>,<code>!=</code>,<code>++</code>,<code>*</code>,<code>-&gt;</code></td></tr><tr><td>双向迭代器</td><td>可读写；多遍扫描，可递增递减</td><td><code>==</code>,<code>!=</code>,<code>++</code>,<code>--</code>,<code>*</code>,<code>-&gt;</code></td></tr><tr><td>随机访问迭代器</td><td>可读写，多遍扫描，支持全部迭代器运算</td><td><code>==</code>,<code>!=</code>,<code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>++</code>,<code>--</code>,<code>+</code>,<code>+=</code>,<code>-</code>,<code>-=</code>,<code>*</code>,<code>-&gt;</code>,<code>iter[n]</code>==<code>*(iter[n])</code></td></tr></tbody></table><h3 id="算法的形参模式"><a href="#算法的形参模式" class="headerlink" title="算法的形参模式"></a>算法的形参模式</h3><ul><li><code>alg(beg, end, other args);</code></li><li><code>alg(beg, end, dest, other args);</code></li><li><code>alg(beg, end, beg2, other args);</code></li><li><code>alg(beg, end, beg2, end2, other args);</code></li></ul><p>其中，<code>alg</code>是算法名称，<code>beg</code>和<code>end</code>表示算法所操作的输入范围。<code>dest</code>、<code>beg2</code>、<code>end2</code>都是迭代器参数，是否使用要依赖于执行的操作。</p><h3 id="算法命名规范"><a href="#算法命名规范" class="headerlink" title="算法命名规范"></a>算法命名规范</h3><ul><li>一些算法使用重载形式传递一个谓词。</li><li>接受一个元素值的算法通常有一个<strong>不同名</strong>的版本：加<code>_if</code>，接受一个谓词代替元素值。</li><li>区分拷贝元素的版本和不拷贝的版本：拷贝版本通常加<code>_copy</code>。</li></ul><h2 id="特定容器算法"><a href="#特定容器算法" class="headerlink" title="特定容器算法"></a>特定容器算法</h2><ul><li>对于<code>list</code>和<code>forward_list</code>，优先使用成员函数版本的算法而不是通用算法。</li></ul><p><strong>list和forward_list成员函数版本的算法</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>lst.merge(lst2)</code></td><td>将来自<code>lst2</code>的元素合并入<code>lst</code>，二者都必须是有序的，元素将从<code>lst2</code>中删除。</td></tr><tr><td><code>lst.merge(lst2, comp)</code></td><td>同上，给定比较操作。</td></tr><tr><td><code>lst.remove(val)</code></td><td>调用<code>erase</code>删除掉与给定值相等(==)的每个元素</td></tr><tr><td><code>lst.remove_if(pred)</code></td><td>调用<code>erase</code>删除掉令一元谓词为真的每个元素</td></tr><tr><td><code>lst.reverse()</code></td><td>反转<code>lst</code>中元素的顺序</td></tr><tr><td><code>lst.sort()</code></td><td>使用<code>&lt;</code>排序元素</td></tr><tr><td><code>lst.sort(comp)</code></td><td>使用给定比较操作排序元素</td></tr><tr><td><code>lst.unique()</code></td><td>调用<code>erase</code>删除同一个值的连续拷贝。使用<code>==</code>。</td></tr><tr><td><code>lst.unique(pred)</code></td><td>调用<code>erase</code>删除同一个值的连续拷贝。使用给定的二元谓词。</td></tr></tbody></table><ul><li>上面的操作都返回<code>void</code></li></ul><p><strong>list和forward_list的splice成员函数版本的参数</strong>：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><code>(p, lst2)</code></td><td><code>p</code>是一个指向<code>lst</code>中元素的迭代器，或者一个指向<code>flst</code>首前位置的迭代器。函数将<code>lst2</code>中的所有元素移动到<code>lst</code>中<code>p</code>之前的位置或是<code>flst</code>中<code>p</code>之后的位置。将元素从<code>lst2</code>中删除。<code>lst2</code>的类型必须和<code>lst</code>相同，而且不能是同一个链表。</td></tr><tr><td><code>(p, lst2, p2)</code></td><td>同上，<code>p2</code>是一个指向<code>lst2</code>中位置的有效的迭代器，将<code>p2</code>指向的元素移动到<code>lst</code>中，或将<code>p2</code>之后的元素移动到<code>flst</code>中。<code>lst2</code>可以是于<code>lst</code>或<code>flst</code>相同的链表。</td></tr><tr><td><code>(p, lst2, b, e)</code></td><td><code>b</code>和<code>e</code>表示<code>lst2</code>中的合法范围。将给定范围中的元素从<code>lst2</code>移动到<code>lst</code>或<code>first</code>中。<code>lst2</code>与<code>lst</code>可以使相同的链表，但<code>p</code>不能指向给定范围中的元素。</td></tr></tbody></table><ul><li>使用<code>lst.splice(args)</code>或<code>flst.splice_after(args)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记16</title>
      <link href="2021/04/10/notes/ch16/"/>
      <url>2021/04/10/notes/ch16/</url>
      
        <content type="html"><![CDATA[<h1 id="第十六章-模板和泛型编程"><a href="#第十六章-模板和泛型编程" class="headerlink" title="第十六章 模板和泛型编程"></a>第十六章 模板和泛型编程</h1><ul><li>面向对象编程和泛型编程都能处理在编写程序时不知道类型的情况。<ul><li>OOP能处理类型在程序运行之前都未知的情况；</li><li>泛型编程中，在编译时就可以获知类型。</li></ul></li></ul><h2 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h2><ul><li><strong>模板</strong>：模板是泛型编程的基础。一个模板就是一个创建类或函数的蓝图或者说公式。</li></ul><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><ul><li><code>template &lt;typename T&gt; int compare(const T &amp;v1, const T &amp;v2)&#123;&#125;</code></li><li>模板定义以关键字 <code>template</code>开始，后接<strong>模板形参表</strong>，模板形参表是用<strong>尖括号</strong><code>&lt;&gt;</code>括住的一个或多个<strong>模板形参</strong>的列表，用逗号分隔，<strong>不能为空</strong>。</li><li>使用模板时，我们显式或隐式地指定模板实参，将其绑定到模板参数上。</li><li>模板类型参数：类型参数前必须使用关键字<code>class</code>或者<code>typename</code>，这两个关键字含义相同，可以互换使用。旧的程序只能使用<code>class</code>。</li><li>非类型模板参数：表示一个值而非一个类型。实参必须是常量表达式。<code>template &lt;class T, size_t N&gt; void array_init(T (&amp;parm)[N])&#123;&#125;</code></li><li>内联函数模板： <code>template &lt;typename T&gt; inline T min(const T&amp;, const T&amp;);</code></li><li>模板程序应该尽量减少对实参类型的要求。</li><li>函数模板和类模板成员函数的定义通常放在头文件中。</li></ul><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><ul><li>类模板用于生成类的蓝图。</li><li>不同于函数模板，编译器不能推断模板参数类型。</li><li><strong>定义类模板</strong>：<ul><li><code>template &lt;class Type&gt; class Queue &#123;&#125;;</code></li></ul></li><li>实例化类模板：提供显式模板实参列表，来实例化出特定的类。</li><li>一个类模板中所有的实例都形成一个独立的类。</li><li><strong>模板形参作用域</strong>：模板形参的名字可以在声明为模板形参之后直到模板声明或定义的末尾处使用。</li><li>类模板的成员函数：<ul><li><code>template &lt;typename T&gt; ret-type Blob::member-name(parm-list)</code></li></ul></li><li>默认情况下，对于一个实例化了的类模板，其成员只有在使用时才被实例化。</li><li>新标准允许模板将自己的类型参数成为友元。<code>template &lt;typename T&gt; class Bar&#123;friend T;&#125;;</code>。</li><li>模板类型别名：因为模板不是一个类型，因此无法定义一个<code>typedef</code>引用一个模板，但是新标准允许我们为类模板定义一个类型别名：<code>template&lt;typename T&gt; using twin = pair&lt;T, T&gt;;</code></li></ul><h3 id="模板参数"><a href="#模板参数" class="headerlink" title="模板参数"></a>模板参数</h3><ul><li>模板参数与作用域：一个模板参数名的可用范围是在声明之后，至模板声明或定义结束前。</li><li>一个特定文件所需要的所有模板的声明通常一起放置在文件开始位置。</li><li>当我们希望通知编译器一个名字表示类型时，必须使用关键字<code>typename</code>，而不能使用<code>class</code>。</li><li>默认模板实参：<code>template &lt;class T = int&gt; class Numbers&#123;&#125;</code></li></ul><h3 id="成员模板"><a href="#成员模板" class="headerlink" title="成员模板"></a>成员模板</h3><ul><li>成员模板（member template）：本身是模板的函数成员。<ul><li>普通（非模板）类的成员模板。</li><li>类模板的成员模板。</li></ul></li></ul><h3 id="控制实例化"><a href="#控制实例化" class="headerlink" title="控制实例化"></a>控制实例化</h3><ul><li>动机：在多个文件中实例化相同模板的额外开销可能非常严重。</li><li>显式实例化：<ul><li><code>extern template declaration;  // 实例化声明</code></li><li><code>template declaration;  // 实例化定义</code></li></ul></li></ul><h3 id="效率与灵活性"><a href="#效率与灵活性" class="headerlink" title="效率与灵活性"></a>效率与灵活性</h3><h2 id="模板实参推断"><a href="#模板实参推断" class="headerlink" title="模板实参推断"></a>模板实参推断</h2><ul><li>对函数模板，编译器利用调用中的函数实参来确定其模板参数，这个过程叫<strong>模板实参推断</strong>。</li></ul><h3 id="类型转换与模板类型参数"><a href="#类型转换与模板类型参数" class="headerlink" title="类型转换与模板类型参数"></a>类型转换与模板类型参数</h3><ul><li>能够自动转换类型的只有：<ul><li>和其他函数一样，顶层<code>const</code>会被忽略。</li><li>数组实参或函数实参转换为指针。</li></ul></li></ul><h3 id="函数模板显式实参"><a href="#函数模板显式实参" class="headerlink" title="函数模板显式实参"></a>函数模板显式实参</h3><ul><li>某些情况下，编译器无法推断出模板实参的类型。</li><li>定义：<code>template &lt;typename T1, typename T2, typename T3&gt; T1 sum(T2, T3);</code></li><li>使用函数显式实参调用：<code>auto val3 = sum&lt;long long&gt;(i, lng); // T1是显式指定，T2和T3都是从函数实参类型推断而来</code></li><li><strong>注意</strong>：正常类型转换可以应用于显式指定的实参。</li></ul><h3 id="尾置返回类型与类型转换"><a href="#尾置返回类型与类型转换" class="headerlink" title="尾置返回类型与类型转换"></a>尾置返回类型与类型转换</h3><ul><li>使用场景：并不清楚返回结果的准确类型，但知道所需类型是和参数相关的。</li><li><code>template &lt;typename It&gt; auto fcn(It beg, It end) -&gt; decltype(*beg)</code></li><li>尾置返回允许我们在参数列表之后声明返回类型。</li></ul><p>标准库的<strong>类型转换</strong>模板：</p><ul><li>定义在头文件<code>type_traits</code>中。</li></ul><table><thead><tr><th>对<code>Mod&lt;T&gt;</code>，其中<code>Mod</code>是：</th><th>若<code>T</code>是：</th><th>则<code>Mod&lt;T&gt;::type</code>是：</th></tr></thead><tbody><tr><td><code>remove_reference</code></td><td><code>X&amp;</code>或<code>X&amp;&amp;</code></td><td><code>X</code></td></tr><tr><td></td><td>否则</td><td><code>T</code></td></tr><tr><td><code>add_const</code></td><td><code>X&amp;</code>或<code>const X</code>或函数</td><td><code>T</code></td></tr><tr><td></td><td>否则</td><td><code>const T</code></td></tr><tr><td><code>add_lvalue_reference</code></td><td><code>X&amp;</code></td><td><code>T</code></td></tr><tr><td></td><td><code>X&amp;&amp;</code></td><td><code>X&amp;</code></td></tr><tr><td></td><td>否则</td><td><code>T&amp;</code></td></tr><tr><td><code>add_rvalue_reference</code></td><td><code>X&amp;</code>或<code>X&amp;&amp;</code></td><td><code>T</code></td></tr><tr><td></td><td>否则</td><td><code>T&amp;&amp;</code></td></tr><tr><td><code>remove_pointer</code></td><td><code>X*</code></td><td><code>X</code></td></tr><tr><td></td><td>否则</td><td><code>T</code></td></tr><tr><td><code>add_pointer</code></td><td><code>X&amp;</code>或<code>X&amp;&amp;</code></td><td><code>X*</code></td></tr><tr><td></td><td>否则</td><td><code>T*</code></td></tr><tr><td><code>make_signed</code></td><td><code>unsigned X</code></td><td><code>X</code></td></tr><tr><td></td><td>否则</td><td><code>T</code></td></tr><tr><td><code>make_unsigned</code></td><td>带符号类型</td><td><code>unsigned X</code></td></tr><tr><td></td><td>否则</td><td><code>T</code></td></tr><tr><td><code>remove_extent</code></td><td><code>X[n]</code></td><td><code>X</code></td></tr><tr><td></td><td>否则</td><td><code>T</code></td></tr><tr><td><code>remove_all_extents</code></td><td><code>X[n1][n2]...</code></td><td><code>X</code></td></tr><tr><td></td><td>否则</td><td><code>T</code></td></tr></tbody></table><h3 id="函数指针和实参推断"><a href="#函数指针和实参推断" class="headerlink" title="函数指针和实参推断"></a>函数指针和实参推断</h3><ul><li>当使用一个函数模板初始化一个函数指针或为一个函数指针赋值时，编译器使用指针的类型来推断模板实参。</li></ul><h3 id="模板实参推断和引用"><a href="#模板实参推断和引用" class="headerlink" title="模板实参推断和引用"></a>模板实参推断和引用</h3><ul><li>从左值引用函数推断类型：若形如<code>T&amp;</code>，则只能传递给它一个左值。但如果是<code>const T&amp;</code>，则可以接受一个右值。</li><li>从右值引用函数推断类型：若形如<code>T&amp;&amp;</code>，则只能传递给它一个右值。</li><li>引用折叠和右值引用参数：<ul><li>规则1：当我们将一个左值传递给函数的右值引用参数，且右值引用指向模板类型参数时（如<code>T&amp;&amp;</code>），编译器会推断模板类型参数为实参的左值引用类型。</li><li>规则2：如果我们间接创造一个引用的引用，则这些引用形成了<strong>折叠</strong>。折叠引用只能应用在间接创造的引用的引用，如类型别名或模板参数。对于一个给定类型<code>X</code>：<ul><li><code>X&amp; &amp;</code>、<code>X&amp; &amp;&amp;</code>和<code>X&amp;&amp; &amp;</code>都折叠成类型<code>X&amp;</code>。</li><li>类型<code>X&amp;&amp; &amp;&amp;</code>折叠成<code>X&amp;&amp;</code>。</li></ul></li><li>上面两个例外规则导致两个重要结果：<ul><li>1.如果一个函数参数是一个指向模板类型参数的右值引用（如<code>T&amp;&amp;</code>），则它可以被绑定到一个左值上；</li><li>2.如果实参是一个左值，则推断出的模板实参类型将是一个左值引用，且函数参数将被实例化为一个左值引用参数（<code>T&amp;</code>）。</li></ul></li></ul></li></ul><h3 id="理解std-move"><a href="#理解std-move" class="headerlink" title="理解std::move"></a>理解std::move</h3><ul><li>标准库<code>move</code>函数是使用右值引用的模板的一个很好的例子。</li><li>从一个左值<code>static_cast</code>到一个右值引用是允许的。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">remove_reference</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>type<span class="token operator">&amp;&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><ul><li>使用一个名为<code>forward</code>的新标准库设施来传递参数，它能够保持原始实参的类型。</li><li>定义在头文件<code>utility</code>中。</li><li>必须通过显式模板实参来调用。</li><li><code>forward</code>返回显式实参类型的右值引用。即，<code>forward&lt;T&gt;</code>的返回类型是<code>T&amp;&amp;</code>。</li></ul><h2 id="重载与模板"><a href="#重载与模板" class="headerlink" title="重载与模板"></a>重载与模板</h2><ul><li>多个可行模板：当有多个重载模板对一个调用提供同样好的匹配时，会选择最特例化的版本。</li><li>非模板和模板重载：对于一个调用，如果一个非函数模板与一个函数模板提供同样好的匹配，则选择非模板版本。</li></ul><h2 id="可变参数模板"><a href="#可变参数模板" class="headerlink" title="可变参数模板"></a>可变参数模板</h2><p><strong>可变参数模板</strong>就是一个接受可变数目参数的模板函数或模板类。</p><ul><li>可变数目的参数被称为参数包。<ul><li>模板参数包：标识另个或多个模板参数。</li><li>函数参数包：标识另个或者多个函数参数。</li></ul></li><li>用一个省略号来指出一个模板参数或函数参数，表示一个包。</li><li><code>template &lt;typename T, typename... Args&gt;</code>，<code>Args</code>第一个模板参数包。</li><li><code>void foo(const T &amp;t, const Args&amp; ... rest);</code>，<code>rest</code>是一个函数参数包。</li><li><code>sizeof...</code>运算符，返回参数的数目。</li></ul><h3 id="编写可变参数函数模板"><a href="#编写可变参数函数模板" class="headerlink" title="编写可变参数函数模板"></a>编写可变参数函数模板</h3><ul><li>可变参数函数通常是递归的：第一步调用处理包中的第一个实参，然后用剩余实参调用自身。</li></ul><h3 id="包扩展"><a href="#包扩展" class="headerlink" title="包扩展"></a>包扩展</h3><ul><li>对于一个参数包，除了获取它的大小，唯一能做的事情就是<strong>扩展</strong>（expand）。</li><li>扩展一个包时，还要提供用于每个扩展元素的<strong>模式</strong>（pattern）。</li></ul><h3 id="转发参数包"><a href="#转发参数包" class="headerlink" title="转发参数包"></a>转发参数包</h3><ul><li>新标准下可以组合使用可变参数模板和<code>forward</code>机制，实现将实参不变地传递给其他函数。</li></ul><h2 id="模板特例化（Specializations）"><a href="#模板特例化（Specializations）" class="headerlink" title="模板特例化（Specializations）"></a>模板特例化（Specializations）</h2><ul><li>定义函数模板特例化：关键字<code>template</code>后面跟一个空尖括号对（<code>&lt;&gt;</code>）。</li><li>特例化的本质是实例化一个模板，而不是重载它。特例化不影响函数匹配。</li><li>模板及其特例化版本应该声明在同一个头文件中。所有同名模板的声明应该放在前面，然后是特例化版本。</li><li>我们可以部分特例化类模板，但不能部分特例化函数模板。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记14</title>
      <link href="2021/04/10/notes/ch14/"/>
      <url>2021/04/10/notes/ch14/</url>
      
        <content type="html"><![CDATA[<h1 id="第十四章-重载运算与类型转换"><a href="#第十四章-重载运算与类型转换" class="headerlink" title="第十四章 重载运算与类型转换"></a>第十四章 重载运算与类型转换</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>重载运算符是具有特殊名字的函数：由关键字<code>operator</code>和其后要定义的运算符号共同组成。</li><li>当一个重载的运算符是成员函数时，<code>this</code>绑定到左侧运算对象。动态运算符符函数的参数数量比运算对象的数量<strong>少一个</strong>。</li><li>只能重载大多数的运算符，而不能发明新的运算符号。</li><li>重载运算符的优先级和结合律跟对应的内置运算符保持一致。</li><li>调用方式：<ul><li><code>data1 + data2;</code></li><li><code>operator+(data1, data2);</code></li></ul></li><li>是否是成员函数：<ul><li>赋值（<code>=</code>）、下标（<code>[]</code>）、调用（<code>()</code>）和成员访问箭头（<code>-&gt;</code>）运算符必须是成员。</li><li>复合赋值运算符一般来说是成员。</li><li>改变对象状态的运算符或者和给定类型密切相关的运算符通常是成员，如递增、解引用。</li><li>具有对称性的运算符如算术、相等性、关系和位运算符等，通常是非成员函数。</li></ul></li></ul><p><strong>运算符</strong>:</p><table><thead><tr><th>可以被重载</th><th>不可以被重载</th></tr></thead><tbody><tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>^</code></td><td><code>::</code>, <code>.*</code>, <code>.</code>, <code>? :</code>,</td></tr><tr><td><code>&amp;</code>, `</td><td><code>, </code>~`, <code>!</code>, <code>,</code>, <code>=</code></td></tr><tr><td><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>++</code>, <code>--</code></td><td></td></tr><tr><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>==</code>, <code>!=</code>, <code>&amp;&amp;</code>, `</td><td></td></tr><tr><td><code>+=</code>, <code>-=</code>, <code>/=</code>, <code>%=</code>, <code>^=</code>, <code>&amp;=</code></td><td></td></tr><tr><td>&#124;=, <code>*=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>[]</code>, <code>()</code></td><td></td></tr><tr><td><code>-&gt;</code>, <code>-&gt;*</code>, <code>new</code>, <code>new[]</code>, <code>delete</code>, <code>delete[]</code></td><td></td></tr></tbody></table><h2 id="输入和输出运算符"><a href="#输入和输出运算符" class="headerlink" title="输入和输出运算符"></a>输入和输出运算符</h2><h3 id="重载输出运算符-lt-lt"><a href="#重载输出运算符-lt-lt" class="headerlink" title="重载输出运算符&lt;&lt;"></a>重载输出运算符&lt;&lt;</h3><ul><li>第一个形参通常是一个非常量的<code>ostream</code>对象的引用。非常量是因为向流中写入会改变其状态；而引用是因为我们无法复制一个<code>ostream</code>对象。</li><li>输入输出运算符必须是非成员函数。</li></ul><h3 id="重载输入运算符-gt-gt"><a href="#重载输入运算符-gt-gt" class="headerlink" title="重载输入运算符&gt;&gt;"></a>重载输入运算符&gt;&gt;</h3><ul><li>第一个形参通常是运算符将要读取的流的因不用，第二个形参是将要读取到的（非常量）对象的引用。</li><li>输入运算符必须处理输入可能失败的情况，而输出运算符不需要。</li></ul><h2 id="算数和关系运算符（-、-、-、-）"><a href="#算数和关系运算符（-、-、-、-）" class="headerlink" title="算数和关系运算符（+、-、*、/）"></a>算数和关系运算符（+、-、*、/）</h2><ul><li>如果类同时定义了算数运算符和相关的复合赋值运算符，则通常情况下应该使用复合赋值来实现算数运算符。</li></ul><h3 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符=="></a>相等运算符==</h3><ul><li>如果定义了<code>operator==</code>，则这个类也应该定义<code>operator!=</code>。</li><li>相等运算符和不等运算符的一个应该把工作委托给另一个。</li><li>相等运算符应该具有传递性。</li><li>如果某个类在逻辑上有相等性的含义，则该类应该定义<code>operator==</code>，这样做可以使用户更容易使用标准库算法来处理这个类。</li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li>如果存在唯一一种逻辑可靠的<code>&lt;</code>定义，则应该考虑为这个类定义<code>&lt;</code>运算符。如果同时还包含<code>==</code>，则当且晋档<code>&lt;</code>的定义和<code>++</code>产生的结果一直时才定义<code>&lt;</code>运算符。</li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符="></a>赋值运算符=</h2><ul><li>我们可以重载赋值运算符。不论形参的类型是什么，赋值运算符都必须定义为成员函数。</li><li>赋值运算符必须定义成类的成员，复合赋值运算符通常情况下也应该这么做。这两类运算符都应该返回左侧运算对象的引用。</li></ul><h2 id="下标运算符"><a href="#下标运算符" class="headerlink" title="下标运算符[]"></a>下标运算符[]</h2><ul><li>下标运算符必须是成员函数。</li><li>一般会定义两个版本：<ul><li>1.返回普通引用。</li><li>2.类的常量成员，并返回常量引用。</li></ul></li></ul><h2 id="递增和递减运算符（-、–）"><a href="#递增和递减运算符（-、–）" class="headerlink" title="递增和递减运算符（++、–）"></a>递增和递减运算符（++、–）</h2><ul><li>定义递增和递减运算符的类应该同时定义前置版本和后置版本。</li><li>通常应该被定义成类的成员。</li><li>为了和内置版本保持一致，前置运算符应该返回递增或递减后对象的引用。</li><li>同样为了和内置版本保持一致，后置运算符应该返回递增或递减前对象的值，而不是引用。</li><li>后置版本接受一个额外的，不被使用的<code>int</code>类型的形参。因为不会用到，所以无需命名。</li></ul><h2 id="成员访问运算符（-、-gt-）"><a href="#成员访问运算符（-、-gt-）" class="headerlink" title="成员访问运算符（*、-&gt;）"></a>成员访问运算符（*、-&gt;）</h2><ul><li>箭头运算符必须是类的成员。解引用运算符通常也是类的成员，尽管并非必须如此。</li><li>重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象。</li><li>解引用和乘法的区别是一个是一元运算符，一个是二元运算符。</li></ul><h2 id="函数调用运算符"><a href="#函数调用运算符" class="headerlink" title="函数调用运算符"></a>函数调用运算符</h2><ul><li>可以像使用函数一样，调用该类的对象。因为这样对待类同时也能存储状态，所以与普通函数相比更加灵活。</li><li>函数调用运算符必须是成员函数。</li><li>一个类可以定义多个不同版本的调用运算符，相互之间应该在参数数量或类型上有所区别。</li><li>如果累定义了调用运算符，则该类的对象称作<strong>函数对象</strong>。</li></ul><h3 id="lambda是函数对象"><a href="#lambda是函数对象" class="headerlink" title="lambda是函数对象"></a><code>lambda</code>是函数对象</h3><ul><li><code>lambda</code>捕获变量：<code>lambda</code>产生的类必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数。</li></ul><h3 id="标准库定义的函数对象"><a href="#标准库定义的函数对象" class="headerlink" title="标准库定义的函数对象"></a>标准库定义的函数对象</h3><p><strong>标准库函数对象</strong>:</p><table><thead><tr><th>算术</th><th>关系</th><th>逻辑</th></tr></thead><tbody><tr><td><code>plus&lt;Type&gt;</code></td><td><code>equal_to&lt;Type&gt;</code></td><td><code>logical_and&lt;Type&gt;</code></td></tr><tr><td><code>minus&lt;Type&gt;</code></td><td><code>not_equal_to&lt;Type&gt;</code></td><td><code>logical_or&lt;Type&gt;</code></td></tr><tr><td><code>multiplies&lt;Type&gt;</code></td><td><code>greater&lt;Type&gt;</code></td><td><code>logical_not&lt;Type&gt;</code></td></tr><tr><td><code>divides&lt;Type&gt;</code></td><td><code>greater_equal&lt;Type&gt;</code></td><td></td></tr><tr><td><code>modulus&lt;Type&gt;</code></td><td><code>less&lt;Type&gt;</code></td><td></td></tr><tr><td><code>negate&lt;Type&gt;</code></td><td><code>less_equal&lt;Type&gt;</code></td><td></td></tr></tbody></table><ul><li>可以在算法中使用标准库函数对象。</li></ul><h3 id="可调用对象与function"><a href="#可调用对象与function" class="headerlink" title="可调用对象与function"></a>可调用对象与function</h3><p><strong>标准库function类型</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>function&lt;T&gt; f;</code></td><td><code>f</code>是一个用来存储可调用对象的空<code>function</code>，这些可调用对象的调用形式应该与类型<code>T</code>相同。</td></tr><tr><td><code>function&lt;T&gt; f(nullptr);</code></td><td>显式地构造一个空<code>function</code></td></tr><tr><td><code>function&lt;T&gt; f(obj)</code></td><td>在<code>f</code>中存储可调用对象<code>obj</code>的副本</td></tr><tr><td><code>f</code></td><td>将<code>f</code>作为条件：当<code>f</code>含有一个可调用对象时为真；否则为假。</td></tr><tr><td>定义为<code>function&lt;T&gt;</code>的成员的类型</td><td></td></tr><tr><td><code>result_type</code></td><td>该<code>function</code>类型的可调用对象返回的类型</td></tr><tr><td><code>argument_type</code></td><td>当<code>T</code>有一个或两个实参时定义的类型。如果<code>T</code>只有一个实参，则<code>argument_type</code></td></tr><tr><td><code>first_argument_type</code></td><td>第一个实参的类型</td></tr><tr><td><code>second_argument_type</code></td><td>第二个实参的类型</td></tr></tbody></table><ul><li>例如：声明一个<code>function</code>类型，它可以表示接受两个<code>int</code>，返回一个<code>int</code>的可调用对象。<code>function&lt;int(int, int)&gt;</code></li></ul><h2 id="重载、类型转换、运算符"><a href="#重载、类型转换、运算符" class="headerlink" title="重载、类型转换、运算符"></a>重载、类型转换、运算符</h2><h3 id="类型转换运算符"><a href="#类型转换运算符" class="headerlink" title="类型转换运算符"></a>类型转换运算符</h3><ul><li>类型转换运算符是类的一种特殊成员函数，它负责将一个类类型的值转换成其他类型。类型转换函数的一般形式如下：<code>operator type() const;</code></li><li>一个类型转换函数必须是类的成员函数；它不能声明返回类型，形参列表也必须为空。类型转换函数通常应该是<code>const</code>。</li><li>避免过度使用类型转换函数。</li><li>C++11引入了显式的类型转换运算符。</li><li>向<code>bool</code>的类型转换通常用在条件部分，因此<code>operator bool</code>一般定义成<code>explicit</code>的。</li></ul><h3 id="避免有二义性的类型转换"><a href="#避免有二义性的类型转换" class="headerlink" title="避免有二义性的类型转换"></a>避免有二义性的类型转换</h3><ul><li>通常，不要为类第几个亿相同的类型转换，也不要在类中定义两个及以上转换源或转换目标是算术类型的转换。</li><li>在调用重载函数时，如果需要额外的标准类型转换，则该转换的级别只有当所有可行函数都请求同一个用户定义的类型转换时才有用。如果所需的用户定义的类型转换不止一个，则该调用具有二义性。</li></ul><h3 id="函数匹配与重载运算符"><a href="#函数匹配与重载运算符" class="headerlink" title="函数匹配与重载运算符"></a>函数匹配与重载运算符</h3><ul><li>如果<code>a</code>是一种类型，则表达式<code>a sym b</code>可能是：<ul><li><code>a.operatorsym(b);</code></li><li><code>operatorsym(a,b);</code></li></ul></li><li>如果我们队同一个类既提供了转换目标是算术类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记15</title>
      <link href="2021/04/10/notes/ch15/"/>
      <url>2021/04/10/notes/ch15/</url>
      
        <content type="html"><![CDATA[<h1 id="第十五章-面向对象程序设计"><a href="#第十五章-面向对象程序设计" class="headerlink" title="第十五章 面向对象程序设计"></a>第十五章 面向对象程序设计</h1><h2 id="OOP：概述"><a href="#OOP：概述" class="headerlink" title="OOP：概述"></a>OOP：概述</h2><ul><li>面向对象程序设计（object-oriented programming）的核心思想是数据抽象、继承和动态绑定。</li><li><strong>继承</strong>（inheritance）：<ul><li>通过继承联系在一起的类构成一种层次关系。</li><li>通常在层次关系的根部有一个<strong>基类</strong>（base class）。</li><li>其他类直接或者简介从基类继承而来，这些继承得到的类成为<strong>派生类</strong>（derived class）。</li><li>基类负责定义在层次关系中所有类共同拥有的成员，而每个派生类定义各自特有的成员。</li><li>对于某些函数，基类希望它的派生类个自定义适合自己的版本，此时基类就将这些函数声明成<strong>虚函数</strong>（virtual function）。</li><li>派生类必须通过使用<strong>类派生列表</strong>（class derivation list）明确指出它是从哪个基类继承而来。形式：一个冒号，后面紧跟以逗号分隔的基类列表，每个基类前都可以有访问说明符。<code>class Bulk_quote : public Quote&#123;&#125;;</code></li><li>派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上<code>virtual</code>关键字，也可以不加。C++11新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个<code>override</code>关键字。</li></ul></li><li><strong>动态绑定</strong>（dynamic binding，又称运行时绑定）：<ul><li>使用同一段代码可以分别处理基类和派生类的对象。</li><li>函数的运行版本由实参决定，即在运行时选择函数的版本。</li></ul></li></ul><h2 id="定义基类和派生类"><a href="#定义基类和派生类" class="headerlink" title="定义基类和派生类"></a>定义基类和派生类</h2><h3 id="定义基类"><a href="#定义基类" class="headerlink" title="定义基类"></a>定义基类</h3><ul><li>基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。</li><li>基类通过在其成员函数的声明语句前加上关键字<code>virtual</code>使得该函数执行<strong>动态绑定</strong>。</li><li>如果成员函数没有被声明为虚函数，则解析过程发生在编译时而非运行时。</li><li>访问控制：<ul><li><code>protected</code> ： 基类和和其派生类还有友元可以访问。</li><li><code>private</code> ： 只有基类本身和友元可以访问。</li></ul></li></ul><h3 id="定义派生类"><a href="#定义派生类" class="headerlink" title="定义派生类"></a>定义派生类</h3><ul><li>派生类必须通过类派生列表（class derivation list）明确指出它是从哪个基类继承而来。形式：冒号，后面紧跟以逗号分隔的基类列表，每个基类前面可以有一下三种访问说明符的一个：<code>public</code>、<code>protected</code>、<code>private</code>。</li><li>C++11新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个<code>override</code>关键字。</li><li>派生类构造函数：派生类必须使用基类的构造函数去初始化它的基类部分。</li><li>静态成员：如果基类定义了一个基类成员，则在整个继承体系中只存在该成员的唯一定义。</li><li>派生类的声明：声明中不包含它的派生列表。</li><li>C++11新标准提供了一种防止继承的方法，在类名后面跟一个关键字<code>final</code>。</li></ul><h3 id="类型转换与继承"><a href="#类型转换与继承" class="headerlink" title="类型转换与继承"></a>类型转换与继承</h3><ul><li>理解基类和派生类之间的类型抓换是理解C++语言面向对象编程的关键所在。</li><li>可以将基类的指针或引用绑定到派生类对象上。</li><li>不存在从基类向派生类的隐式类型转换。</li><li>派生类向基类的自动类型转换只对指针或引用类型有效，对象之间不存在类型转换。</li></ul><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><ul><li>使用虚函数可以执行动态绑定。</li><li>OOP的核心思想是多态性（polymorphism）。</li><li>当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。</li><li>派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上<code>virtual</code>关键字，也可以不加。</li><li>C++11新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个<code>override</code>关键字。</li><li>如果我们想覆盖某个虚函数，但不小心把形参列表弄错了，这个时候就不会覆盖基类中的虚函数。加上<code>override</code>可以明确程序员的意图，让编译器帮忙确认参数列表是否出错。</li><li>如果虚函数使用默认实参，则基类和派生类中定义的默认实参最好一致。</li><li>通常，只有成员函数（或友元）中的代码才需要使用<strong>作用域运算符</strong>（<code>::</code>）来回避虚函数的机制。</li></ul><h2 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h2><ul><li><strong>纯虚函数</strong>（pure virtual）：清晰地告诉用户当前的函数是没有实际意义的。纯虚函数无需定义，只用在函数体的位置前书写<code>=0</code>就可以将一个虚函数说明为纯虚函数。</li><li>含有纯虚函数的类是<strong>抽象基类</strong>（abstract base class）。不能创建抽象基类的对象。</li></ul><h2 id="访问控制与继承"><a href="#访问控制与继承" class="headerlink" title="访问控制与继承"></a>访问控制与继承</h2><ul><li>受保护的成员：<ul><li><code>protected</code>说明符可以看做是<code>public</code>和<code>private</code>中的产物。</li><li>类似于私有成员，受保护的成员对类的用户来说是不可访问的。</li><li>类似于公有成员，受保护的成员对于派生类的成员和友元来说是可访问的。</li><li>派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。派生类对于一个基类对象中的受保护成员没有任何访问特权。</li></ul></li><li>派生访问说明符：<ul><li>对于派生类的成员（及友元）能否访问其直接积累的成员没什么影响。</li><li>派生访问说明符的目的是：控制派生类用户对于基类成员的访问权限。比如<code>struct Priv_Drev: private Base&#123;&#125;</code>意味着在派生类<code>Priv_Drev</code>中，从<code>Base</code>继承而来的部分都是<code>private</code>的。</li></ul></li><li>友元关系不能继承。</li><li>改变个别成员的可访问性：使用<code>using</code>。</li><li>默认情况下，使用<code>class</code>关键字定义的派生类是私有继承的；使用<code>struct</code>关键字定义的派生类是公有继承的。</li></ul><h2 id="继承中的类作用域"><a href="#继承中的类作用域" class="headerlink" title="继承中的类作用域"></a>继承中的类作用域</h2><ul><li>每个类定义自己的作用域，在这个作用域内我们定义类的成员。当存在继承关系时，派生类的作用域嵌套在其基类的作用域之内。</li><li>派生类的成员将隐藏同名的基类成员。</li><li>除了覆盖继承而来的虚函数之外，派生类最好不要重用其他定义在基类中的名字。</li></ul><h2 id="构造函数与拷贝控制"><a href="#构造函数与拷贝控制" class="headerlink" title="构造函数与拷贝控制"></a>构造函数与拷贝控制</h2><h3 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h3><ul><li>基类通常应该定义一个虚析构函数，这样我们就能动态分配继承体系中的对象了。</li><li>如果基类的析构函数不是虚函数，则<code>delete</code>一个指向派生类对象的基类指针将产生未定义的行为。</li><li>虚析构函数将阻止合成移动操作。</li></ul><h3 id="合成拷贝控制与继承"><a href="#合成拷贝控制与继承" class="headerlink" title="合成拷贝控制与继承"></a>合成拷贝控制与继承</h3><ul><li>基类或派生类的合成拷贝控制成员的行为和其他合成的构造函数、赋值运算符或析构函数类似：他们对类本身的成员依次进行初始化、赋值或销毁的操作。</li></ul><h3 id="派生类的拷贝控制成员"><a href="#派生类的拷贝控制成员" class="headerlink" title="派生类的拷贝控制成员"></a>派生类的拷贝控制成员</h3><ul><li>当派生类定义了拷贝或移动操作时，该操作负责拷贝或移动包括基类部分成员在内的整个对象。</li><li>派生类析构函数：派生类析构函数先执行，然后执行基类的析构函数。</li></ul><h3 id="继承的构造函数"><a href="#继承的构造函数" class="headerlink" title="继承的构造函数"></a>继承的构造函数</h3><ul><li>C++11新标准中，派生类可以重用其直接基类定义的构造函数。</li><li>如<code>using Disc_quote::Disc_quote;</code>，注明了要继承<code>Disc_quote</code>的构造函数。</li></ul><h2 id="容器与继承"><a href="#容器与继承" class="headerlink" title="容器与继承"></a>容器与继承</h2><ul><li>当我们使用容器存放继承体系中的对象时，通常必须采用间接存储的方式。</li><li>派生类对象直接赋值给积累对象，其中的派生类部分会被切掉。</li><li>在容器中放置（智能）指针而非对象。</li><li>对于C++面向对象的编程来说，一个悖论是我们无法直接使用对象进行面向对象编程。相反，我们必须使用指针和引用。因为指针会增加程序的复杂性，所以经常定义一些辅助的类来处理这些复杂的情况。</li></ul><h2 id="文本查询程序再探"><a href="#文本查询程序再探" class="headerlink" title="文本查询程序再探"></a>文本查询程序再探</h2><ul><li>使系统支持：单词查询、逻辑非查询、逻辑或查询、逻辑与查询。</li></ul><h3 id="面向对象的解决方案"><a href="#面向对象的解决方案" class="headerlink" title="面向对象的解决方案"></a>面向对象的解决方案</h3><ul><li>将几种不同的查询建模成相互独立的类，这些类共享一个公共基类：<ul><li><code>WordQuery</code></li><li><code>NotQuery</code></li><li><code>OrQuery</code></li><li><code>AndQuery</code>  </li></ul></li><li>这些类包含两个操作：<ul><li><code>eval</code>：接受一个<code>TextQuery</code>对象并返回一个<code>QueryResult</code>。</li><li><code>rep</code>：返回基础查询的<code>string</code>表示形式。</li></ul></li><li>继承和组合：<ul><li>当我们令一个类公有地继承另一个类时，派生类应当反映与基类的“是一种（Is A）”的关系。</li><li>类型之间另一种常见的关系是“有一个（Has A）”的关系。</li></ul></li><li>对于面向对象编程的新手来说，想要理解一个程序，最困难的部分往往是理解程序的设计思路。一旦掌握了设计思路，接下来的实现也就水到渠成了。</li></ul><p><strong>Query程序设计</strong>:</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>Query</code>程序接口类和操作</td><td></td></tr><tr><td><code>TextQuery</code></td><td>该类读入给定的文件并构建一个查找图。包含一个<code>query</code>操作，它接受一个<code>string</code>实参，返回一个<code>QueryResult</code>对象；该<code>QueryResult</code>对象表示<code>string</code>出现的行。</td></tr><tr><td><code>QueryResult</code></td><td>该类保存一个<code>query</code>操作的结果。</td></tr><tr><td><code>Query</code></td><td>是一个接口类，指向<code>Query_base</code>派生类的对象。</td></tr><tr><td><code>Query q(s)</code></td><td>将<code>Query</code>对象<code>q</code>绑定到一个存放着<code>string s</code>的新<code>WordQuery</code>对象上。</td></tr><tr><td><code>q1 &amp; q2</code></td><td>返回一个<code>Query</code>对象，该<code>Query</code>绑定到一个存放<code>q1</code>和<code>q2</code>的新<code>AndQuery</code>对象上。</td></tr><tr><td>`q1</td><td>q2`</td></tr><tr><td><code>~q</code></td><td>返回一个<code>Query</code>对象，该<code>Query</code>绑定到一个存放<code>q</code>的新<code>NotQuery</code>对象上。</td></tr><tr><td><code>Query</code>程序实现类</td><td></td></tr><tr><td><code>Query_base</code></td><td>查询类的抽象基类</td></tr><tr><td><code>WordQuery</code></td><td><code>Query_base</code>的派生类，用于查找一个给定的单词</td></tr><tr><td><code>NotQuery</code></td><td><code>Query_base</code>的派生类，用于查找一个给定的单词</td></tr><tr><td><code>BinaryQuery</code></td><td><code>Query_base</code>的派生类，查询结果是<code>Query</code>运算对象没有出现的行的集合</td></tr><tr><td><code>OrQuery</code></td><td><code>Query_base</code>的派生类，返回它的两个运算对象分别出现的行的并集</td></tr><tr><td><code>AndQuery</code></td><td><code>Query_base</code>的派生类，返回它的两个运算对象分别出现的行的交集</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记18</title>
      <link href="2021/04/10/notes/ch18/"/>
      <url>2021/04/10/notes/ch18/</url>
      
        <content type="html"><![CDATA[<h1 id="第十八章-用于大型程序的工具"><a href="#第十八章-用于大型程序的工具" class="headerlink" title="第十八章 用于大型程序的工具"></a>第十八章 用于大型程序的工具</h1><p>大规模应用程序的特殊要求包括：</p><ul><li>在独立开发的子系统之间协同处理错误的能力。</li><li>使用各种库进行协同开发的能力。</li><li>对比较复杂的应用概念建模的能力。</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><strong>异常处理</strong>（exception handling）机制允许程序中独立开发的部分能够在运行时就出现的问题进行通信并作出相应的处理。</p><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>在C++语言中，我们通过<strong>抛出</strong>（throwing）一条表达式来<strong>引发</strong>（raised）一个异常。异常类型和当前的调用链决定了哪段<strong>处理代码</strong>（handler）将用来处理该异常。</p><p>程序的控制权从<code>throw</code>转移到<code>catch</code>模块。</p><p><strong>栈展开</strong>：当<code>throw</code>出现在一个<code>try语句块</code>时，检查该<code>try语句块</code>相关的<code>catch</code>字句，若有匹配则处理；若无匹配，则继续检查外层的<code>try</code>匹配的<code>catch</code>。</p><p>若一个异常没有被捕获，则它将终止当前的程序。</p><p>对象销毁：</p><ul><li>块退出后，它的局部对象将被销毁。</li><li>若异常发生在构造函数中，即使某个对象只构造了一部分，也要确保已构造的成员正确地被销毁。</li><li>将资源释放放在类的析构函数中，以保证资源能被正确释放。析构函数本身不会引发异常。</li></ul><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>若无需访问抛出的异常对象，则可以忽略捕获形参的名字。</p><p>通常，若<code>catch</code>接受的异常与某个继承体系有关，则最好将该<code>catch</code>的参数定义成引用类型。</p><p>搜索<code>catch</code>未必是最佳匹配，而是第一个匹配，因此，越细化的<code>catch</code>越应该放在<code>catch</code>列表前段。</p><p>重新抛出：<code>catch</code>代码执行一条<code>throw;</code>将异常传递给另一个<code>catch</code>语句。</p><p>捕获所有异常：<code>catch(...)</code></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>处理构造函数初始值异常的唯一方法是将构造函数协程函数<code>try</code>语句块。</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Blob</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> il<span class="token punctuation">)</span> <span class="token keyword">try</span><span class="token operator">:</span>     <span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">></span></span></span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*函数体*/</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>bad_alloc <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">handle_out_of_memory</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="noexcept异常说明"><a href="#noexcept异常说明" class="headerlink" title="noexcept异常说明"></a>noexcept异常说明</h3><p>使用<code>noexcept</code>说明指定某个函数不会抛出异常。</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">recoup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span> <span class="token comment">//C++11</span>coid <span class="token function">recoup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//老版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="异常类层次"><a href="#异常类层次" class="headerlink" title="异常类层次"></a>异常类层次</h3><p>标准exception层次：</p><ul><li>exception<ul><li>bad_cast</li><li>bad_alloc</li><li>runtime_error<ul><li>overflow_error</li><li>underflow_error</li><li>range_error</li></ul></li><li>logic_error<ul><li>domain_error</li><li>invalid_argument</li><li>out_of_range</li><li>length_error</li></ul></li></ul></li></ul><p>自定义异常类：</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">out_of_stock</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> std<span class="token double-colon punctuation">::</span><span class="token class-name">runtime_error</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">explicit</span> <span class="token function">out_of_stock</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>多个库将名字放置在全局命名空间中将引发<strong>命名空间污染</strong>（namespace pollution）。<strong>命名空间</strong>（namespace）分割了全局命名空间，其中每个命名空间是一个作用域。</p><h3 id="命名空间定义"><a href="#命名空间定义" class="headerlink" title="命名空间定义"></a>命名空间定义</h3><p>命名空间的定义包含两部分：1.关键字<code>namespace</code>；2.命名空间名称。后面是一系列由花括号括起来的声明和定义。命名空间作用域后面无需分号。</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> cplusplus_primer<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每个命名空间都是一个<strong>作用域</strong>。定义在某个命名空间内的名字可以被该命名空间内的其他成员直接访问，也可以被这些成员内嵌套作用域中的任何单位访问。位于该命名空间之外的代码必须明确指出所用的名字是属于哪个命名空间的。</p><p>命名空间可以是<strong>不连续</strong>的。这点不同于其他作用域，意味着同一命名空间可以在多处出现。</p><p><strong>内联命名空间</strong>（C++11）：</p><p>无需使用该命名空间的前缀，通过外层命名空间就可以直接访问。</p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> cplusplus_primer<span class="token punctuation">&#123;</span>    <span class="token keyword">inline</span> <span class="token keyword">namespace</span> FifthEd<span class="token punctuation">&#123;</span>        <span class="token comment">// 表示本书第5版代码</span>        <span class="token keyword">class</span> <span class="token class-name">Query_base</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cplusplus_primer<span class="token double-colon punctuation">::</span>Query_base qb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>未命名的命名空间</strong>：</p><p>指关键字<code>namespace</code>后面紧跟花括号的用法。未命名的命名空间中定义的变量拥有静态的声明周期：在第一次使用前创建，直到程序结束才销毁。不能跨越多个文件。</p><h3 id="使用命名空间成员"><a href="#使用命名空间成员" class="headerlink" title="使用命名空间成员"></a>使用命名空间成员</h3><p>像<code>namespace_name::member_name</code>这样使用命名空间的成员非常繁琐。</p><p><strong>命名空间的别名</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> primer <span class="token operator">=</span> cplusplus_primer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>using声明</strong>（using declaration）：</p><p>一条<code>using</code>声明语句一次只引入命名空间的一个成员。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span>string s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>using指示</strong>（using directive）：</p><p>使得某个特定的命名空间中所有的名字都可见。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="类、命名空间与作用域"><a href="#类、命名空间与作用域" class="headerlink" title="类、命名空间与作用域"></a>类、命名空间与作用域</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> A<span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span><span class="token operator">:</span>            <span class="token keyword">int</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>A<span class="token double-colon punctuation">::</span>C1<span class="token double-colon punctuation">::</span>f3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重载与命名空间"><a href="#重载与命名空间" class="headerlink" title="重载与命名空间"></a>重载与命名空间</h3><p><code>using</code>声明语句声明的是一个名字，而非特定的函数，也就是包括该函数的所有版本，都被引入到当前作用域中。</p><h2 id="多重继承与虚继承"><a href="#多重继承与虚继承" class="headerlink" title="多重继承与虚继承"></a>多重继承与虚继承</h2><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><h3 id="类型转换与多个基类"><a href="#类型转换与多个基类" class="headerlink" title="类型转换与多个基类"></a>类型转换与多个基类</h3><h3 id="多重继承下的类作用域"><a href="#多重继承下的类作用域" class="headerlink" title="多重继承下的类作用域"></a>多重继承下的类作用域</h3><ul><li>当一个类拥有多个基类时，有可能出现派生类从两个或更多基类中继承了同名成员的情况。此时，不加前缀限定符直接使用该名字将引发二义性。</li></ul><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3><ul><li>虚继承的目的是令某个类做出声明，承诺愿意共享它的基类。其中，共享的基类子对象成为<strong>虚基类</strong>。在这种机制下，不论虚基类在继承体系中出现了多少次，在派生类中都只包含唯一一个共享的虚基类子对象。</li><li>虚派生只影响从指定了虚基类的派生类中进一步派生出的类，它不会影响派生类本身。</li></ul><h3 id="构造函数与虚继承"><a href="#构造函数与虚继承" class="headerlink" title="构造函数与虚继承"></a>构造函数与虚继承</h3><ul><li>h含有虚基类的对象的构造顺序与一般的顺序稍有<strong>区别</strong>：首先使用提供给最底层派生类构造函数的初始值初始化该对象的虚基类子部分，接下来按照直接基类在派生列表中出现的次序对其进行初始化。</li><li>虚基类总是先于非虚基类构造，与它们在继承体系中的次序和位置无关。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记19</title>
      <link href="2021/04/10/notes/ch19/"/>
      <url>2021/04/10/notes/ch19/</url>
      
        <content type="html"><![CDATA[<h1 id="第十九章-特殊工具与技术"><a href="#第十九章-特殊工具与技术" class="headerlink" title="第十九章 特殊工具与技术"></a>第十九章 特殊工具与技术</h1><h2 id="控制内存分配"><a href="#控制内存分配" class="headerlink" title="控制内存分配"></a>控制内存分配</h2><h3 id="重载new和delete"><a href="#重载new和delete" class="headerlink" title="重载new和delete"></a>重载new和delete</h3><ul><li><strong><code>new</code>表达式的工作机理</strong>：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string *sp &#x3D; new string(&quot;a value&quot;); &#x2F;&#x2F;分配并初始化一个string对象string *arr &#x3D; new string[10];   &#x2F;&#x2F; 分配10个默认初始化的string对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>上述代码实际执行了<strong>三步操作</strong>：</p><ul><li><code>new</code>表达式调用一个名为<code>operator new</code>(或<code>operator new []</code>)的标准库函数，它分配一块<strong>足够大的</strong>、<strong>原始的</strong>、<strong>未命名的</strong>内存空间以便存储特定类型的对象(或对象的数组)。</li><li>编译器运行相应的构造函数以构造这些对象，并为其传入初始值。</li><li>对象被分配了空间并构造完成，返回一个指向该对象的指针。</li></ul></li><li><p><strong><code>delete</code>表达式的工作机理</strong>：</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">delete sp;  &#x2F;&#x2F; 销毁*sp，然后释放sp指向的内存空间delete [] arr;  &#x2F;&#x2F; 销毁数组中的元素，然后释放对应的内存空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>上述代码实际执行了<strong>两步操作</strong>：<ul><li>对<code>sp</code>所指向的对象或者<code>arr</code>所指的数组中的元素执行对应的析构函数。</li><li>编译器调用名为<code>operator delete</code>(或<code>operator delete[]</code>)的标准库函数释放内存空间。</li></ul></li><li>当自定义了全局的<code>operator new</code>函数和<code>operator delete</code>函数后，我们就担负起了控制动态内存分配的职责。这两个函数<strong>必须是正确的</strong>。因为它们是程序整个处理过程中至关重要的一部分。</li><li>标准库定义了<code>operator new</code>函数和<code>operator delete</code>函数的8个重载版本：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 这些版本可能抛出异常void *operator new(size_t); &#x2F;&#x2F; 分配一个对象void *operator new[](size_t);   &#x2F;&#x2F; 分配一个数组void *operator delete(void*) noexcept;  &#x2F;&#x2F; 释放一个对象void *operator delete[](void*) noexcept;    &#x2F;&#x2F; 释放一个数组&#x2F;&#x2F; 这些版本承诺不会抛出异常void *operator new(size_t, nothrow_t&amp;) noexcept;void *operator new[](size_t, nothrow_t&amp;) noexcept;void *operator delete(void*, nothrow_t&amp;) noexcept;void *operator delete[](void*, nothrow_t&amp;) noexcept;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>应用程序可以自定义上面函数版本中的任意一个，前提是自定义的版本必须位于<strong>全局作用域</strong>或者<strong>类作用域</strong>中。</li><li><strong>注意：</strong> 提供新的<code>operator new</code>函数和<code>operator delete</code>函数的目的在于改变内存分配的方式，但是不管怎样，都不能改变<code>new</code>运算符和<code>delete</code>运算符的基本含义。</li><li>使用从C语言继承的函数<code>malloc</code>和<code>free</code>函数能实现以某种方式执行分配内存和释放内存的操作：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdlib&gt;void *operator new(size_t size) &#123;    if(void *mem &#x3D; malloc(size))        return mme;    else        throw bad_alloc();&#125;void operator delete(void *mem) noexcept &#123;    free(mem);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位new表达式"><a href="#定位new表达式" class="headerlink" title="定位new表达式"></a>定位new表达式</h3><ul><li>应该使用new的定位<code>new(placement new)</code>形式传递一个地址，定位<code>new</code>的形式如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">new (place_address) typenew (place_address) type (initializers)new (place_address) type [size]new (place_address) type [size] &#123;braced initializer list&#125;&#x2F;&#x2F; place_address必须是一个指针，同时在initializers中提供一个(可能为空的)以逗号分隔的初始值列表，该初始值列表将用于构造新分配的对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当只传入一个指针类型的实参时，定位<code>new</code>表达式构造对象但是不分配内存。</li><li>调用析构函数会销毁对象，但是不会释放内存。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string *sp &#x3D; new string(&quot;a value&quot;); &#x2F;&#x2F; 分配并初始化一个string对象sp-&gt;~string();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="运行时类型识别"><a href="#运行时类型识别" class="headerlink" title="运行时类型识别"></a>运行时类型识别</h2><ul><li>运行时类型识别<code>(run-time type identification, RTTI)</code>的功能由两个运算符实现：<ul><li><code>typeid</code>运算符， 用于返回表达式的类型。</li><li><code>dynamic_cast</code>运算符，用于将基类的指针或引用安全地转换曾派生类的指针或引用。</li></ul></li><li>使用<code>RTTI</code>必须要加倍小心。在可能的情况下，最好定义虚函数而非直接接管类型管理的重任。</li></ul><h3 id="dynamic-cast运算符"><a href="#dynamic-cast运算符" class="headerlink" title="dynamic_cast运算符"></a>dynamic_cast运算符</h3><ul><li>dynamic_cast运算符的使用形式如下：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dynamic_cast&lt;type*&gt;(e)  &#x2F;&#x2F; e必须是一个有效的指针dynamic_cast&lt;type&amp;&gt;(e)  &#x2F;&#x2F; e必须是一个左值dynamic_cast&lt;type&amp;&amp;&gt;(e) &#x2F;&#x2F; e不能是左值&#x2F;&#x2F; 以上，type类型必须时一个类类型，并且通常情况下该类型应该含有虚函数。&#x2F;&#x2F; e的类型必须符合三个条件中的任意一个，它们是：&#x2F;&#x2F; 1. e的类型是目标type的公有派生类；&#x2F;&#x2F; 2. e的类型是目标type的共有基类；&#x2F;&#x2F; 3. e的类型就是目标type的类型；&#x2F;&#x2F; 指针类型的dynamic_cast&#x2F;&#x2F; 假设Base类至少含有一个虚函数，Derived是Base的共有派生类。if (Derived *dp &#x3D; dynamic_cast&lt;Derived*&gt;(bp)) &#123;    &#x2F;&#x2F; 使用dp指向的Derived对象&#125; else &#123;    &#x2F;&#x2F; bp指向一个Base对象    &#x2F;&#x2F; 使用dp指向的Base对象&#125;&#x2F;&#x2F; 引用类型的dynamic_castvoid f(const Base &amp;b) &#123;    try &#123;        const Derived &amp;d &#x3D; dynamic_cast&lt;const Derived&amp;&gt;(b);        &#x2F;&#x2F; 使用b引用的Derived对象    &#125; catch (bad_cast) &#123;        &#x2F;&#x2F; 处理类型转换失败的情况    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以对一个空指针执行<code>dynamic_cast</code>，结果是所需类型的空指针。</li></ul><h3 id="typeid运算符"><a href="#typeid运算符" class="headerlink" title="typeid运算符"></a>typeid运算符</h3><ul><li><code>typeid运算符(typeid operator)</code>，它允许程序向表达式提问：<strong>你的对象是什么类型？</strong></li><li><code>typeid</code>表达式的形式是<code>typeid(e)</code>，其中<code>e</code>可以是任意表达式或类型的名字，它操作的结果是一个常量对象的引用。它可以作用于任意类型的表达式。</li><li>通常情况下，使用typeid比较两条表达式的类型是否相同，或者比较一条表达式的类型是否与指定类型相同：</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Derived *dp &#x3D; new Derived;Base *bp &#x3D; dp;if (typeid(*bp) &#x3D;&#x3D; typeid(*dp)) &#123;    &#x2F;&#x2F; bp和dp指向同一类型的对象&#125;if (typeid(*bp) &#x3D;&#x3D; typeid(Derived)) &#123;    &#x2F;&#x2F; bp实际指向Derived对象&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当typeid作用于指针时(而非指针所指向的对象)，返回的结果是该指针的静态编译时类型。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 下面的检查永远是失败的：bp的类型是指向Base的指针if (typeid(bp) &#x3D;&#x3D; typeid(Derived)) &#123;    &#x2F;&#x2F; 永远不会执行&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用RTTI"><a href="#使用RTTI" class="headerlink" title="使用RTTI"></a>使用RTTI</h3><ul><li>用途：为具有继承关系的类实现相等运算符时。对于两个对象来说，如果它们的类型相同并且对应的数据成员取值相同，则说这两个对象是相等的。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 类的层次关系class Base &#123;    friend bool operator&#x3D;&#x3D;(const Base&amp;, const Base&amp;);public:    &#x2F;&#x2F; Base的接口成员protected:    virtual bool equal(const Base&amp;) const;    &#x2F;&#x2F; Base的数据成员和其他用于实现的成员&#125;;class Derived: public Base &#123;public:    &#x2F;&#x2F; Derived的其他接口成员protected:    bool equal(const Base&amp;) const;    &#x2F;&#x2F; Derived的数据成员和其他用于实现的成员&#125;;&#x2F;&#x2F; 类型敏感的相等运算符bool operator&#x3D;&#x3D;(const Base &amp;lhs, const Base &amp;rhs) &#123;    &#x2F;&#x2F; 如果typeid不相同，返回false；否则虚调用equal    return typeid(lhs) &#x3D;&#x3D; typeid(rhs) &amp;&amp; lhs.equal(rhs);&#125;&#x2F;&#x2F; 虚equal函数bool Derived::equal(const Base &amp;rhs) const &#123;    auto r &#x3D; dynamic_cast&lt;const Derived&amp;&gt;(rhs);    &#x2F;&#x2F; 执行比较两个Derived对象的操作并返回结果&#125;&#x2F;&#x2F; 基类equal函数bool Base::equal(const Base &amp;rhs) const &#123;    &#x2F;&#x2F; 执行比较Base对象的操作&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="type-info类"><a href="#type-info类" class="headerlink" title="type_info类"></a>type_info类</h3><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><ul><li>枚举类型<code>(enumeration)</code>使我们可以将一组整型常量组织在一起。枚举属于字面值常量类型。</li><li>**限定作用域的枚举类型(scoped enumeration)**：首先是关键字<code>enum class(或enum struct)</code>，随后是枚举类型名字以及用花括号括起来的以逗号分隔的枚举成员列表，最后是一个分号。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum class open_modes &#123;input, output, append&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>不限定作用域的枚举类型<code>(unscoped enumeration)</code>：省略关键字<code>class(或struct)</code>，枚举类型的名字是可选的。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">enum color &#123;red, yellow, green&#125;;enum &#123;floatPrec &#x3D; 6, doublePrec &#x3D; 10, double_doublePrec &#x3D; 10&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="类成员指针"><a href="#类成员指针" class="headerlink" title="类成员指针"></a>类成员指针</h2><p><strong>成员指针</strong>：指可以指向类的非静态成员的指针。</p><h3 id="数据成员指针"><a href="#数据成员指针" class="headerlink" title="数据成员指针"></a>数据成员指针</h3><ul><li>和其他指针一样，在声明成员指针时也使用*来表示当前声明的名字是一个指针。与普通指针不同的时，成员指针还必须包含成员所属的类。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; pdata可以指向一个常量(非常量)Screen对象的string成员const string Screen::*pdata;&#x2F;&#x2F; C++11auto pdata &#x3D; &amp;Screen::contents;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当我们初始化一个成员指针或为成员指针赋值时，该指针没有指向任何数据。成员指针指定了成员而非该成员所属的对象，只有当解引用成员指针时才提供对象的信息。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Screen myScreen, *pScreen &#x3D; &amp;myScreen;auto s &#x3D; myScreen.*pdata;s &#x3D; pScreen-&gt;*pdata;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员函数指针"><a href="#成员函数指针" class="headerlink" title="成员函数指针"></a>成员函数指针</h3><ul><li>因为函数调用运算符的优先级较高，所以在声明指向成员函数的指针并使用这些的指针进行函数调用时，括号必不可少：<code>(C::*p)(parms)</code>和<code>(obj.*p)(args)</code>。</li></ul><h3 id="将成员函数用作可调用对象"><a href="#将成员函数用作可调用对象" class="headerlink" title="将成员函数用作可调用对象"></a>将成员函数用作可调用对象</h3><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><ul><li>一个类可以定义在另一个类的内部，前者称为嵌套类(nested class)或嵌套类型(nested type)。<strong>嵌套类常用于定义作为实现部分的类</strong>。</li><li>嵌套类是一个独立的类，与外层类基本没有什么关系。特别是，外层类的对象和嵌套类的对象是相互独立的。</li><li>嵌套类的名字在外层类作用域中是可见的，在外层类作用域之外不可见。</li></ul><h2 id="union：一种节省空间的类"><a href="#union：一种节省空间的类" class="headerlink" title="union：一种节省空间的类"></a>union：一种节省空间的类</h2><ul><li><code>联合(union)</code>是一种特殊的类。一个<code>union</code>可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。<strong>它不能含有引用类型的成员和虚函数</strong>。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; Token类型的对象只有一个成员，该成员的类型可能是下列类型中的任意一种union Token &#123;    &#x2F;&#x2F; 默认情况下成员是共有的    char cval;    int ival;    double dval;&#125;；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>匿名union(anonymous union)</code>是一个未命名的<code>union</code>，并且在右花括号和分号之间没有任何声明。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">union &#123;    char cval;    int ival;    double dval;&#125;;&#x2F;&#x2F; 可以直接访问它的成员cal &#x3D; &#39;c&#39;;ival &#x3D; 42;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>注意：</strong> <code>匿名union</code>不能包含受保护的成员或私有成员，也不能定义成员函数。</li></ul><h2 id="局部类"><a href="#局部类" class="headerlink" title="局部类"></a>局部类</h2><ul><li><code>局部类(local class)</code>：可以定义在某个函数的内部的类。它的类型只在定义它的作用域内可见。和嵌套类不同，局部类的成员受到严格限制。</li><li>局部类的所有成员(包括函数在内)都必须完整定义在类的内部。因此，局部类的作用与嵌套类相比相差很远。</li><li><strong>局部类不能使用函数作用域中的变量。</strong></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int a, val;void foo(int val) &#123;    static inti si;    enum loc &#123; a &#x3D; 1024, b&#125;;    &#x2F;&#x2F; Bar是foo的局部类    struct Bar &#123;        Loc locVal; &#x2F;&#x2F; 正确：使用一个局部类型名        int barVal;        void fooBar(Loc l &#x3D; a) &#123;    &#x2F;&#x2F; 正确：默认实参是Loc::a            barVal &#x3D; val;   &#x2F;&#x2F; 错误：val是foo的局部变量            barVal &#x3D;&#x3D; ::val;    &#x2F;&#x2F; 正确：使用一个全局对象            barVal &#x3D; si;    &#x2F;&#x2F; 正确：使用一个静态局部对象            locVal &#x3D; b; &#x2F;&#x2F; 正确：使用一个枚举成员        &#125;    &#125;；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="固有的不可移植的特性"><a href="#固有的不可移植的特性" class="headerlink" title="固有的不可移植的特性"></a>固有的不可移植的特性</h2><p>所谓不可移植的特性是指<strong>因机器而异的特性</strong>，当将含有不可移植特性的程序从一台机器转移到另一台机器上时，通常需要重新编写该程序。</p><h3 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h3><ul><li>类可以将其(非静态)数据成员定义成**位域(bit-field)**，在一个位域中含有一定数量的二进制位。当一个程序需要向其他程序或硬件设备传递二进制数据时，通常会用到位域。</li><li>位域在内存中的布局是与机器相关的。</li><li>位域的类型必须是整型或枚举类型。因为带符号位域的行为是由具体实现确定的，通常情况下我们使用无符号类型保存一个位域。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef unsigned int Bit;class File &#123;    Bit mode: 2;    Bit modified: 1;    Bit prot_owner: 3;    Bit prot_group: 3;    Bit prot_world: 3;public:    enum modes &#123;READ &#x3D; 01, WRITE &#x3D; 02, EXECUTE &#x3D; 03&#125;;    File &amp;open(modes);    void close();    void write();    bool isRead() const;    void setWrite();&#125;&#x2F;&#x2F; 使用位域void File::write() &#123;    modified &#x3D; 1;    &#x2F;&#x2F; ...&#125;void File::close() &#123;    if( modified)        &#x2F;&#x2F; ...保存内容&#125;File &amp;File::open(File::modes m) &#123;    mode |&#x3D; READ;   &#x2F;&#x2F; 按默认方式设置READ    &#x2F;&#x2F; 其他处理    if(m &amp; WRITE)   &#x2F;&#x2F; 如果打开了READ和WRITE        &#x2F;&#x2F; 按照读&#x2F;写方式打开文件    return *this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="volatile限定符"><a href="#volatile限定符" class="headerlink" title="volatile限定符"></a>volatile限定符</h3><ul><li>当对象的值可能在程序的控制或检测之外被改变时，应该将该对象声明为<code>volatile</code>。关键字<code>volatile</code>告诉编译器不应对这样的对象进行优化。</li><li><code>const</code>和<code>volatile</code>的一个重要区别是不能使用合成的拷贝/移动构造函数及赋值运算符初始化<code>volatile</code>对象或者从<code>volatile</code>对象赋值。</li></ul><h3 id="链接指示：extern-“C”"><a href="#链接指示：extern-“C”" class="headerlink" title="链接指示：extern “C”"></a>链接指示：extern “C”</h3><ul><li><code>C++</code>使用<code>链接指示(linkage directive)</code>指出任意非<code>C++</code>函数所用的语言。</li><li>要想把<code>C++</code>代码和其他语言(包括<code>C</code>语言)编写的代码放在一起使用，要求我们必须有权访问该语言的编译器，并且这个编译器与当前的<code>C++</code>编译器是兼容的。</li><li><code>C++</code>从C语言继承的标准库函数可以定义为<code>C</code>函数，但并非必须：决定使用<code>C</code>还是<code>C++</code>实现的<code>C</code>标准库，是每个<code>C++</code>实现的事情。</li><li>有时需要在C和C++中编译同一个源文件，为了实现这一目的，在编译C++版本的程序时预处理器定义<code>__cplusplus</code>。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifdef __cplusplusextern &quot;C&quot;#endifint strcmp(const char*, const char*);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案2</title>
      <link href="2021/04/10/excersize/ch02/"/>
      <url>2021/04/10/excersize/ch02/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-变量和基本类型"><a href="#第二章-变量和基本类型" class="headerlink" title="第二章 变量和基本类型"></a>第二章 变量和基本类型</h1><h2 id="练习2-1"><a href="#练习2-1" class="headerlink" title="练习2.1"></a>练习2.1</h2><p>类型 int、long、long long 和 short 的区别是什么？无符号类型和带符号类型的区别是什么？float 和 double的区别是什么？</p><p>解：</p><p>C++ 规定 short 和 int 至少16位，long 至少32位，long long 至少64位。 带符号类型能够表示正数、负数和 0 ，而无符号类型只能够表示 0 和正整数。</p><h2 id="练习2-2"><a href="#练习2-2" class="headerlink" title="练习2.2"></a>练习2.2</h2><p>计算按揭贷款时，对于利率、本金和付款分别应选择何种数据类型？说明你的理由。</p><p>解：</p><p>使用<code>double</code>。需要进行浮点计算。</p><h2 id="练习2-3"><a href="#练习2-3" class="headerlink" title="练习2.3"></a>练习2.3</h2><p>读程序写结果。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> u <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> u2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> u2 <span class="token operator">-</span> u <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">-</span> u2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> i2 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i2 <span class="token operator">-</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> i2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">-</span> u <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> u <span class="token operator">-</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">32429496726432-3200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-4"><a href="#练习2-4" class="headerlink" title="练习2.4"></a>练习2.4</h2><p>编写程序检查你的估计是否正确，如果不正确，请仔细研读本节直到弄明白问题所在。</p><h2 id="练习2-5"><a href="#练习2-5" class="headerlink" title="练习2.5"></a>练习2.5</h2><p>指出下述字面值的数据类型并说明每一组内几种字面值的区别：</p><pre class="line-numbers language-none"><code class="language-none">(a) &#39;a&#39;, L&#39;a&#39;, &quot;a&quot;, L&quot;a&quot;(b) 10, 10u, 10L, 10uL, 012, 0xC(c) 3.14, 3.14f, 3.14L(d) 10, 10u, 10., 10e-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a): 字符字面值，宽字符字面值，字符串字面值，宽字符串字面值。</li><li>(b): 十进制整型，十进制无符号整型，十进制长整型，八进制整型，十六进制整型。</li><li>(c): double, float, long double</li><li>(d): 十进制整型，十进制无符号整型，double, double</li></ul><h2 id="练习2-6"><a href="#练习2-6" class="headerlink" title="练习2.6"></a>练习2.6</h2><p>下面两组定义是否有区别，如果有，请叙述之：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">09</span><span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">07</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>第一行定义的是十进制的整型，第二行定义的是八进制的整型。但是month变量有误，八进制不能直接写9。</p><h2 id="练习2-7"><a href="#练习2-7" class="headerlink" title="练习2.7"></a>练习2.7</h2><p>下述字面值表示何种含义？它们各自的数据类型是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token string">"Who goes with F\145rgus?\012"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token number">3.14e1L</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1024f</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token number">3.14L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) Who goes with Fergus?(换行)，string 类型</li><li>(b) long double</li><li>(c) 无效，因为后缀<code>f</code>只能用于浮点字面量，而1024是整型。</li><li>(d) long double</li></ul><h2 id="练习2-8"><a href="#练习2-8" class="headerlink" title="练习2.8"></a>练习2.8</h2><p>请利用转义序列编写一段程序，要求先输出 2M，然后转到新一行。修改程序使其先输出 2，然后输出制表符，再输出 M，最后转到新一行。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\115\012"</span><span class="token punctuation">;</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t\115\012"</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>```   ## 练习<span class="token number">2.9</span>解释下列定义的含义，对于非法的定义，请说明错在何处并将其改正。<span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> <span class="token keyword">int</span> input_value<span class="token punctuation">;</span><span class="token operator">-</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">3.14</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">-</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">double</span> salary <span class="token operator">=</span> wage <span class="token operator">=</span> <span class="token number">9999.99</span><span class="token punctuation">;</span><span class="token operator">-</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>解： <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">:</span> 应该先定义再使用。```cpp<span class="token keyword">int</span> input_value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> input_value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(b): 用列表初始化内置类型的变量时，如果存在丢失信息的风险，则编译器将报错。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">3.14</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(c): 在这里<code>wage</code>是未定义的，应该在此之前将其定义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> wage<span class="token punctuation">;</span><span class="token keyword">double</span> salary <span class="token operator">=</span> wage <span class="token operator">=</span> <span class="token number">9999.99</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(d): 不报错，但是小数部分会被截断。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习2-10"><a href="#练习2-10" class="headerlink" title="练习2.10"></a>练习2.10</h2><p>下列变量的初值分别是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string global_str<span class="token punctuation">;</span><span class="token keyword">int</span> global_int<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> local_int<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string local_str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>global_str</code>和<code>global_int</code>是全局变量，所以初值分别为空字符串和0。<br><code>local_int</code>是局部变量并且没有初始化，它的初值是未定义的。<br><code>local_str</code> 是 <code>string</code> 类的对象，它的值由类确定，为空字符串。</p><h2 id="练习2-11"><a href="#练习2-11" class="headerlink" title="练习2.11"></a>练习2.11</h2><p>指出下面的语句是声明还是定义：</p><ul><li>(a) extern int ix = 1024;</li><li>(b) int iy;</li><li>(c) extern int iz;</li></ul><p>解：</p><p>(a): 定义<br>(b): 定义<br>(c): 声明</p><h2 id="练习2-12"><a href="#练习2-12" class="headerlink" title="练习2.12"></a>练习2.12</h2><p>请指出下面的名字中哪些是非法的？</p><ul><li>(a) int double = 3.14;</li><li>(b) int _;</li><li>(c) int catch-22;</li><li>(d) int 1_or_2 = 1;</li><li>(e) double Double = 3.14;</li></ul><p>解：</p><p>(a), (c), (d) 非法。</p><h2 id="练习2-13"><a href="#练习2-13" class="headerlink" title="练习2.13"></a>练习2.13</h2><p>下面程序中<code>j</code>的值是多少？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>j</code>的值是100，局部变量<code>i</code>覆盖了全局变量<code>i</code>。</p><h2 id="练习2-14"><a href="#练习2-14" class="headerlink" title="练习2.14"></a>练习2.14</h2><p>下面的程序合法吗？如果合法，它将输出什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>合法。输出是 100 45 。</p><h2 id="练习2-15"><a href="#练习2-15" class="headerlink" title="练习2.15"></a>练习2.15</h2><p>下面的哪个定义是不合法的？为什么？</p><ul><li>(a) int ival = 1.01;</li><li>(b) int &amp;rval1 = 1.01;</li><li>(c) int &amp;rval2 = ival;</li><li>(d) int &rval3;</li></ul><p>解：</p><p>(b)和(d)不合法，(b)引用必须绑定在对象上，(d)引用必须初始化。</p><h2 id="练习2-16"><a href="#练习2-16" class="headerlink" title="练习2.16"></a>练习2.16</h2><p>考察下面的所有赋值然后回答：哪些赋值是不合法的？为什么？哪些赋值是合法的？它们执行了哪些操作？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r1 <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r2 <span class="token operator">=</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>(a) r2 = 3.14159;</li><li>(b) r2 = r1;</li><li>(c) i = r2;</li><li>(d) r1 = d;</li></ul><p>解：</p><ul><li>(a): 合法。给 d 赋值为 3.14159。</li><li>(b): 合法。会执行自动转换（int-&gt;double）。</li><li>(c): 合法。会发生小数截取。</li><li>(d): 合法。会发生小数截取。</li></ul><h2 id="练习2-17"><a href="#练习2-17" class="headerlink" title="练习2.17"></a>练习2.17</h2><p>执行下面的代码段将输出什么结果？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ri <span class="token operator">=</span> i<span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> ri <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> ri <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>输出：10, 10</p><h2 id="练习2-18"><a href="#练习2-18" class="headerlink" title="练习2.18"></a>练习2.18</h2><p>编写代码分别改变指针的值以及指针所指对象的值。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">// change the value of a pointer.</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span class="token comment">// change the value to which the pointer points</span><span class="token operator">*</span>p2 <span class="token operator">=</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-19"><a href="#练习2-19" class="headerlink" title="练习2.19"></a>练习2.19</h2><p>说明指针和引用的主要区别</p><p>解：</p><p>引用是另一个对象的别名，而指针本身就是一个对象。<br>引用必须初始化，并且一旦定义了引用就无法再绑定到其他对象。而指针无须在定义时赋初值，也可以重新赋值让其指向其他对象。</p><h2 id="练习2-20"><a href="#练习2-20" class="headerlink" title="练习2.20"></a>练习2.20</h2><p>请叙述下面这段代码的作用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">*</span>p1 <span class="token operator">*</span> <span class="token operator">*</span>p1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>让指针 pi 指向 i，然后将 i 的值重新赋值为 42 * 42 (1764)。</p><h2 id="练习2-21"><a href="#练习2-21" class="headerlink" title="练习2.21"></a>练习2.21</h2><p>请解释下述定义。在这些定义中有非法的吗？如果有，为什么？</p><p><code>int i = 0;</code></p><ul><li>(a) double* dp = &i;</li><li>(b) int *ip = i;</li><li>(c) int *p = &i;</li></ul><p>解：</p><ul><li>(a): 非法。不能将一个指向 <code>double</code> 的指针指向 <code>int</code> 。</li><li>(b): 非法。不能将 <code>int</code> 变量赋给指针。</li><li>(c): 合法。</li></ul><h2 id="练习2-22"><a href="#练习2-22" class="headerlink" title="练习2.22"></a>练习2.22</h2><p>假设 p 是一个 int 型指针，请说明下述代码的含义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// ...</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>第一句判断 p 是不是一个空指针,<br>第二句判断 p 所指向的对象的值是不是为0</p><h2 id="练习2-23"><a href="#练习2-23" class="headerlink" title="练习2.23"></a>练习2.23</h2><p>给定指针 p，你能知道它是否指向了一个合法的对象吗？如果能，叙述判断的思路；如果不能，也请说明原因。</p><p>解：</p><p>不能，因为首先要确定这个指针是不是合法的，才能判断它所指向的对象是不是合法的。</p><h2 id="练习2-24"><a href="#练习2-24" class="headerlink" title="练习2.24"></a>练习2.24</h2><p>在下面这段代码中为什么 p 合法而 lp 非法？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token operator">*</span>lp <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>void *</code>是从C语言那里继承过来的，可以指向任何类型的对象。<br>而其他指针类型必须要与所指对象严格匹配。</p><h2 id="练习2-25"><a href="#练习2-25" class="headerlink" title="练习2.25"></a>练习2.25</h2><p>说明下列变量的类型和值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token operator">*</span> ip<span class="token punctuation">,</span> ip2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a): ip 是一个指向 int 的指针, i 是一个 int, r 是 i 的引用。</li><li>(b): i 是 int , ip 是一个空指针。</li><li>(c): ip 是一个指向 int 的指针, ip2 是一个 int。</li></ul><h2 id="练习2-26"><a href="#练习2-26" class="headerlink" title="练习2.26"></a>练习2.26</h2><p>下面哪些语句是合法的？如果不合法，请说明为什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> buf<span class="token punctuation">;</span>      <span class="token comment">// 不合法, const 对象必须初始化</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 合法</span><span class="token keyword">const</span> <span class="token keyword">int</span> sz <span class="token operator">=</span> cnt<span class="token punctuation">;</span> <span class="token comment">// 合法</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span> <span class="token operator">++</span>sz<span class="token punctuation">;</span>        <span class="token comment">// 不合法, const 对象不能被改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-27"><a href="#练习2-27" class="headerlink" title="练习2.27"></a>练习2.27</h2><p>下面的哪些初始化是合法的？请说明原因。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// 不合法, r 必须引用一个对象</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>i2<span class="token punctuation">;</span>        <span class="token comment">// 合法，常量指针</span><span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 合法</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>i2<span class="token punctuation">;</span>  <span class="token comment">// 合法</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>i2<span class="token punctuation">;</span>        <span class="token comment">// 合法</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token keyword">const</span> r2<span class="token punctuation">;</span>        <span class="token comment">// 不合法, r2 是引用，引用没有顶层 const</span><span class="token keyword">const</span> <span class="token keyword">int</span> i2 <span class="token operator">=</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token comment">// 合法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-28"><a href="#练习2-28" class="headerlink" title="练习2.28"></a>练习2.28</h2><p>说明下面的这些定义是什么意思，挑出其中不合法的。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">const</span> cp<span class="token punctuation">;</span>       <span class="token comment">// 不合法, const 指针必须初始化</span><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">const</span> p2<span class="token punctuation">;</span>     <span class="token comment">// 不合法, const 指针必须初始化</span><span class="token keyword">const</span> <span class="token keyword">int</span> ic<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> ic<span class="token punctuation">;</span>  <span class="token comment">// 不合法, const int 必须初始化</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> p3<span class="token punctuation">;</span>    <span class="token comment">// 不合法, const 指针必须初始化</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>           <span class="token comment">// 合法. 一个指针，指向 const int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-29"><a href="#练习2-29" class="headerlink" title="练习2.29"></a>练习2.29</h2><p>假设已有上一个练习中定义的那些变量，则下面的哪些语句是合法的？请说明原因。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">i <span class="token operator">=</span> ic<span class="token punctuation">;</span>     <span class="token comment">// 合法, 常量赋值给普通变量</span>p1 <span class="token operator">=</span> p3<span class="token punctuation">;</span>    <span class="token comment">// 不合法, p3 是const指针不能赋值给普通指针</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>ic<span class="token punctuation">;</span>   <span class="token comment">// 不合法, 普通指针不能指向常量</span>p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>ic<span class="token punctuation">;</span>   <span class="token comment">// 合法, p3 是常量指针且指向常量</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token comment">// 合法, 可以将普通指针赋值给常量指针</span>ic <span class="token operator">=</span> <span class="token operator">*</span>p3<span class="token punctuation">;</span>   <span class="token comment">// 合法, 对 p3 取值后是一个 int 然后赋值给 ic</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-30"><a href="#练习2-30" class="headerlink" title="练习2.30"></a>练习2.30</h2><p>对于下面的这些语句，请说明对象被声明成了顶层const还是底层const？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> v1 <span class="token operator">=</span> v2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r1 <span class="token operator">=</span> v1<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r2 <span class="token operator">=</span> v2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>v2 是顶层const，p2 是底层const，p3 既是顶层const又是底层const，r2 是底层const。</p><h2 id="练习2-31"><a href="#练习2-31" class="headerlink" title="练习2.31"></a>练习2.31</h2><p>假设已有上一个练习中所做的那些声明，则下面的哪些语句是合法的？请说明顶层const和底层const在每个例子中有何体现。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">r1 <span class="token operator">=</span> v2<span class="token punctuation">;</span> <span class="token comment">// 合法, 顶层const在拷贝时不受影响</span>p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span> <span class="token comment">// 不合法, p2 是底层const，如果要拷贝必须要求 p1 也是底层const</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span> <span class="token comment">// 合法, int* 可以转换成const int*</span>p1 <span class="token operator">=</span> p3<span class="token punctuation">;</span> <span class="token comment">// 不合法, p3 是一个底层const，p1 不是</span>p2 <span class="token operator">=</span> p3<span class="token punctuation">;</span> <span class="token comment">// 合法, p2 和 p3 都是底层const，拷贝时忽略掉顶层const</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-32"><a href="#练习2-32" class="headerlink" title="练习2.32"></a>练习2.32</h2><p>下面的代码是否合法？如果非法，请设法将其修改正确。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> null <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> null<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>合法。指针可以初始化为 0 表示为空指针。</p><h2 id="练习2-33"><a href="#练习2-33" class="headerlink" title="练习2.33"></a>练习2.33</h2><p>利用本节定义的变量，判断下列语句的运行结果。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// a 是 int</span>b<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// b 是一个 int,(ci的顶层const在拷贝时被忽略掉了)</span>c<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// c 也是一个int</span>d<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// d 是一个 int *,所以语句非法</span>e<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// e 是一个 const int *, 所以语句非法</span>g<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// g 是一个 const int 的引用，引用都是底层const，所以不能被赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-34"><a href="#练习2-34" class="headerlink" title="练习2.34"></a>练习2.34</h2><p>基于上一个练习中的变量和语句编写一段程序，输出赋值前后变量的内容，你刚才的推断正确吗？如果不对，请反复研读本节的示例直到你明白错在何处为止。</p><h2 id="练习2-35"><a href="#练习2-35" class="headerlink" title="练习2.35"></a>练习2.35</h2><p>判断下列定义推断出的类型是什么，然后编写程序进行验证。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">auto</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">auto</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">auto</span> j2 <span class="token operator">=</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k2 <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>j 是 int，k 是 const int的引用，p 是const int *，j2 是const int，k2 是 const int 的引用。</p><h2 id="练习2-36"><a href="#练习2-36" class="headerlink" title="练习2.36"></a>练习2.36</h2><p>关于下面的代码，请指出每一个变量的类型以及程序结束时它们各自的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> d <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token operator">++</span>c<span class="token punctuation">;</span><span class="token operator">++</span>d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>c 是 int 类型，值为 4。d 是 int &amp; 类型，绑定到 a，a 的值为 4 。</p><h2 id="练习2-37"><a href="#练习2-37" class="headerlink" title="练习2.37"></a>练习2.37</h2><p>赋值是会产生引用的一类典型表达式，引用的类型就是左值的类型。也就是说，如果 i 是 int，则表达式 i=x 的类型是 int&amp;。根据这一特点，请指出下面的代码中每一个变量的类型和值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span> d <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>c 是 int 类型，值为 3。d 是 int&amp; 类型，绑定到 a。</p><h2 id="练习2-38"><a href="#练习2-38" class="headerlink" title="练习2.38"></a>练习2.38</h2><p>说明由decltype 指定类型和由auto指定类型有何区别。请举一个例子，decltype指定的类型与auto指定的类型一样；再举一个例子，decltype指定的类型与auto指定的类型不一样。</p><p>解：</p><p>decltype 处理顶层const和引用的方式与 auto不同，decltype会将顶层const和引用保留起来。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//相同</span><span class="token keyword">auto</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//不同 d 是一个 int&amp;</span><span class="token keyword">auto</span> c <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> d <span class="token operator">=</span> r<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-39"><a href="#练习2-39" class="headerlink" title="练习2.39"></a>练习2.39</h2><p>编译下面的程序观察其运行结果，注意，如果忘记写类定义体后面的分号会发生什么情况？记录下相关的信息，以后可能会有用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 此处为空  */</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 注意：没有分号</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>提示应输入分号。</p><h2 id="练习2-40"><a href="#练习2-40" class="headerlink" title="练习2.40"></a>练习2.40</h2><p>根据自己的理解写出 Sales_data 类，最好与书中的例子有所区别。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Sale_data</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string bookName<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-41"><a href="#练习2-41" class="headerlink" title="练习2.41"></a>练习2.41</h2><p>使用你自己的Sale_data类重写1.5.1节（第20页）、1.5.2节（第21页）和1.6节（第22页）的练习。眼下先把Sales_data类的定义和main函数放在一个文件里。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1.5.1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">struct</span> <span class="token class-name">Sale_data</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sale_data book<span class="token punctuation">;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> book<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> book<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    book<span class="token punctuation">.</span>revenue <span class="token operator">=</span> book<span class="token punctuation">.</span>units_sold <span class="token operator">*</span> price<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> price<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1.5.2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">struct</span> <span class="token class-name">Sale_data</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sale_data book1<span class="token punctuation">,</span> book2<span class="token punctuation">;</span>    <span class="token keyword">double</span> price1<span class="token punctuation">,</span> price2<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> book1<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> book1<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price1<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> book2<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> book2<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price2<span class="token punctuation">;</span>    book1<span class="token punctuation">.</span>revenue <span class="token operator">=</span> book1<span class="token punctuation">.</span>units_sold <span class="token operator">*</span> price1<span class="token punctuation">;</span>    book2<span class="token punctuation">.</span>revenue <span class="token operator">=</span> book2<span class="token punctuation">.</span>units_sold <span class="token operator">*</span> price2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>book1<span class="token punctuation">.</span>bookNo <span class="token operator">==</span> book2<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> totalCnt <span class="token operator">=</span> book1<span class="token punctuation">.</span>units_sold <span class="token operator">+</span> book2<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>        <span class="token keyword">double</span> totalRevenue <span class="token operator">=</span> book1<span class="token punctuation">.</span>revenue <span class="token operator">+</span> book2<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> book1<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> totalCnt <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> totalRevenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalCnt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> totalRevenue <span class="token operator">/</span> totalCnt <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(no sales)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Data must refer to same ISBN"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// indicate failure</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1.6</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">struct</span> <span class="token class-name">Sale_data</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sale_data total<span class="token punctuation">;</span>    <span class="token keyword">double</span> totalPrice<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> total<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> total<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> totalPrice<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        total<span class="token punctuation">.</span>revenue <span class="token operator">=</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">*</span> totalPrice<span class="token punctuation">;</span>        Sale_data trans<span class="token punctuation">;</span>        <span class="token keyword">double</span> transPrice<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> trans<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> trans<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> transPrice<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            trans<span class="token punctuation">.</span>revenue <span class="token operator">=</span> trans<span class="token punctuation">.</span>units_sold <span class="token operator">*</span> transPrice<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span>bookNo <span class="token operator">==</span> trans<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                total<span class="token punctuation">.</span>units_sold <span class="token operator">+=</span> trans<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>                total<span class="token punctuation">.</span>revenue <span class="token operator">+=</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span>units_sold <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">/</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(no sales)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                total<span class="token punctuation">.</span>bookNo <span class="token operator">=</span> trans<span class="token punctuation">.</span>bookNo<span class="token punctuation">;</span>                total<span class="token punctuation">.</span>units_sold <span class="token operator">=</span> trans<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>                total<span class="token punctuation">.</span>revenue <span class="token operator">=</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span>units_sold <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">/</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(no sales)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// indicate failure</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习2-42"><a href="#练习2-42" class="headerlink" title="练习2.42"></a>练习2.42</h2><p>根据你自己的理解重写一个Sales_data.h头文件，并以此为基础重做2.6.2节（第67页）的练习。</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案3</title>
      <link href="2021/04/10/excersize/ch03/"/>
      <url>2021/04/10/excersize/ch03/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-字符串、向量和数组"><a href="#第三章-字符串、向量和数组" class="headerlink" title="第三章 字符串、向量和数组"></a>第三章 字符串、向量和数组</h1><h2 id="练习3-1"><a href="#练习3-1" class="headerlink" title="练习3.1"></a>练习3.1</h2><p>使用恰当的using 声明重做 1.4.1节和2.6.2节的练习。</p><p>解：</p><p>1.4.1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>val<span class="token punctuation">)</span> sum <span class="token operator">+=</span> val<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum of 1 to 10 inclusive is "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.6.2 类似</p><h2 id="练习3-2"><a href="#练习3-2" class="headerlink" title="练习3.2"></a>练习3.2</h2><p>编写一段程序从标准输入中一次读入一行，然后修改该程序使其一次读入一个词。</p><p>解：</p><p>一次读入一行：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>getline<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一次读入一个词</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>getline<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-3"><a href="#练习3-3" class="headerlink" title="练习3.3"></a>练习3.3</h2><p>请说明string类的输入运算符和getline函数分别是如何处理空白字符的。</p><p>解：</p><ul><li>类似<code>is &gt;&gt; s</code>的读取：string对象会忽略开头的空白并从第一个真正的字符开始，直到遇见下一<strong>空白</strong>为止。</li><li>类似<code>getline(is, s)</code>的读取：string对象会从输入流中读取字符，直到遇见<strong>换行符</strong>为止。</li></ul><h2 id="练习3-4"><a href="#练习3-4" class="headerlink" title="练习3.4"></a>练习3.4</h2><p>编写一段程序读取两个字符串，比较其是否相等并输出结果。如果不相等，输出比较大的那个字符串。改写上述程序，比较输入的两个字符串是否等长，如果不等长，输出长度较大的那个字符串。</p><p>解：</p><p>比较大的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str1<span class="token punctuation">,</span> str2<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str1 <span class="token operator">>></span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The two strings are equal."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The larger string is "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str1 <span class="token operator">></span> str2<span class="token punctuation">)</span> <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>长度大的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string str1<span class="token punctuation">,</span> str2<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str1 <span class="token operator">>></span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The two strings have the same length."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The longer string is "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-5"><a href="#练习3-5" class="headerlink" title="练习3.5"></a>练习3.5</h2><p>编写一段程序从标准输入中读入多个字符串并将他们连接起来，输出连接成的大字符串。然后修改上述程序，用空格把输入的多个字符串分割开来。</p><p>解：</p><p>未隔开的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string result<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隔开的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string result<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> s <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-6"><a href="#练习3-6" class="headerlink" title="练习3.6"></a>练习3.6</h2><p>编写一段程序，使用范围for语句将字符串内所有字符用X代替。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>x <span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-7"><a href="#练习3-7" class="headerlink" title="练习3.7"></a>练习3.7</h2><p>就上一题完成的程序而言，如果将循环控制的变量设置为char将发生什么？先估计一下结果，然后实际编程进行验证。</p><p>解：</p><p>如果设置为char，那么原来的字符串不会发生改变。</p><h2 id="练习3-8"><a href="#练习3-8" class="headerlink" title="练习3.8"></a>练习3.8</h2><p>分别用while循环和传统for循环重写第一题的程序，你觉得哪种形式更好呢？为什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>范围for语句更好，不直接操作索引，更简洁。</p><h2 id="练习3-9"><a href="#练习3-9" class="headerlink" title="练习3.9"></a>练习3.9</h2><p>下面的程序有何作用？它合法吗？如果不合法？为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>不合法。使用下标访问空字符串是非法的行为。</p><h2 id="练习3-10"><a href="#练习3-10" class="headerlink" title="练习3.10"></a>练习3.10</h2><p>编写一段程序，读入一个包含标点符号的字符串，将标点符号去除后输出字符串剩余的部分。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s <span class="token operator">=</span> <span class="token string">"this, is. a :string!"</span><span class="token punctuation">;</span>string result<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ispunct</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">+=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-11"><a href="#练习3-11" class="headerlink" title="练习3.11"></a>练习3.11</h2><p>下面的范围for语句合法吗？如果合法，c的类型是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> string s <span class="token operator">=</span> <span class="token string">"Keep out!"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c <span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>要根据for循环中的代码来看是否合法，c是string 对象中字符的引用，s是常量。因此如果for循环中的代码重新给c赋值就会非法，如果不改变c的值，那么合法。</p><h2 id="练习3-12"><a href="#练习3-12" class="headerlink" title="练习3.12"></a>练习3.12</h2><p>下列vector对象的定义有不正确的吗？如果有，请指出来。对于正确的，描述其执行结果；对于不正确的，说明其错误的原因。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ivec<span class="token punctuation">;</span>         <span class="token comment">// 在C++11当中合法</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> svec <span class="token operator">=</span> ivec<span class="token punctuation">;</span>       <span class="token comment">// 不合法，类型不一样</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">svec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 合法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习3-13"><a href="#练习3-13" class="headerlink" title="练习3.13"></a>练习3.13</h2><p>下列的vector对象各包含多少个元素？这些元素的值分别是多少？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>         <span class="token comment">// size:0,  no values.</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// size:10, value:0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size:10, value:42</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v4<span class="token punctuation">&#123;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">// size:1,  value:10</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v5<span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// size:2,  value:10, 42</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v6<span class="token punctuation">&#123;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// size:10, value:""</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v7<span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hi"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// size:10, value:"hi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-14"><a href="#练习3-14" class="headerlink" title="练习3.14"></a>练习3.14</h2><p>编写一段程序，用cin读入一组整数并把它们存入一个vector对象。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-15"><a href="#练习3-15" class="headerlink" title="练习3.15"></a>练习3.15</h2><p>改写上题程序，不过这次读入的是字符串。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>string i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-16"><a href="#练习3-16" class="headerlink" title="练习3.16"></a>练习3.16</h2><p>编写一段程序，把练习3.13中vector对象的容量和具体内容输出出来</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>         <span class="token comment">// size:0,  no values.</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// size:10, value:0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// size:10, value:42</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v4<span class="token punctuation">&#123;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">// size:1,  value:10</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v5<span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// size:2,  value:10, 42</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v6<span class="token punctuation">&#123;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// size:10, value:""</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v7<span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hi"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// size:10, value:"hi"</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1 size :"</span> <span class="token operator">&lt;&lt;</span> v1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v2 size :"</span> <span class="token operator">&lt;&lt;</span> v2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v3 size :"</span> <span class="token operator">&lt;&lt;</span> v3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v4 size :"</span> <span class="token operator">&lt;&lt;</span> v4<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v5 size :"</span> <span class="token operator">&lt;&lt;</span> v5<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v6 size :"</span> <span class="token operator">&lt;&lt;</span> v6<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v7 size :"</span> <span class="token operator">&lt;&lt;</span> v7<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v1 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v2 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v3 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v4 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v5 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v5<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v6 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v6<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v7 content: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v7<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" , "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-17"><a href="#练习3-17" class="headerlink" title="练习3.17"></a>练习3.17</h2><p>从cin读入一组词并把它们存入一个vector对象，然后设法把所有词都改为大写形式。输出改变后的结果，每个词占一行。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>str <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c <span class="token operator">:</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-18"><a href="#练习3-18" class="headerlink" title="练习3.18"></a>练习3.18</h2><p>下面的程序合法吗？如果不合法，你准备如何修改？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec<span class="token punctuation">;</span>ivec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>不合法。应改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ivec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习3-19"><a href="#练习3-19" class="headerlink" title="练习3.19"></a>练习3.19</h2><p>如果想定义一个含有10个元素的vector对象，所有元素的值都是42，请例举三种不同的实现方法，哪种方式更好呢？</p><p>如下三种：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ivec1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec2<span class="token punctuation">&#123;</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec3<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>ivec3<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方式最好。</p><h2 id="练习3-20"><a href="#练习3-20" class="headerlink" title="练习3.20"></a>练习3.20</h2><p>读入一组整数并把他们存入一个vector对象，将每对相邻整数的和输出出来。改写你的程序，这次要求先输出第一个和最后一个元素的和，接着输出第二个和倒数第二个元素的和，以此类推。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ivec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ivec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ivec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> ivec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//---------------------------------</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> ivec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> ivec<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+</span> ivec<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token operator">++</span>m<span class="token punctuation">;</span><span class="token operator">--</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-21"><a href="#练习3-21" class="headerlink" title="练习3.21"></a>练习3.21</h2><p>请使用迭代器重做3.3.3节的第一个练习。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">check_and_print</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  content: ["</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">","</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"]\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">check_and_print</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> vec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  content: ["</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">","</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"]\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v4<span class="token punctuation">&#123;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v5<span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v6<span class="token punctuation">&#123;</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v7<span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hi"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">check_and_print</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-22"><a href="#练习3-22" class="headerlink" title="练习3.22"></a>练习3.22</h2><p>修改之前那个输出text第一段的程序，首先把text的第一段全部改成大写形式，然后输出它。</p><p>解： 略   </p><h2 id="练习3-23"><a href="#练习3-23" class="headerlink" title="练习3.23"></a>练习3.23</h2><p>编写一段程序，创建一个含有10个整数的vector对象，然后使用迭代器将所有元素的值都变成原来的两倍。输出vector对象的内容，检验程序是否正确。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>it <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> one <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> one <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-24"><a href="#练习3-24" class="headerlink" title="练习3.24"></a>练习3.24</h2><p>请使用迭代器重做3.3.3节的最后一个练习。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ivec<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ivec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> ivec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ivec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>it <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//---------------------------------</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">auto</span> it1 <span class="token operator">=</span> ivec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it2 <span class="token operator">=</span> ivec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it1 <span class="token operator">&lt;</span> it2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it1 <span class="token operator">+</span> <span class="token operator">*</span>it2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token operator">++</span>it1<span class="token punctuation">;</span><span class="token operator">--</span>it2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-25"><a href="#练习3-25" class="headerlink" title="练习3.25"></a>练习3.25</h2><p>3.3.3节划分分数段的程序是使用下标运算符实现的，请利用迭代器改写该程序实现完全相同的功能。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> <span class="token function">scores</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> grade<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> grade<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> grade <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> scores<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-26"><a href="#练习3-26" class="headerlink" title="练习3.26"></a>练习3.26</h2><p>在100页的二分搜索程序中，为什么用的是 <code>mid = beg + (end - beg) / 2</code>, 而非 <code>mid = (beg + end) / 2 ;</code> ?</p><p>解：</p><p>因为两个迭代器相互之间支持的运算只有 <code>-</code> ，而没有 <code>+</code> 。<br>但是迭代器和迭代器差值（整数值）之间支持 <code>+</code>。</p><h2 id="练习3-27"><a href="#练习3-27" class="headerlink" title="练习3.27"></a>练习3.27</h2><p>假设<code>txt_size</code>是一个无参函数，它的返回值是<code>int</code>。请回答下列哪个定义是非法的，为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> buf_size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span> ia<span class="token punctuation">[</span>buf_size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">-</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token function">txt_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">char</span> st<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"fundamental"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 非法。维度必须是一个常量表达式。</li><li>(b) 合法。</li><li>(c) 非法。txt_size() 的值必须要到运行时才能得到。</li><li>(d) 非法。数组的大小应该是12。</li></ul><h2 id="练习3-28"><a href="#练习3-28" class="headerlink" title="练习3.28"></a>练习3.28</h2><p>下列数组中元素的值是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string sa<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>string sa2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ia2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>数组的元素会被默认初始化。<br><code>sa</code>的元素值全部为空字符串，<code>ia</code> 的元素值全部为0。<br><code>sa2</code>的元素值全部为空字符串，<code>ia2</code>的元素值全部未定义。</p><h2 id="练习3-29"><a href="#练习3-29" class="headerlink" title="练习3.29"></a>练习3.29</h2><p>相比于vector 来说，数组有哪些缺点，请例举一些。</p><p>解：</p><ul><li>数组的大小是确定的。</li><li>不能随意增加元素。</li><li>不允许拷贝和赋值。</li></ul><h2 id="练习3-30"><a href="#练习3-30" class="headerlink" title="练习3.30"></a>练习3.30</h2><p>指出下面代码中的索引错误。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">constexpr</span> size_t array_size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> ia<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t ix <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ix <span class="token operator">&lt;=</span> array_size<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span>ia<span class="token punctuation">[</span>ix<span class="token punctuation">]</span> <span class="token operator">=</span> ix<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>当<code>ix</code>增长到 10 的时候，<code>ia[ix]</code>的下标越界。</p><h2 id="练习3-31"><a href="#练习3-31" class="headerlink" title="练习3.31"></a>练习3.31</h2><p>编写一段程序，定义一个含有10个int的数组，令每个元素的值就是其下标值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-32"><a href="#练习3-32" class="headerlink" title="练习3.32"></a>练习3.32</h2><p>将上一题刚刚创建的数组拷贝给另一数组。利用vector重写程序，实现类似的功能。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// array</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// vector</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v2<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-33"><a href="#练习3-33" class="headerlink" title="练习3.33"></a>练习3.33</h2><p>对于104页的程序来说，如果不初始化scores将会发生什么？</p><p>解：</p><p>数组中所有元素的值将会未定义。</p><h2 id="练习3-34"><a href="#练习3-34" class="headerlink" title="练习3.34"></a>练习3.34</h2><p>假定<code>p1</code> 和 <code>p2</code> 都指向同一个数组中的元素，则下面程序的功能是什么？什么情况下该程序是非法的？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">p1 <span class="token operator">+=</span> p2 <span class="token operator">-</span> p1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>将 <code>p1</code> 移动到 <code>p2</code> 的位置。任何情况下都合法。</p><h2 id="练习3-35"><a href="#练习3-35" class="headerlink" title="练习3.35"></a>练习3.35</h2><p>编写一段程序，利用指针将数组中的元素置为0。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> arr<span class="token punctuation">;</span> ptr <span class="token operator">!=</span> arr <span class="token operator">+</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-36"><a href="#练习3-36" class="headerlink" title="练习3.36"></a>练习3.36</h2><p>编写一段程序，比较两个数组是否相等。再写一段程序，比较两个vector对象是否相等。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>begin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>end<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token comment">// pb point to begin of the array, pe point to end of the array.</span><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pb1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pe1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pb2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pe2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pe1 <span class="token operator">-</span> pb1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>pe2 <span class="token operator">-</span> pb2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// have different size.</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> i <span class="token operator">=</span> pb1<span class="token punctuation">,</span> <span class="token operator">*</span>j <span class="token operator">=</span> pb2<span class="token punctuation">;</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> pe1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> pe2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>i <span class="token operator">!=</span> <span class="token operator">*</span>j<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">begin</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The two arrays are equal."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The two arrays are not equal."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"=========="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vec1 <span class="token operator">==</span> vec2<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The two vectors are equal."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The two vectors are not equal."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-37"><a href="#练习3-37" class="headerlink" title="练习3.37"></a>练习3.37</h2><p>下面的程序是何含义，程序的输出结果是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> ca<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cp <span class="token operator">=</span> ca<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>cp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>cp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token operator">++</span>cp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>会将ca 字符数组中的元素打印出来。但是因为没有空字符的存在，程序不会退出循环。</p><h2 id="练习3-38"><a href="#练习3-38" class="headerlink" title="练习3.38"></a>练习3.38</h2><p>在本节中我们提到，将两个指针相加不但是非法的，而且也没有什么意义。请问为什么两个指针相加没有意义？</p><p>解：</p><p>将两个指针相减可以表示两个指针(在同一数组中)相距的距离，将指针加上一个整数也可以表示移动这个指针到某一位置。但是两个指针相加并没有逻辑上的意义，因此两个指针不能相加。</p><h2 id="练习3-39"><a href="#练习3-39" class="headerlink" title="练习3.39"></a>练习3.39</h2><p>编写一段程序，比较两个 <code>string</code> 对象。再编写一段程序，比较两个C风格字符串的内容。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// use string.</span>    string <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"Mooophy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token string">"Pezy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"same string."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">></span> s2<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Mooophy > Pezy"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Mooophy &lt; Pezy"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"========="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// use C-Style character strings.</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cs1 <span class="token operator">=</span> <span class="token string">"Wangyue"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cs2 <span class="token operator">=</span> <span class="token string">"Pezy"</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>cs1<span class="token punctuation">,</span> cs2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"same string."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wangyue &lt; Pezy"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wangyue > Pezy"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-40"><a href="#练习3-40" class="headerlink" title="练习3.40"></a>练习3.40</h2><p>编写一段程序，定义两个字符数组并用字符串字面值初始化它们；接着再定义一个字符数组存放前面两个数组连接后的结果。使用<code>strcpy</code>和<code>strcat</code>把前两个数组的内容拷贝到第三个数组当中。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">const</span> <span class="token keyword">char</span> cstr1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> cstr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"world!"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">constexpr</span> size_t new_size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>cstr1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>cstr2<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cstr3<span class="token punctuation">[</span>new_size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>cstr3<span class="token punctuation">,</span> cstr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cstr3<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cstr3<span class="token punctuation">,</span> cstr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cstr3 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-41"><a href="#练习3-41" class="headerlink" title="练习3.41"></a>练习3.41</h2><p>编写一段程序，用整型数组初始化一个vector对象。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>begin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>end<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-42"><a href="#练习3-42" class="headerlink" title="练习3.42"></a>练习3.42</h2><p>编写一段程序，将含有整数元素的 <code>vector</code> 对象拷贝给一个整型数组。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>begin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>end<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-43"><a href="#练习3-43" class="headerlink" title="练习3.43"></a>练习3.43</h2><p>编写3个不同版本的程序，令其均能输出<code>ia</code>的元素。<br>版本1使用范围<code>for</code>语句管理迭代过程；版本2和版本3都使用普通<code>for</code>语句，其中版本2要求使用下标运算符，版本3要求使用指针。<br>此外，在所有3个版本的程序中都要直接写出数据类型，而不能使用类型别名、<code>auto</code>关键字和<code>decltype</code>关键字。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token punctuation">&#123;</span>         <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// range for</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>row<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">:</span> row<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> col <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// for loop</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// using pointers.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>row<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> row <span class="token operator">!=</span> arr <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>col <span class="token operator">=</span> <span class="token operator">*</span>row<span class="token punctuation">;</span> col <span class="token operator">!=</span> <span class="token operator">*</span>row <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>col <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-44"><a href="#练习3-44" class="headerlink" title="练习3.44"></a>练习3.44</h2><p>改写上一个练习中的程序，使用类型别名来代替循环控制变量的类型。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// a range for to manage the iteration</span>    <span class="token comment">// use type alias</span>    <span class="token keyword">using</span> int_array <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int_array<span class="token operator">&amp;</span> p <span class="token operator">:</span> ia<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">:</span> p<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> q <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// ordinary for loop using subscripts</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> ia<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// using pointers.</span>    <span class="token comment">// use type alias</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int_array<span class="token operator">*</span> p <span class="token operator">=</span> ia<span class="token punctuation">;</span> p <span class="token operator">!=</span> ia <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> q <span class="token operator">!=</span> <span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>q<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>q <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习3-45"><a href="#练习3-45" class="headerlink" title="练习3.45"></a>练习3.45</h2><p>再一次改写程序，这次使用 <code>auto</code> 关键字。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// a range for to manage the iteration</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> p <span class="token operator">:</span> ia<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">:</span> p<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> q <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// ordinary for loop using subscripts</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> ia<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// using pointers.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> ia<span class="token punctuation">;</span> p <span class="token operator">!=</span> ia <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> q <span class="token operator">!=</span> <span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>q<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>q <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案5</title>
      <link href="2021/04/10/excersize/ch05/"/>
      <url>2021/04/10/excersize/ch05/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-语句"><a href="#第五章-语句" class="headerlink" title="第五章 语句"></a>第五章 语句</h1><h2 id="练习5-1"><a href="#练习5-1" class="headerlink" title="练习5.1"></a>练习5.1</h2><p>什么是空语句？什么时候会用到空语句？</p><p>解：</p><p>只含义一个单独的分号的语句是空语句。如：<code>;</code>。</p><p>如果在程序的某个地方，语法上需要一条语句但是逻辑上不需要，此时应该使用空语句。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">&amp;&amp;</span> s <span class="token operator">!=</span> sought<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习5-2"><a href="#练习5-2" class="headerlink" title="练习5.2"></a>练习5.2</h2><p>什么是块？什么时候会用到块？</p><p>解：</p><p>用花括号括起来的语句和声明的序列就是块。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在程序的某个地方，语法上需要一条语句，而逻辑上需要多条语句，此时应该使用块</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> val<span class="token punctuation">;</span><span class="token operator">++</span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-3"><a href="#练习5-3" class="headerlink" title="练习5.3"></a>练习5.3</h2><p>使用逗号运算符重写1.4.1节的<code>while</code>循环，使它不再需要块，观察改写之后的代码可读性提高了还是降低了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>    sum <span class="token operator">+=</span> val<span class="token punctuation">,</span> <span class="token operator">++</span>val<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码的可读性反而降低了。</p><h2 id="练习5-4"><a href="#练习5-4" class="headerlink" title="练习5.4"></a>练习5.4</h2><p>说明下列例子的含义，如果存在问题，试着修改它。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>string<span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* . . . */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">bool</span> status <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* . . . */</span> <span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* . . . */</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 这个循环试图用迭代器遍历<code>string</code>，但是变量的定义应该放在循环的外面，目前每次循环都会重新定义一个变量，明显是错误的。</li><li>(b) 这个循环的<code>while</code>和<code>if</code>是两个独立的语句，<code>if</code>语句中无法访问<code>status</code>变量，正确的做法是应该将<code>if</code>语句包含在<code>while</code>里面。</li></ul><h2 id="练习5-5"><a href="#练习5-5" class="headerlink" title="练习5.5"></a>练习5.5</h2><p>写一段自己的程序，使用<code>if else</code>语句实现把数字转换为字母成绩的要求。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> scores <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"A++"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> g<span class="token punctuation">;</span> cin <span class="token operator">>></span> g<span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string letter<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            letter <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            letter <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token punctuation">(</span>g <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span>                letter <span class="token operator">+=</span> g <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">></span> <span class="token number">7</span> <span class="token operator">?</span> <span class="token string">"+"</span> <span class="token operator">:</span> g <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token string">"-"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> letter <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-6"><a href="#练习5-6" class="headerlink" title="练习5.6"></a>练习5.6</h2><p>改写上一题的程序，使用条件运算符代替<code>if else</code>语句。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> scores <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"A++"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> grade <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> grade<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string lettergrade <span class="token operator">=</span> grade <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> scores<span class="token punctuation">[</span><span class="token punctuation">(</span>grade <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        lettergrade <span class="token operator">+=</span> <span class="token punctuation">(</span>grade <span class="token operator">==</span> <span class="token number">100</span> <span class="token operator">||</span> grade <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token punctuation">(</span>grade <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"+"</span> <span class="token operator">:</span> <span class="token punctuation">(</span>grade <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"-"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> lettergrade <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-7"><a href="#练习5-7" class="headerlink" title="练习5.7"></a>练习5.7</h2><p>改写下列代码段中的错误。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ival1 <span class="token operator">!=</span> ival2<span class="token punctuation">)</span> ival1 <span class="token operator">=</span> ival2    <span class="token keyword">else</span>     ival1 <span class="token operator">=</span> ival2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ival <span class="token operator">&lt;</span> minval<span class="token punctuation">)</span> minval <span class="token operator">=</span> ival<span class="token punctuation">;</span>    occurs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ival <span class="token operator">=</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ival = "</span> <span class="token operator">&lt;&lt;</span> ival <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ival<span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ival = 0\n"</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ival <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    ival <span class="token operator">=</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) <code>ival1 = ival2</code> 后面少了分号。</li><li>(b) 应该用花括号括起来。</li><li>(c) <code>if (!ival)</code> 应该改为 <code>else</code>。</li><li>(d) <code>if (ival = 0)</code> 应该改为 <code>if (ival == 0)</code>。</li></ul><h2 id="练习5-8"><a href="#练习5-8" class="headerlink" title="练习5.8"></a>练习5.8</h2><p>什么是“悬垂else”？C++语言是如何处理else子句的？</p><p>解：</p><p>用来描述在嵌套的<code>if else</code>语句中，如果<code>if</code>比<code>else</code>多时如何处理的问题。C++使用的方法是<code>else</code>匹配最近没有配对的<code>if</code>。</p><h2 id="练习5-9"><a href="#练习5-9" class="headerlink" title="练习5.9"></a>练习5.9</h2><p>编写一段程序，使用一系列<code>if</code>语句统计从<code>cin</code>读入的文本中有多少元音字母。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> aCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> iCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> oCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> uCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">++</span>aCnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">)</span> <span class="token operator">++</span>eCnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token operator">++</span>iCnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'o'</span><span class="token punctuation">)</span> <span class="token operator">++</span>oCnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'u'</span><span class="token punctuation">)</span> <span class="token operator">++</span>uCnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel a: \t"</span> <span class="token operator">&lt;&lt;</span> aCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel e: \t"</span> <span class="token operator">&lt;&lt;</span> eCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel i: \t"</span> <span class="token operator">&lt;&lt;</span> iCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel o: \t"</span> <span class="token operator">&lt;&lt;</span> oCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel u: \t"</span> <span class="token operator">&lt;&lt;</span> uCnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-10"><a href="#练习5-10" class="headerlink" title="练习5.10"></a>练习5.10</h2><p>我们之前实现的统计元音字母的程序存在一个问题：如果元音字母以大写形式出现，不会被统计在内。编写一段程序，既统计元音字母的小写形式，也统计元音字母的大写形式，也就是说，新程序遇到’a’和’A’都应该递增<code>aCnt</code>的值，以此类推。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> aCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> iCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> oCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> uCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> ch<span class="token punctuation">)</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span><span class="token operator">++</span>aCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span><span class="token operator">++</span>eCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'i'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'I'</span><span class="token operator">:</span><span class="token operator">++</span>iCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'o'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'O'</span><span class="token operator">:</span><span class="token operator">++</span>oCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'u'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'U'</span><span class="token operator">:</span><span class="token operator">++</span>uCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel a(A): \t"</span> <span class="token operator">&lt;&lt;</span> aCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel e(E): \t"</span> <span class="token operator">&lt;&lt;</span> eCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel i(I): \t"</span> <span class="token operator">&lt;&lt;</span> iCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel o(O): \t"</span> <span class="token operator">&lt;&lt;</span> oCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel u(U): \t"</span> <span class="token operator">&lt;&lt;</span> uCnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-11"><a href="#练习5-11" class="headerlink" title="练习5.11"></a>练习5.11</h2><p>修改统计元音字母的程序，使其也能统计空格、制表符、和换行符的数量。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> aCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> iCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> oCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> uCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> spaceCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tabCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> newLineCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> std<span class="token double-colon punctuation">::</span>noskipws <span class="token operator">>></span> ch<span class="token punctuation">)</span>  <span class="token comment">//noskipws(no skip whitespce)</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span><span class="token operator">++</span>aCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span><span class="token operator">++</span>eCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'i'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'I'</span><span class="token operator">:</span><span class="token operator">++</span>iCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'o'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'O'</span><span class="token operator">:</span><span class="token operator">++</span>oCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'u'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'U'</span><span class="token operator">:</span><span class="token operator">++</span>uCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">' '</span><span class="token operator">:</span><span class="token operator">++</span>spaceCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'\t'</span><span class="token operator">:</span><span class="token operator">++</span>tabCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'\n'</span><span class="token operator">:</span><span class="token operator">++</span>newLineCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel a(A): \t"</span> <span class="token operator">&lt;&lt;</span> aCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel e(E): \t"</span> <span class="token operator">&lt;&lt;</span> eCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel i(I): \t"</span> <span class="token operator">&lt;&lt;</span> iCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel o(O): \t"</span> <span class="token operator">&lt;&lt;</span> oCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel u(U): \t"</span> <span class="token operator">&lt;&lt;</span> uCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of space: \t"</span> <span class="token operator">&lt;&lt;</span> spaceCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of tab char: \t"</span> <span class="token operator">&lt;&lt;</span> tabCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of new line: \t"</span> <span class="token operator">&lt;&lt;</span> newLineCnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，使用 <code>std::noskipws</code>可以保留默认跳过的空格。</p><h2 id="练习5-12"><a href="#练习5-12" class="headerlink" title="练习5.12"></a>练习5.12</h2><p>修改统计元音字母的程序，使其能统计含以下两个字符的字符序列的数量：<code>ff</code>、<code>fl</code>和<code>fi</code>。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> aCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> iCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> oCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> uCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> spaceCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tabCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> newLineCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ffCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fiCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> prech <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> std<span class="token double-colon punctuation">::</span>noskipws <span class="token operator">>></span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span><span class="token operator">++</span>aCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span><span class="token operator">++</span>eCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'i'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>prech <span class="token operator">==</span> <span class="token string">'f'</span><span class="token punctuation">)</span> <span class="token operator">++</span>fiCnt<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'I'</span><span class="token operator">:</span><span class="token operator">++</span>iCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'o'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'O'</span><span class="token operator">:</span><span class="token operator">++</span>oCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'u'</span><span class="token operator">:</span><span class="token keyword">case</span> <span class="token string">'U'</span><span class="token operator">:</span><span class="token operator">++</span>uCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">' '</span><span class="token operator">:</span><span class="token operator">++</span>spaceCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'\t'</span><span class="token operator">:</span><span class="token operator">++</span>tabCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'\n'</span><span class="token operator">:</span><span class="token operator">++</span>newLineCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'f'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>prech <span class="token operator">==</span> <span class="token string">'f'</span><span class="token punctuation">)</span> <span class="token operator">++</span>ffCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>prech <span class="token operator">==</span> <span class="token string">'f'</span><span class="token punctuation">)</span> <span class="token operator">++</span>flCnt<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>prech <span class="token operator">=</span> ch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel a(A): \t"</span> <span class="token operator">&lt;&lt;</span> aCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel e(E): \t"</span> <span class="token operator">&lt;&lt;</span> eCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel i(I): \t"</span> <span class="token operator">&lt;&lt;</span> iCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel o(O): \t"</span> <span class="token operator">&lt;&lt;</span> oCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of vowel u(U): \t"</span> <span class="token operator">&lt;&lt;</span> uCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of space: \t"</span> <span class="token operator">&lt;&lt;</span> spaceCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of tab char: \t"</span> <span class="token operator">&lt;&lt;</span> tabCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of new line: \t"</span> <span class="token operator">&lt;&lt;</span> newLineCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of ff: \t"</span> <span class="token operator">&lt;&lt;</span> ffCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of fl: \t"</span> <span class="token operator">&lt;&lt;</span> flCnt <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"Number of fi: \t"</span> <span class="token operator">&lt;&lt;</span> fiCnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-13"><a href="#练习5-13" class="headerlink" title="练习5.13"></a>练习5.13</h2><p>下面显示的每个程序都含有一个常见的编码错误，指出错误在哪里，然后修改它们。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">unsigned</span> aCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> iouCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">next_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span> aCnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span> eCnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> iouCnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">unsigned</span> index <span class="token operator">=</span> <span class="token function">some_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ivec<span class="token punctuation">[</span> ix <span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            ix <span class="token operator">=</span> ivec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            ivec<span class="token punctuation">[</span> ix <span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">unsigned</span> evenCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> oddCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token operator">:</span>            oddcnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">:</span>            evencnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">unsigned</span> ival<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> jval<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> kval<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> bufsize<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> swt <span class="token operator">=</span> <span class="token function">get_bufCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>swt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> ival<span class="token operator">:</span>            bufsize <span class="token operator">=</span> ival <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> jval<span class="token operator">:</span>            bufsize <span class="token operator">=</span> jval <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> kval<span class="token operator">:</span>            bufsize <span class="token operator">=</span> kval <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>(a) 少了<code>break</code>语句。应该为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> aCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> eCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> iouCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">next_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span> aCnt<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span> eCnt<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> iouCnt<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(b) 在<code>default</code>分支当中，<code>ix</code>未定义。应该在外部定义<code>ix</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> index <span class="token operator">=</span> <span class="token function">some_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ix<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            ix <span class="token operator">=</span> <span class="token function">get_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ivec<span class="token punctuation">[</span> ix <span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            ix <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ivec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            ivec<span class="token punctuation">[</span> ix <span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(c) <code>case</code>后面应该用冒号而不是逗号。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> evenCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> oddCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>            oddcnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            evencnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(d) <code>case</code>标签必须是整型常量表达式。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">unsigned</span> ival<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> jval<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> kval<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> bufsize<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> swt <span class="token operator">=</span> <span class="token function">get_bufCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>swt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> ival<span class="token operator">:</span>            bufsize <span class="token operator">=</span> ival <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> jval<span class="token operator">:</span>            bufsize <span class="token operator">=</span> jval <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> kval<span class="token operator">:</span>            bufsize <span class="token operator">=</span> kval <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-14"><a href="#练习5-14" class="headerlink" title="练习5.14"></a>练习5.14</h2><p>编写一段程序，从标准输入中读取若干<code>string</code>对象并查找连续重复出现的单词，所谓连续重复出现的意思是：一个单词后面紧跟着这个单词本身。要求记录连续重复出现的最大次数以及对应的单词。如果这样的单词存在，输出重复出现的最大次数；如果不存在，输出一条信息说明任何单词都没有连续出现过。<br>例如：如果输入是：</p><pre class="line-numbers language-none"><code class="language-none">how now now now brown cow cow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么输出应该表明单词now连续出现了3次。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>pair<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> max_duplicated<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string str<span class="token punctuation">,</span> prestr<span class="token punctuation">;</span> cin <span class="token operator">>></span> str<span class="token punctuation">;</span> prestr <span class="token operator">=</span> str<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> prestr<span class="token punctuation">)</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>        <span class="token keyword">else</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> max_duplicated<span class="token punctuation">.</span>second<span class="token punctuation">)</span> max_duplicated <span class="token operator">=</span> <span class="token punctuation">&#123;</span> prestr<span class="token punctuation">,</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max_duplicated<span class="token punctuation">.</span>first<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"There's no duplicated string."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"the word "</span> <span class="token operator">&lt;&lt;</span> max_duplicated<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" occurred "</span> <span class="token operator">&lt;&lt;</span> max_duplicated<span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" times. "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-15"><a href="#练习5-15" class="headerlink" title="练习5.15"></a>练习5.15</h2><p>说明下列循环的含义并改正其中的错误。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">!=</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ix <span class="token operator">!=</span> sz<span class="token punctuation">)</span>    <span class="token comment">// . . .</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> ix<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ix <span class="token operator">!=</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">!=</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">,</span> <span class="token operator">++</span>sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>应该改为下面这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span> ix<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">!=</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ix <span class="token operator">!=</span> sz<span class="token punctuation">)</span>    <span class="token comment">// . . .</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> ix<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> ix <span class="token operator">!=</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ix <span class="token operator">!=</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>ix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-16"><a href="#练习5-16" class="headerlink" title="练习5.16"></a>练习5.16</h2><p><code>while</code>循环特别适用于那种条件不变、反复执行操作的情况，例如，当未达到文件末尾时不断读取下一个值。<br><code>for</code>循环更像是在按步骤迭代，它的索引值在某个范围内一次变化。根据每种循环的习惯各自编写一段程序，然后分别用另一种循环改写。<br>如果只能使用一种循环，你倾向于哪种？为什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> cin <span class="token operator">>></span> i <span class="token punctuation">)</span>    <span class="token comment">// ...</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cin <span class="token operator">>></span> i<span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment">// ...</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token comment">// ...</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只能用一种循环，我会更倾向使用<code>while</code>，因为<code>while</code>显得简洁，代码可读性强。</p><h2 id="练习5-17"><a href="#练习5-17" class="headerlink" title="练习5.17"></a>练习5.17</h2><p>假设有两个包含整数的<code>vector</code>对象，编写一段程序，检验其中一个<code>vector</code>对象是否是另一个的前缀。<br>为了实现这一目标，对于两个不等长的<code>vector</code>对象，只需挑出长度较短的那个，把它的所有元素和另一个<code>vector</code>对象比较即可。<br>例如，如果两个<code>vector</code>对象的元素分别是0、1、1、2 和 0、1、1、2、3、5、8，则程序的返回结果为真。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">is_prefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> rhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">is_prefix</span><span class="token punctuation">(</span>rhs<span class="token punctuation">,</span> lhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> lhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lhs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> rhs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l<span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> r<span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">is_prefix</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"yes\n"</span> <span class="token operator">:</span> <span class="token string">"no\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-18"><a href="#练习5-18" class="headerlink" title="练习5.18"></a>练习5.18</h2><p>说明下列循环的含义并改正其中的错误。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 应该添加花括号</span>        <span class="token keyword">int</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please enter two numbers to sum:"</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> v1 <span class="token operator">>></span> v2<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum is: "</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> ival<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// . . .</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ival <span class="token operator">=</span> <span class="token function">get_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应该将ival 定义在循环外</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span> ival <span class="token operator">=</span> <span class="token function">get_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        ival <span class="token operator">=</span> <span class="token function">get_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ival<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应该将ival 定义在循环外</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-19"><a href="#练习5-19" class="headerlink" title="练习5.19"></a>练习5.19</h2><p>编写一段程序，使用<code>do while</code>循环重复地执行下述任务：<br>首先提示用户输入两个<code>string</code>对象，然后挑出较短的那个并输出它。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string rsp<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input two strings: "</span><span class="token punctuation">;</span>        string str1<span class="token punctuation">,</span> str2<span class="token punctuation">;</span>        cin <span class="token operator">>></span> str1 <span class="token operator">>></span> str2<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>str1 <span class="token operator">&lt;=</span> str2 <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">)</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">" is less than the other. "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span>             <span class="token operator">&lt;&lt;</span> <span class="token string">"More? Enter yes or no: "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> rsp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">tolower</span><span class="token punctuation">(</span>rsp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-20"><a href="#练习5-20" class="headerlink" title="练习5.20"></a>练习5.20</h2><p>编写一段程序，从标准输入中读取<code>string</code>对象的序列直到连续出现两个相同的单词或者所有的单词都读完为止。<br>使用<code>while</code>循环一次读取一个单词，当一个单词连续出现两次时使用<code>break</code>语句终止循环。<br>输出连续重复出现的单词，或者输出一个消息说明没有任何单词是连续重复出现的。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string read<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> read<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> tmp<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">else</span> tmp <span class="token operator">=</span> read<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no word was repeated."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//eof(end of file)判断输入是否结束,或者文件结束符,等同于 CTRL+Z</span>    <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> read <span class="token operator">&lt;&lt;</span> <span class="token string">" occurs twice in succession."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-21"><a href="#练习5-21" class="headerlink" title="练习5.21"></a>练习5.21</h2><p>修改5.5.1节练习题的程序，使其找到的重复单词必须以大写字母开头。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string curr<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>    <span class="token keyword">bool</span> no_twice <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> curr<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>curr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prev <span class="token operator">==</span> curr<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> curr <span class="token operator">&lt;&lt;</span> <span class="token string">": occurs twice in succession."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            no_twice <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>no_twice<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no word was repeated."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-22"><a href="#练习5-22" class="headerlink" title="练习5.22"></a>练习5.22</h2><p>本节的最后一个例子跳回到<code>begin</code>，其实使用循环能更好的完成该任务，重写这段代码，注意不再使用<code>goto</code>语句。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 向后跳过一个带初始化的变量定义是合法的</span>begin<span class="token operator">:</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sz <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">goto</span> begin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>用 for 循环修改的话就是这样</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sz <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span> sz <span class="token operator">=</span> <span class="token function">get_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习5-23"><a href="#练习5-23" class="headerlink" title="练习5.23"></a>练习5.23</h2><p>编写一段程序，从标准输入读取两个整数，输出第一个数除以第二个数的结果。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>     cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">/</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-24"><a href="#练习5-24" class="headerlink" title="练习5.24"></a>练习5.24</h2><p>修改你的程序，使得当第二个数是0时抛出异常。先不要设定<code>catch</code>子句，运行程序并真的为除数输入0，看看会发生什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"divisor is 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">/</span> j <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习5-25"><a href="#练习5-25" class="headerlink" title="练习5.25"></a>练习5.25</h2><p>修改上一题的程序，使用<code>try</code>语句块去捕获异常。<code>catch</code>子句应该为用户输出一条提示信息，询问其是否输入新数并重新执行<code>try</code>语句块的内容。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>runtime_error<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input two integers:\n"</span><span class="token punctuation">,</span> cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>         <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token keyword">throw</span> <span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"divisor is 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">/</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span>runtime_error err<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> err<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\nTry again? Enter y or n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">char</span> c<span class="token punctuation">;</span>            cin <span class="token operator">>></span> c<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cin <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'n'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案10</title>
      <link href="2021/04/10/excersize/ch10/"/>
      <url>2021/04/10/excersize/ch10/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-泛型算法"><a href="#第十章-泛型算法" class="headerlink" title="第十章 泛型算法"></a>第十章 泛型算法</h1><h2 id="练习10-1"><a href="#练习10-1" class="headerlink" title="练习10.1"></a>练习10.1</h2><blockquote><p>头文件<code>algorithm</code>中定义了一个名为<code>count</code>的函数，它类似<code>find</code>， 接受一对迭代器和一个值作为参数。<code>count</code>返回给定值在序列中出现的次数。编写程序，读取<code>int</code>序列存入<code>vector</code>中，打印有多少个元素的值等于给定值。</p></blockquote><p>解：</p><p>见下题</p><h2 id="练习10-2"><a href="#练习10-2" class="headerlink" title="练习10.2"></a>练习10.2</h2><blockquote><p>重做上一题，但读取 <code>string</code> 序列存入 <code>list</code> 中。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 10.1</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex 10.01: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// 10.2</span>    std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> l <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex 10.02: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">count</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-3"><a href="#练习10-3" class="headerlink" title="练习10.3"></a>练习10.3</h2><blockquote><p>用 <code>accumulate</code>求一个 <code>vector&lt;int&gt;</code> 中元素之和。</p></blockquote><p>解：</p><p>见下题。</p><h2 id="练习10-4"><a href="#练习10-4" class="headerlink" title="练习10.4"></a>练习10.4</h2><blockquote><p>假定 <code>v</code> 是一个<code>vector&lt;double&gt;</code>，那么调用 <code>accumulate(v.cbegin(),v.cend(),0)</code> 有何错误（如果存在的话）？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Exercise 10.3</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex 10.03: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// Exercise 10.4</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> vd <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">3.3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout   <span class="token operator">&lt;&lt;</span> <span class="token string">"ex 10.04: "</span>                <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>vd<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vd<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                        <span class="token comment">//   ^&lt;-- note here.</span>    <span class="token comment">// @attention</span>    <span class="token comment">//</span>    <span class="token comment">// The ouput is 4 rather than 4.9 as expected.</span>    <span class="token comment">// The reason is std::accumulate is a template function. The third parameter is _Tp __init</span>    <span class="token comment">// When "0" , an integer, had been specified here, the compiler deduced _Tp as</span>    <span class="token comment">// interger.As a result , when the following statments were being excuted :</span>    <span class="token comment">//  for (; __first != __last; ++__first)</span>    <span class="token comment">//__init = __init + *__first;</span>    <span class="token comment">//  return __init;</span>    <span class="token comment">// all calculation would be converted to integer.</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果会是 <code>int</code> 类型。</p><h2 id="练习10-5"><a href="#练习10-5" class="headerlink" title="练习10.5"></a>练习10.5</h2><blockquote><p>在本节对名册（<code>roster</code>）调用<code>equal</code>的例子中，如果两个名册中保存的都是C风格字符串而不是<code>string</code>，会发生什么？</p></blockquote><p>C风格字符串是用指向字符的指针表示的，因此会比较两个指针的值（地址），而不会比较这两个字符串的内容。</p><h2 id="练习10-6"><a href="#练习10-6" class="headerlink" title="练习10.6"></a>练习10.6</h2><blockquote><p>编写程序，使用 <code>fill_n</code> 将一个序列中的 <code>int</code> 值都设置为0。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>fill_n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">fill_n</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> vec<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-7"><a href="#练习10-7" class="headerlink" title="练习10.7"></a>练习10.7</h2><blockquote><p>下面程序是否有错误？如果有，请改正：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span> list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lst<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span>lst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lst<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill_n</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 应该加一条语句 <code>vec.resize(lst.size())</code> 。<code>copy</code>时必须保证目标目的序列至少要包含与输入序列一样多的元素。</li><li>(b) reserve分配了足够的空间，但是不会创建新元素。算法可能改变容器中保存的元素的值，也可能在容器内移动元素，永远不会直接添加和删除元素(c++ priemr中文版第五版 P338)，所以此处应该改为resize(10)。</li></ul><h2 id="练习10-8"><a href="#练习10-8" class="headerlink" title="练习10.8"></a>练习10.8</h2><blockquote><p>本节提到过，标准库算法不会改变它们所操作的容器的大小。为什么使用 <code>back_inserter</code>不会使这一断言失效？</p></blockquote><p><code>back_inserter</code> 是插入迭代器，在 <code>iterator.h</code> 头文件中，不是标准库的算法。</p><h2 id="练习10-9"><a href="#练习10-9" class="headerlink" title="练习10.9"></a>练习10.9</h2><blockquote><p>实现你自己的<code>elimDups</code>。分别在读取输入后、调用<code>unique</code>后以及调用<code>erase</code>后打印<code>vector</code>的内容。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment">// print containers like vector, deque, list, etc.</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Sequence</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">println</span><span class="token punctuation">(</span>Sequence <span class="token keyword">const</span><span class="token operator">&amp;</span> seq<span class="token punctuation">)</span> <span class="token operator">-></span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> elem <span class="token operator">:</span> seq<span class="token punctuation">)</span>         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> elem <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">auto</span> <span class="token function">eliminate_duplicates</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">)</span> <span class="token operator">-></span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> new_end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span>    vs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>new_end<span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> vs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> vs<span class="token punctuation">&#123;</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">eliminate_duplicates</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-10"><a href="#练习10-10" class="headerlink" title="练习10.10"></a>练习10.10</h2><blockquote><p>你认为算法不改变容器大小的原因是什么？</p></blockquote><p>解：</p><ul><li>将算法和容器的成员函数区分开。</li><li>算法的参数是迭代器，不是容器本身。</li></ul><h2 id="练习10-11"><a href="#练习10-11" class="headerlink" title="练习10.11"></a>练习10.11</h2><blockquote><p>编写程序，使用 <code>stable_sort</code> 和 <code>isShorter</code> 将传递给你的 <code>elimDups</code> 版本的 <code>vector</code> 排序。打印 <code>vector</code>的内容，验证你的程序的正确性。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token comment">// print a container like vector, deque, list, etc.</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Sequence</span><span class="token operator">></span><span class="token keyword">inline</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">println</span><span class="token punctuation">(</span>Sequence <span class="token keyword">const</span><span class="token operator">&amp;</span> seq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> elem <span class="token operator">:</span> seq<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> elem <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span><span class="token function">is_shorter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  lhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">elimdups</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> new_end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>new_end<span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span>        <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"Hi"</span><span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"wang"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">elimdups</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">stable_sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> is_shorter<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex10.11 :\n"</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-12"><a href="#练习10-12" class="headerlink" title="练习10.12"></a>练习10.12</h2><blockquote><p>编写名为 <code>compareIsbn</code> 的函数，比较两个 <code>Sales_data</code> 对象的<code>isbn()</code> 成员。使用这个函数排序一个保存 <code>Sales_data</code> 对象的 <code>vector</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../ch07/ex7_26.h"</span>     <span class="token comment">// Sales_data class.</span></span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">compareIsbn</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>sd1<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>sd2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> sd1<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> sd2<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data <span class="token function">d1</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d2</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d3</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d4</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d5</span><span class="token punctuation">(</span><span class="token string">"aaaaz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span> v<span class="token punctuation">&#123;</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// @note   the elements the iterators pointing to</span>    <span class="token comment">//         must match the parameters of the predicate.</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compareIsbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>element <span class="token operator">:</span> v<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-13"><a href="#练习10-13" class="headerlink" title="练习10.13"></a>练习10.13</h2><blockquote><p>标准库定义了名为 <code>partition</code> 的算法，它接受一个谓词，对容器内容进行划分，使得谓词为<code>true</code> 的值会排在容器的前半部分，而使得谓词为 <code>false</code> 的值会排在后半部分。算法返回一个迭代器，指向最后一个使谓词为 <code>true</code> 的元素之后的位置。编写函数，接受一个 <code>string</code>，返回一个 <code>bool</code> 值，指出 <code>string</code> 是否有5个或更多字符。使用此函数划分 <code>words</code>。打印出长度大于等于5的元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">bool</span> <span class="token function">predicate</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> v <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"as"</span><span class="token punctuation">,</span> <span class="token string">"aasss"</span><span class="token punctuation">,</span> <span class="token string">"aaaaassaa"</span><span class="token punctuation">,</span> <span class="token string">"aaaaaabba"</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> pivot <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">partition</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> pivot<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-14"><a href="#练习10-14" class="headerlink" title="练习10.14"></a>练习10.14</h2><blockquote><p>编写一个<code>lambda</code>，接受两个<code>int</code>，返回它们的和。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习10-15"><a href="#练习10-15" class="headerlink" title="练习10.15"></a>练习10.15</h2><blockquote><p>编写一个 <code>lambda</code> ，捕获它所在函数的 <code>int</code>，并接受一个 <code>int</code>参数。<code>lambda</code> 应该返回捕获的 <code>int</code> 和 <code>int</code> 参数的和。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token operator">+</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习10-16"><a href="#练习10-16" class="headerlink" title="练习10.16"></a>练习10.16</h2><blockquote><p>使用 <code>lambda</code> 编写你自己版本的 <code>biggies</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment">// from ex 10.9</span><span class="token keyword">void</span> <span class="token function">elimdups</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> new_end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>new_end<span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">biggies</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span>    <span class="token function">elimdups</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sort by size, but maintain alphabetical order for same size.</span>    std<span class="token double-colon punctuation">::</span><span class="token function">stable_sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// get an iterator to the first one whose size() is >= sz</span>    <span class="token keyword">auto</span> wc <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// print the biggies</span>    std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>wc<span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ex10.16</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v    <span class="token punctuation">&#123;</span>        <span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token string">"hi~"</span><span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"cp"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex10.16: "</span><span class="token punctuation">;</span>    <span class="token function">biggies</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-17"><a href="#练习10-17" class="headerlink" title="练习10.17"></a>练习10.17</h2><blockquote><p>重写10.3.1节练习10.12的程序，在对<code>sort</code>的调用中使用 <code>lambda</code> 来代替函数 <code>compareIsbn</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../ch07/ex7_26.h"</span>     <span class="token comment">// Sales_data class.</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data <span class="token function">d1</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d2</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d3</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d4</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d5</span><span class="token punctuation">(</span><span class="token string">"aaaaz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span> v<span class="token punctuation">&#123;</span> d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4<span class="token punctuation">,</span> d5 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>sd1<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>sd2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sd1<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> sd2<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>element <span class="token operator">:</span> v<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-18"><a href="#练习10-18" class="headerlink" title="练习10.18"></a>练习10.18</h2><blockquote><p>重写 <code>biggies</code>，用 <code>partition</code> 代替 <code>find_if</code>。我们在10.3.1节练习10.13中介绍了 <code>partition</code> 算法。</p></blockquote><p>解：</p><p>见下题</p><h2 id="练习10-19"><a href="#练习10-19" class="headerlink" title="练习10.19"></a>练习10.19</h2><blockquote><p>用 <code>stable_partition</code> 重写前一题的程序，与 <code>stable_sort</code> 类似，在划分后的序列中维持原有元素的顺序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment">// from ex 10.9</span><span class="token keyword">void</span> <span class="token function">elimdups</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> new_end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">unique</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>new_end<span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ex10.18</span><span class="token keyword">void</span> <span class="token function">biggies_partition</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">elimdups</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> pivot <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sz<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vs<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> pivot<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ex10.19</span><span class="token keyword">void</span> <span class="token function">biggies_stable_partition</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">elimdups</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> pivot <span class="token operator">=</span> <span class="token function">stable_partition</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vs<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> pivot<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ex10.18</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span>        <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">,</span> <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"turtle"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex10.18: "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v1</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">biggies_partition</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// ex10.19</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex10.19: "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">biggies_stable_partition</span><span class="token punctuation">(</span>v2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-20"><a href="#练习10-20" class="headerlink" title="练习10.20"></a>练习10.20</h2><blockquote><p>标准库定义了一个名为 <code>count_if</code> 的算法。类似 <code>find_if</code>，此函数接受一对迭代器，表示一个输入范围，还接受一个谓词，会对输入范围中每个元素执行。<code>count_if</code>返回一个计数值，表示谓词有多少次为真。使用<code>count_if</code>重写我们程序中统计有多少单词长度超过6的部分。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>count_if<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token comment">// Exercise 10.20</span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">bigerThan6</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">count_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ex10.20</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span>        <span class="token string">"alan"</span><span class="token punctuation">,</span><span class="token string">"moophy"</span><span class="token punctuation">,</span><span class="token string">"1234567"</span><span class="token punctuation">,</span><span class="token string">"1234567"</span><span class="token punctuation">,</span><span class="token string">"1234567"</span><span class="token punctuation">,</span><span class="token string">"1234567"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex10.20: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">bigerThan6</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">// ex10.21</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> check_and_decrement <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">!</span><span class="token operator">--</span>i <span class="token operator">:</span> <span class="token operator">!</span>i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ex10.21: "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_and_decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-21"><a href="#练习10-21" class="headerlink" title="练习10.21"></a>练习10.21</h2><blockquote><p>编写一个 <code>lambda</code>，捕获一个局部 <code>int</code> 变量，并递减变量值，直至它变为0。一旦变量变为0，再调用<code>lambda</code>应该不再递减变量。<code>lambda</code>应该返回一个<code>bool</code>值，指出捕获的变量是否为0。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习10-22"><a href="#练习10-22" class="headerlink" title="练习10.22"></a>练习10.22</h2><blockquote><p>重写统计长度小于等于6的单词数量的程序，使用函数代替<code>lambda</code>。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isLesserThanOrEqualTo6</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> string<span class="token double-colon punctuation">::</span>size_type sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> sz<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> authors<span class="token punctuation">&#123;</span> <span class="token string">"Mooophy"</span><span class="token punctuation">,</span> <span class="token string">"pezy"</span><span class="token punctuation">,</span> <span class="token string">"Queequeg90"</span><span class="token punctuation">,</span> <span class="token string">"shbling"</span><span class="token punctuation">,</span> <span class="token string">"evan617"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">count_if</span><span class="token punctuation">(</span>authors<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authors<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind</span><span class="token punctuation">(</span>isLesserThanOrEqualTo6<span class="token punctuation">,</span> _1<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-23"><a href="#练习10-23" class="headerlink" title="练习10.23"></a>练习10.23</h2><blockquote><p><code>bind</code> 接受几个参数？</p></blockquote><p>假设被绑定的函数接受 <code>n</code> 个参数，那么<code>bind</code> 接受<code>n + 1</code>个参数。</p><h2 id="练习10-24"><a href="#练习10-24" class="headerlink" title="练习10.24"></a>练习10.24</h2><blockquote><p>给定一个<code>string</code>，使用 <code>bind</code> 和 <code>check_size</code> 在一个 <code>int</code> 的<code>vector</code> 中查找第一个大于<code>string</code>长度的值。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>find_if<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>bind<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token function">check_size</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> str<span class="token punctuation">,</span> size_t sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    string <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> result <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind</span><span class="token punctuation">(</span>check_size<span class="token punctuation">,</span> str<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token double-colon punctuation">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>result <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not found"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-25"><a href="#练习10-25" class="headerlink" title="练习10.25"></a>练习10.25</h2><blockquote><p>在10.3.2节的练习中，编写了一个使用<code>partition</code> 的<code>biggies</code>版本。使用 <code>check_size</code> 和 <code>bind</code> 重写此函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>placeholders<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">elimdups</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>vs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>vs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">check_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> string<span class="token double-colon punctuation">::</span>size_type sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sz<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">biggies</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">elimdups</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">stable_partition</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind</span><span class="token punctuation">(</span>check_size<span class="token punctuation">,</span> _1<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> iter<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">&#123;</span>        <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">,</span> <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"turtle"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">biggies</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-26"><a href="#练习10-26" class="headerlink" title="练习10.26"></a>练习10.26</h2><blockquote><p>解释三种插入迭代器的不同之处。</p></blockquote><p>解：</p><ul><li><code>back_inserter</code> 使用 <code>push_back</code> 。</li><li><code>front_inserter</code> 使用 <code>push_front</code> 。</li><li><code>inserter</code> 使用 <code>insert</code>，此函数接受第二个参数，这个参数必须是一个指向给定容器的迭代器。元素将被插入到给定迭代器所表示的元素之前。</li></ul><h2 id="练习10-27"><a href="#练习10-27" class="headerlink" title="练习10.27"></a>练习10.27</h2><blockquote><p>除了 <code>unique</code> 之外，标准库还定义了名为 <code>unique_copy</code> 的函数，它接受第三个迭代器，表示拷贝不重复元素的目的位置。编写一个程序，使用 <code>unique_copy</code>将一个<code>vector</code>中不重复的元素拷贝到一个初始化为空的<code>list</code>中。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lst<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">unique_copy</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> lst<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-28"><a href="#练习10-28" class="headerlink" title="练习10.28"></a>练习10.28</h2><blockquote><p>一个<code>vector</code> 中保存 1 到 9，将其拷贝到三个其他容器中。分别使用<code>inserter</code>、<code>back_inserter</code> 和 <code>front_inserter</code> 将元素添加到三个容器中。对每种 <code>inserter</code>，估计输出序列是怎样的，运行程序验证你的估计是否正确。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>list<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>copy<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Sequence</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Sequence <span class="token keyword">const</span><span class="token operator">&amp;</span> seq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> seq<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// uses inserter</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lst1<span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inserter</span><span class="token punctuation">(</span>lst1<span class="token punctuation">,</span> lst1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>lst1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// uses back_inserter</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lit2<span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>lit2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>lit2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// uses front_inserter</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lst3<span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">front_inserter</span><span class="token punctuation">(</span>lst3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>lst3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前两种为正序，第三种为逆序，输出和预计一样。</p><h2 id="练习10-29"><a href="#练习10-29" class="headerlink" title="练习10.29"></a>练习10.29</h2><blockquote><p>编写程序，使用流迭代器读取一个文本文件，存入一个<code>vector</code>中的<code>string</code>里。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"../data/book.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>istream_iterator<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">in</span><span class="token punctuation">(</span>ifs<span class="token punctuation">)</span><span class="token punctuation">,</span> eof<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vec<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> eof<span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// output</span>    std<span class="token double-colon punctuation">::</span><span class="token function">copy</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">ostream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-30"><a href="#练习10-30" class="headerlink" title="练习10.30"></a>练习10.30</h2><blockquote><p>使用流迭代器、<code>sort</code> 和 <code>copy</code> 从标准输入读取一个整数序列，将其排序，并将结果写到标准输出。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">int_it</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">,</span> int_eof<span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>int_it<span class="token punctuation">,</span> int_eof<span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">ostream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-31"><a href="#练习10-31" class="headerlink" title="练习10.31"></a>练习10.31</h2><blockquote><p>修改前一题的程序，使其只打印不重复的元素。你的程序应该使用 <code>unique_copy</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">int_it</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">,</span> int_eof<span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>int_it<span class="token punctuation">,</span> int_eof<span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unique</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">ostream_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-32"><a href="#练习10-32" class="headerlink" title="练习10.32"></a>练习10.32</h2><blockquote><p>重写1.6节中的书店程序，使用一个<code>vector</code>保存交易记录，使用不同算法完成处理。使用 <code>sort</code> 和10.3.1节中的 <code>compareIsbn</code> 函数来排序交易记录，然后使用 <code>find</code> 和 <code>accumulate</code> 求和。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"../include/Sales_item.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>istream_iterator<span class="token operator">&lt;</span>Sales_item<span class="token operator">></span> <span class="token function">in_iter</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">,</span> in_eof<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_item<span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in_iter <span class="token operator">!=</span> in_eof<span class="token punctuation">)</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>in_iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compareIsbn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> beg <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end <span class="token operator">=</span> beg<span class="token punctuation">;</span> beg <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> beg <span class="token operator">=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        end <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>beg<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_item <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> beg<span class="token operator">-></span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token function">Sales_item</span><span class="token punctuation">(</span>beg<span class="token operator">-></span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-33"><a href="#练习10-33" class="headerlink" title="练习10.33"></a>练习10.33</h2><blockquote><p>编写程序，接受三个参数：一个输入文件和两个输出文件的文件名。输入文件保存的应该是整数。使用 <code>istream_iterator</code> 读取输入文件。使用 <code>ostream_iterator</code> 将奇数写入第一个输入文件，每个值后面都跟一个空格。将偶数写入第二个输出文件，每个值都独占一行。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">ofs_odd</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ofs_even</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">in</span><span class="token punctuation">(</span>ifs<span class="token punctuation">)</span><span class="token punctuation">,</span> in_eof<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">out_odd</span><span class="token punctuation">(</span>ofs_odd<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">out_even</span><span class="token punctuation">(</span>ofs_even<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> in_eof<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>out_odd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>out_even<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">?</span> out_odd <span class="token operator">:</span> out_even<span class="token punctuation">)</span><span class="token operator">++</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-34"><a href="#练习10-34" class="headerlink" title="练习10.34"></a>练习10.34</h2><blockquote><p>使用 <code>reverse_iterator</code> 逆序打印一个<code>vector</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">crbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">crend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-35"><a href="#练习10-35" class="headerlink" title="练习10.35"></a>练习10.35</h2><blockquote><p>使用普通迭代器逆序打印一个<code>vector</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">prev</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">--</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-36"><a href="#练习10-36" class="headerlink" title="练习10.36"></a>练习10.36</h2><blockquote><p>使用 <code>find</code> 在一个 <code>int</code> 的<code>list</code> 中查找最后一个值为0的元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">crbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">crend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">distance</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">crend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-37"><a href="#练习10-37" class="headerlink" title="练习10.37"></a>练习10.37</h2><blockquote><p>给定一个包含10 个元素的<code>vector</code>，将位置3到7之间的元素按逆序拷贝到一个<code>list</code>中。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l<span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">crbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">crbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> l<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习10-38"><a href="#练习10-38" class="headerlink" title="练习10.38"></a>练习10.38</h2><blockquote><p>列出5个迭代器类别，以及每类迭代器所支持的操作。</p></blockquote><ul><li>输入迭代器 : <code>==</code>,<code>!=</code>,<code>++</code>,<code>*</code>,<code>-&gt;</code></li><li>输出迭代器 : <code>++</code>,<code>*</code></li><li>前向迭代器 : <code>==</code>,<code>!=</code>,<code>++</code>,<code>*</code>,<code>-&gt;</code></li><li>双向迭代器 : <code>==</code>,<code>!=</code>,<code>++</code>,<code>--</code>,<code>*</code>,<code>-&gt;</code></li><li>随机访问迭代器 : <code>==</code>,<code>!=</code>,<code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>,<code>&gt;=</code>,<code>++</code>,<code>--</code>,<code>+</code>,<code>+=</code>,<code>-</code>,<code>-=</code>,<code>*</code>,<code>-&gt;</code>,<code>iter[n]</code>==<code>*(iter[n])</code></li></ul><h2 id="练习10-39"><a href="#练习10-39" class="headerlink" title="练习10.39"></a>练习10.39</h2><blockquote><p><code>list</code> 上的迭代器属于哪类？<code>vector</code>呢？</p></blockquote><ul><li><code>list</code> 上的迭代器是 <strong>双向迭代器</strong></li><li><code>vector</code> 上的迭代器是 <strong>随机访问迭代器</strong></li></ul><h2 id="练习10-40"><a href="#练习10-40" class="headerlink" title="练习10.40"></a>练习10.40</h2><blockquote><p>你认为 <code>copy</code> 要求哪类迭代器？<code>reverse</code> 和 <code>unique</code> 呢？</p></blockquote><ul><li><code>copy</code> 需要两个<strong>输入迭代器</strong>，一个<strong>输出迭代器</strong></li><li><code>reverse</code> 需要<strong>双向迭代器</strong></li><li><code>unique</code>需要<strong>随机访问迭代器</strong></li></ul><h2 id="练习10-41"><a href="#练习10-41" class="headerlink" title="练习10.41"></a>练习10.41</h2><blockquote><p>仅根据算法和参数的名字，描述下面每个标准库算法执行什么操作：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">replace</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> old_val<span class="token punctuation">,</span> new_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">replace_if</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> new_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">replace_copy</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> old_val<span class="token punctuation">,</span> new_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">replace_copy_if</span><span class="token punctuation">(</span>beg<span class="token punctuation">,</span> end<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> new_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li><code>replace</code> 在迭代器范围内用新值替换所有原来的旧值。</li><li><code>replace_if</code> 在迭代器范围内，满足谓词条件的元素用新值替换。</li><li><code>replace_copy</code> 复制迭代器范围内的元素到目标迭代器位置，如果元素等于某个旧值，则用新值替换</li><li><code>replace_copy_if</code> 复制迭代器范围内的元素到目标迭代器位置，满足谓词条件的元素用新值替换</li></ul><h2 id="练习10-42"><a href="#练习10-42" class="headerlink" title="练习10.42"></a>练习10.42</h2><blockquote><p>使用 <code>list</code> 代替 <code>vector</code> 重新实现10.2.3节中的去除重复单词的程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>list<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">elimDups</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>words<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>words<span class="token punctuation">.</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span>string<span class="token operator">></span> l <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"aasss"</span><span class="token punctuation">,</span> <span class="token string">"aa"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">elimDups</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> e <span class="token operator">:</span> l<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案11</title>
      <link href="2021/04/10/excersize/ch11/"/>
      <url>2021/04/10/excersize/ch11/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章-关联容器"><a href="#第十一章-关联容器" class="headerlink" title="第十一章 关联容器"></a>第十一章 关联容器</h1><h2 id="练习11-1"><a href="#练习11-1" class="headerlink" title="练习11.1"></a>练习11.1</h2><blockquote><p>描述<code>map</code>和<code>vector</code>的不同。</p></blockquote><p>解：</p><p><code>map</code> 是关联容器， <code>vector</code> 是顺序容器。</p><h2 id="练习11-2"><a href="#练习11-2" class="headerlink" title="练习11.2"></a>练习11.2</h2><blockquote><p>分别给出最适合使用<code>list</code>、<code>vector</code>、<code>deque</code>、<code>map</code>以及<code>set</code>的例子。</p></blockquote><p>解：</p><ul><li><code>list</code>：双向链表，适合频繁插入删除元素的场景。</li><li><code>vector</code>：适合频繁访问元素的场景。</li><li><code>deque</code>：双端队列，适合频繁在头尾插入删除元素的场景。</li><li><code>map</code>：字典。</li><li><code>set</code>：适合有序不重复的元素的场景。</li></ul><h2 id="练习11-3"><a href="#练习11-3" class="headerlink" title="练习11.3"></a>练习11.3</h2><blockquote><p>编写你自己的单词计数程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> word_count<span class="token punctuation">;</span>    string tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        word_count<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> elem <span class="token operator">:</span> word_count<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> elem<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" : "</span> <span class="token operator">&lt;&lt;</span> elem<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-4"><a href="#练习11-4" class="headerlink" title="练习11.4"></a>练习11.4</h2><blockquote><p>扩展你的程序，忽略大小写和标点。例如，”example.”、”example,”和”Example”应该递增相同的计数器。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token keyword">void</span> <span class="token function">word_count_pro</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string word<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span> ch <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>word<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">remove_if</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ispunct<span class="token punctuation">)</span><span class="token punctuation">,</span>word<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>m<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> e <span class="token operator">:</span> m<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" : "</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token function">word_count_pro</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-5"><a href="#练习11-5" class="headerlink" title="练习11.5"></a>练习11.5</h2><blockquote><p>解释<code>map</code>和<code>set</code>的区别。你如何选择使用哪个？</p></blockquote><p>解：</p><p><code>map</code> 是键值对，而 <code>set</code> 只有键没有值。当我需要存储键值对的时候使用 <code>map</code>，而只需要键的时候使用 <code>set</code>。</p><h2 id="练习11-6"><a href="#练习11-6" class="headerlink" title="练习11.6"></a>练习11.6</h2><blockquote><p>解释<code>set</code>和<code>list</code>的区别。你如何选择使用哪个？</p></blockquote><p><code>set</code> 是有序不重复集合，底层实现是红黑树，而 <code>list</code> 是无序可重复集合，底层实现是链表。</p><h2 id="练习11-7"><a href="#练习11-7" class="headerlink" title="练习11.7"></a>练习11.7</h2><blockquote><p>定义一个<code>map</code>，关键字是家庭的姓，值是一个<code>vector</code>，保存家中孩子（们）的名。编写代码，实现添加新的家庭以及向已有家庭中添加新的孩子。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>string ln<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Last name:\n"</span><span class="token punctuation">,</span> cin <span class="token operator">>></span> ln <span class="token operator">&amp;&amp;</span> ln <span class="token operator">!=</span> <span class="token string">"@q"</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>string cn<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"|-Children's names:\n"</span><span class="token punctuation">,</span> cin <span class="token operator">>></span> cn <span class="token operator">&amp;&amp;</span> cn <span class="token operator">!=</span> <span class="token string">"@q"</span><span class="token punctuation">;</span><span class="token punctuation">)</span>m<span class="token punctuation">[</span>ln<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-8"><a href="#练习11-8" class="headerlink" title="练习11.8"></a>练习11.8</h2><blockquote><p>编写一个程序，在一个<code>vector</code>而不是一个<code>set</code>中保存不重复的单词。使用<code>set</code>的优点是什么？</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> exclude <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">,</span> <span class="token string">"ee"</span><span class="token punctuation">,</span> <span class="token string">"ff"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string word<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter plz:\n"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> word<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> is_excluded <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">binary_search</span><span class="token punctuation">(</span>exclude<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exclude<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> reply <span class="token operator">=</span> is_excluded <span class="token operator">?</span> <span class="token string">"excluded"</span> <span class="token operator">:</span> <span class="token string">"not excluded"</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> reply <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>set</code>的优点是集合本身的元素就是不重复。</p><h2 id="练习11-9"><a href="#练习11-9" class="headerlink" title="练习11.9"></a>练习11.9</h2><blockquote><p>定义一个<code>map</code>，将单词与一个行号的<code>list</code>关联，<code>list</code>中保存的是单词所出现的行号。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">>></span> m<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习11-10"><a href="#练习11-10" class="headerlink" title="练习11.10"></a>练习11.10</h2><blockquote><p>可以定义一个<code>vector&lt;int&gt;::iterator</code> 到 <code>int</code> 的<code>map</code>吗？<code>list&lt;int&gt;::iterator</code> 到 <code>int</code> 的<code>map</code>呢？对于两种情况，如果不能，解释为什么。</p></blockquote><p>解：</p><p>可以定义 <code>vector&lt;int&gt;::iterator</code> 到 <code>int</code> 的<code>map</code>，但是不能定义 <code>list&lt;int&gt;::iterator</code> 到 <code>int</code> 的<code>map</code>。因为<code>map</code>的键必须实现 <code>&lt;</code> 操作，<code>list</code> 的迭代器不支持比较运算。</p><h2 id="练习11-11"><a href="#练习11-11" class="headerlink" title="练习11.11"></a>练习11.11</h2><blockquote><p>不使用<code>decltype</code> 重新定义 <code>bookstore</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> Less <span class="token operator">=</span> <span class="token keyword">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Sales_data <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>Sales_data<span class="token punctuation">,</span> Less<span class="token operator">></span> <span class="token function">bookstore</span><span class="token punctuation">(</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习11-12"><a href="#练习11-12" class="headerlink" title="练习11.12"></a>练习11.12</h2><blockquote><p>编写程序，读入<code>string</code>和<code>int</code>的序列，将每个<code>string</code>和<code>int</code>存入一个<code>pair</code> 中，<code>pair</code>保存在一个<code>vector</code>中。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> vec<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> str <span class="token operator">>></span> i<span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>p <span class="token operator">:</span> vec<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-13"><a href="#练习11-13" class="headerlink" title="练习11.13"></a>练习11.13</h2><blockquote><p>在上一题的程序中，至少有三种创建<code>pair</code>的方法。编写此程序的三个版本，分别采用不同的方法创建<code>pair</code>。解释你认为哪种形式最易于编写和理解，为什么？</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> str<span class="token punctuation">,</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用花括号的初始化器最易于理解和编写。</p><h2 id="练习11-14"><a href="#练习11-14" class="headerlink" title="练习11.14"></a>练习11.14</h2><blockquote><p>扩展你在11.2.1节练习中编写的孩子姓达到名的<code>map</code>，添加一个<code>pair</code>的<code>vector</code>，保存孩子的名和生日。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>make_pair<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>pair<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>map<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Families</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">using</span> Child <span class="token operator">=</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">using</span> Children <span class="token operator">=</span> vector<span class="token operator">&lt;</span>Child<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">using</span> Data <span class="token operator">=</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Children<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> last_name<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> first_name<span class="token punctuation">,</span> string birthday<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> child <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>_data<span class="token punctuation">[</span>last_name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> pair <span class="token operator">:</span> _data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> child <span class="token operator">:</span> pair<span class="token punctuation">.</span>second<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> child<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> child<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>Data _data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Families families<span class="token punctuation">;</span><span class="token keyword">auto</span> msg <span class="token operator">=</span> <span class="token string">"Please enter last name, first name and birthday:\n"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>string l<span class="token punctuation">,</span> f<span class="token punctuation">,</span> b<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> msg<span class="token punctuation">,</span> cin <span class="token operator">>></span> l <span class="token operator">>></span> f <span class="token operator">>></span> b<span class="token punctuation">;</span> families<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> f<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>families<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-15"><a href="#练习11-15" class="headerlink" title="练习11.15"></a>练习11.15</h2><blockquote><p>对一个<code>int</code>到<code>vector&lt;int&gt;的map</code>，其<code>mapped_type</code>、<code>key_type</code>和 <code>value_type</code>分别是什么？</p></blockquote><p>解：</p><ul><li><code>mapped_type</code> : <code>vector&lt;int&gt;</code></li><li><code>key_type</code> : <code>int</code></li><li><code>value_type</code> : <code>std::pair&lt;const int,vector &gt;</code></li></ul><h2 id="练习11-16"><a href="#练习11-16" class="headerlink" title="练习11.16"></a>练习11.16</h2><blockquote><p>使用一个<code>map</code>迭代器编写一个表达式，将一个值赋予一个元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">-></span>second <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习11-17"><a href="#练习11-17" class="headerlink" title="练习11.17"></a>练习11.17</h2><blockquote><p>假定<code>c</code>是一个<code>string</code>的<code>multiset</code>，<code>v</code> 是一个<code>string</code> 的<code>vector</code>，解释下面的调用。指出每个调用是否合法：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inserter</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">inserter</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">back_inserter</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>第二个调用不合法，因为 <code>multiset</code> 没有 <code>push_back</code> 方法。其他调用都合法。</p><h2 id="练习11-18"><a href="#练习11-18" class="headerlink" title="练习11.18"></a>练习11.18</h2><blockquote><p>写出第382页循环中<code>map_it</code> 的类型，不要使用<code>auto</code> 或 <code>decltype</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> size_t<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator map_it <span class="token operator">=</span> word_count<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习11-19"><a href="#练习11-19" class="headerlink" title="练习11.19"></a>练习11.19</h2><blockquote><p>定义一个变量，通过对11.2.2节中的名为 <code>bookstore</code> 的<code>multiset</code> 调用<code>begin()</code>来初始化这个变量。写出变量的类型，不要使用<code>auto</code> 或 <code>decltype</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> compareType <span class="token operator">=</span> <span class="token keyword">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>Sales_data<span class="token punctuation">,</span> compareType<span class="token operator">></span> <span class="token function">bookstore</span><span class="token punctuation">(</span>compareIsbn<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>Sales_data<span class="token punctuation">,</span> compareType<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator c_it <span class="token operator">=</span> bookstore<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习11-20"><a href="#练习11-20" class="headerlink" title="练习11.20"></a>练习11.20</h2><blockquote><p>重写11.1节练习的单词计数程序，使用<code>insert</code>代替下标操作。你认为哪个程序更容易编写和阅读？解释原因。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>map<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> size_t<span class="token operator">></span> counts<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>string word<span class="token punctuation">;</span> cin <span class="token operator">>></span> word<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> result <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> word<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token operator">++</span>result<span class="token punctuation">.</span>first<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> count <span class="token operator">:</span> counts<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> count<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> count<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>second <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">" times\n"</span> <span class="token operator">:</span> <span class="token string">" time\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>insert</code>更容易阅读和编写。<code>insert</code>有返回值，可以明确的体现出插入操作的结果。</p><h2 id="练习11-21"><a href="#练习11-21" class="headerlink" title="练习11.21"></a>练习11.21</h2><blockquote><p>假定<code>word_count</code>是一个<code>string</code>到<code>size_t</code>的<code>map</code>，<code>word</code>是一个<code>string</code>，解释下面循环的作用：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> word<span class="token punctuation">)</span><span class="token operator">++</span>word_count<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token operator">-></span>second<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>这条语句等价于：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> result <span class="token operator">=</span> word_count<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>first<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若<code>insert</code>成功：先添加一个元素，然后返回一个 <code>pair</code>，<code>pair</code> 的 <code>first</code>元素是一个迭代器。这个迭代器指向刚刚添加的元素，这个元素是<code>pair</code>，然后递增<code>pair</code>的<code>second</code>成员。<br>若<code>insert</code>失败：递增已有指定关键字的元素的 <code>second</code>成员。</p><h2 id="练习11-22"><a href="#练习11-22" class="headerlink" title="练习11.22"></a>练习11.22</h2><blockquote><p>给定一个<code>map&lt;string, vector&lt;int&gt;&gt;</code>，对此容器的插入一个元素的<code>insert</code>版本，写出其参数类型和返回类型。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>    <span class="token comment">// 参数类型</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> <span class="token comment">// 返回类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习11-23"><a href="#练习11-23" class="headerlink" title="练习11.23"></a>练习11.23</h2><blockquote><p>11.2.1节练习中的<code>map</code> 以孩子的姓为关键字，保存他们的名的<code>vector</code>，用<code>multimap</code> 重写此<code>map</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>multimap<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    multimap<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> families<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string lname<span class="token punctuation">,</span> cname<span class="token punctuation">;</span> cin <span class="token operator">>></span> cname <span class="token operator">>></span> lname<span class="token punctuation">;</span> families<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>lname<span class="token punctuation">,</span> cname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> family <span class="token operator">:</span> families<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> family<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> family<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-24"><a href="#练习11-24" class="headerlink" title="练习11.24"></a>练习11.24</h2><blockquote><p>下面的程序完成什么功能？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>添加一个元素到<code>map</code>中，如果该键存在，则重新赋值。</p><h2 id="练习11-25"><a href="#练习11-25" class="headerlink" title="练习11.25"></a>练习11.25</h2><blockquote><p>对比下面的程序与上一题程序</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>未定义行为，<code>vector</code> 的下标越界访问。</p><h2 id="练习11-26"><a href="#练习11-26" class="headerlink" title="练习11.26"></a>练习11.26</h2><blockquote><p>可以用什么类型来对一个<code>map</code>进行下标操作？下标运算符返回的类型是什么？请给出一个具体例子——即，定义一个<code>map</code>，然后写出一个可以用来对<code>map</code>进行下标操作的类型以及下标运算符将会返会的类型。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ss"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"sz"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">using</span> KeyType <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>key_type<span class="token punctuation">;</span><span class="token keyword">using</span> ReturnType <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>mapped_type<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习11-27"><a href="#练习11-27" class="headerlink" title="练习11.27"></a>练习11.27</h2><blockquote><p>对于什么问题你会使用<code>count</code>来解决？什么时候你又会选择<code>find</code>呢？</p></blockquote><p>解：</p><p>对于允许重复关键字的容器，应该用 <code>count</code> ; 对于不允许重复关键字的容器，应该用 <code>find</code> 。</p><h2 id="练习11-28"><a href="#练习11-28" class="headerlink" title="练习11.28"></a>练习11.28</h2><blockquote><p>对一个<code>string</code>到<code>int</code>的<code>vector</code>的<code>map</code>，定义并初始化一个变量来保存在其上调用<code>find</code>所返回的结果。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> m<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习11-29"><a href="#练习11-29" class="headerlink" title="练习11.29"></a>练习11.29</h2><blockquote><p>如果给定的关键字不在容器中，<code>upper_bound</code>、<code>lower_bound</code> 和 <code>equal_range</code> 分别会返回什么？</p></blockquote><p>解：</p><p>如果给定的关键字不在容器中，则 <code>lower_bound</code>和 <code>upper_bound</code> 会返回相等的迭代器，指向一个不影响排序的关键字插入位置。而<code>equal_range</code> 会返回一个 <code>pair</code>，<code>pair</code> 中的两个迭代器都指向关键字可以插入的位置。</p><h2 id="练习11-30"><a href="#练习11-30" class="headerlink" title="练习11.30"></a>练习11.30</h2><blockquote><p>对于本节最后一个程序中的输出表达式，解释运算对象<code>pos.first-&gt;second</code>的含义。</p></blockquote><p>解：</p><p><code>pos</code> 是一个<code>pair</code>，<code>pos.first</code> 是一个迭代器，指向匹配关键字的元素，该元素是一个 <code>pair</code>，访问该元素的第二个成员。</p><h2 id="练习11-31"><a href="#练习11-31" class="headerlink" title="练习11.31"></a>练习11.31</h2><blockquote><p>编写程序，定义一个作者及其作品的<code>multimap</code>。使用<code>find</code>在<code>multimap</code>中查找一个元素并用<code>erase</code>删除它。确保你的程序在元素不在<code>map</code> 中时也能正常运行。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> authors<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"DMA"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"pezy"</span><span class="token punctuation">,</span> <span class="token string">"LeetCode"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"CLRS"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token string">"FTP"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"pezy"</span><span class="token punctuation">,</span> <span class="token string">"CP5"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token string">"CPP-Concurrency"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string author <span class="token operator">=</span> <span class="token string">"pezy"</span><span class="token punctuation">;</span>string work <span class="token operator">=</span> <span class="token string">"CP5"</span><span class="token punctuation">;</span><span class="token keyword">auto</span> found <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> count <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token operator">-></span>second <span class="token operator">==</span> work<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>authors<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">++</span>found<span class="token punctuation">;</span><span class="token operator">--</span>count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>author <span class="token operator">:</span> authors<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> author<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> author<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-32"><a href="#练习11-32" class="headerlink" title="练习11.32"></a>练习11.32</h2><blockquote><p>使用上一题定义的<code>multimap</code>编写一个程序，按字典序打印作者列表和他们的作品。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>multimap<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> authors<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"DMA"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"pezy"</span><span class="token punctuation">,</span> <span class="token string">"LeetCode"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"CLRS"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token string">"FTP"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"pezy"</span><span class="token punctuation">,</span> <span class="token string">"CP5"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> <span class="token string">"CPP-Concurrency"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>string<span class="token operator">>></span> order_authors<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>author <span class="token operator">:</span> authors<span class="token punctuation">)</span>order_authors<span class="token punctuation">[</span>author<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>author <span class="token operator">:</span> order_authors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> author<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>work <span class="token operator">:</span> author<span class="token punctuation">.</span>second<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> work <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-33"><a href="#练习11-33" class="headerlink" title="练习11.33"></a>练习11.33</h2><blockquote><p>实现你自己版本的单词转换程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token function">buildMap</span><span class="token punctuation">(</span>ifstream <span class="token operator">&amp;</span>map_file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> trans_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string key<span class="token punctuation">,</span> value<span class="token punctuation">;</span> map_file <span class="token operator">>></span> key <span class="token operator">&amp;&amp;</span> <span class="token function">getline</span><span class="token punctuation">(</span>map_file<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> trans_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> trans_map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> map_it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map_it <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s <span class="token operator">:</span> map_it<span class="token operator">-></span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">word_transform</span><span class="token punctuation">(</span>ifstream <span class="token operator">&amp;</span>map<span class="token punctuation">,</span> ifstream <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> trans_map <span class="token operator">=</span> <span class="token function">buildMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string text<span class="token punctuation">;</span> <span class="token function">getline</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>istringstream <span class="token function">iss</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string word<span class="token punctuation">;</span> iss <span class="token operator">>></span> word<span class="token punctuation">;</span> <span class="token punctuation">)</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">transform</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> trans_map<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">ifs_map</span><span class="token punctuation">(</span><span class="token string">"../data/word_transformation_bad.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ifs_content</span><span class="token punctuation">(</span><span class="token string">"../data/given_to_transform.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ifs_map <span class="token operator">&amp;&amp;</span> ifs_content<span class="token punctuation">)</span> <span class="token function">word_transform</span><span class="token punctuation">(</span>ifs_map<span class="token punctuation">,</span> ifs_content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find the documents."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习11-34"><a href="#练习11-34" class="headerlink" title="练习11.34"></a>练习11.34</h2><blockquote><p>如果你将<code>transform</code> 函数中的<code>find</code>替换为下标运算符，会发生什么情况？</p></blockquote><p>解：</p><p>如果使用下标运算符，当关键字未在容器中时，会往容器中添加一个新元素。</p><h2 id="练习11-35"><a href="#练习11-35" class="headerlink" title="练习11.35"></a>练习11.35</h2><blockquote><p>在<code>buildMap</code>中，如果进行如下改写，会有什么效果？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">trans_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//改为</span>trans_map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>key<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>当一个转换规则的关键字多次出现的时候，使用下标运算符会保留最后一次添加的规则，而用insert则保留第一次添加的规则。</p><h2 id="练习11-36"><a href="#练习11-36" class="headerlink" title="练习11.36"></a>练习11.36</h2><blockquote><p>我们的程序并没检查输入文件的合法性。特别是，它假定转换规则文件中的规则都是有意义的。如果文件中的某一行包含一个关键字、一个空格，然后就结束了，会发生什么？预测程序的行为并进行验证，再与你的程序进行比较。</p></blockquote><p>解：</p><p>如果关键字没有对应的规则，那么程序会抛出一个 <code>runtime_error</code>。</p><h2 id="练习11-37"><a href="#练习11-37" class="headerlink" title="练习11.37"></a>练习11.37</h2><blockquote><p>一个无序容器与其有序版本相比有何优势？有序版本有何优势？</p></blockquote><p>无序容器拥有更好的性能，有序容器使得元素始终有序。</p><h2 id="练习11-38"><a href="#练习11-38" class="headerlink" title="练习11.38"></a>练习11.38</h2><blockquote><p>用 <code>unordered_map</code> 重写单词计数程序和单词转换程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wordCounting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> size_t<span class="token operator">></span> word_count<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string word<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> word<span class="token punctuation">;</span> <span class="token operator">++</span>word_count<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>w <span class="token operator">:</span> word_count<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> w<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" occurs "</span> <span class="token operator">&lt;&lt;</span> w<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span>second <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"times"</span> <span class="token operator">:</span> <span class="token string">"time"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">wordTransformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">ifs_map</span><span class="token punctuation">(</span><span class="token string">"../data/word_transformation.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ifs_content</span><span class="token punctuation">(</span><span class="token string">"../data/given_to_transform.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs_map <span class="token operator">||</span> <span class="token operator">!</span>ifs_content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find the documents."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> trans_map<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string key<span class="token punctuation">,</span> value<span class="token punctuation">;</span> ifs_map <span class="token operator">>></span> key <span class="token operator">&amp;&amp;</span> <span class="token function">getline</span><span class="token punctuation">(</span>ifs_map<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> trans_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string text<span class="token punctuation">,</span> word<span class="token punctuation">;</span> <span class="token function">getline</span><span class="token punctuation">(</span>ifs_content<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istringstream <span class="token function">iss</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> iss <span class="token operator">>></span> word<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> map_it <span class="token operator">=</span> trans_map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>map_it <span class="token operator">==</span> trans_map<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> word <span class="token operator">:</span> map_it<span class="token operator">-></span>second<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//wordCounting();</span>    <span class="token function">wordTransformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案9</title>
      <link href="2021/04/10/excersize/ch09/"/>
      <url>2021/04/10/excersize/ch09/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-顺序容器"><a href="#第九章-顺序容器" class="headerlink" title="第九章 顺序容器"></a>第九章 顺序容器</h1><h2 id="练习9-1"><a href="#练习9-1" class="headerlink" title="练习9.1"></a>练习9.1</h2><blockquote><p>对于下面的程序任务，<code>vector</code>、<code>deque</code>和<code>list</code>哪种容器最为适合？解释你的选择的理由。如果没有哪一种容器优于其他容器，也请解释理由。</p></blockquote><ul><li>(a) 读取固定数量的单词，将它们按字典序插入到容器中。我们将在下一章中看到，关联容器更适合这个问题。</li><li>(b) 读取未知数量的单词，总是将单词插入到末尾。删除操作在头部进行。</li><li>(c) 从一个文件读取未知数量的整数。将这些数排序，然后将它们打印到标准输出。</li></ul><p>解：</p><ul><li>(a) <code>list</code> ，因为需要频繁的插入操作。</li><li>(b) <code>deque</code> ，总是在头尾进行插入、删除操作。</li><li>(c) <code>vector</code> ，不需要进行插入删除操作。</li></ul><h2 id="练习9-2"><a href="#练习9-2" class="headerlink" title="练习9.2"></a>练习9.2</h2><blockquote><p>定义一个<code>list</code>对象，其元素类型是<code>int</code>的<code>deque</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> l<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习9-3"><a href="#练习9-3" class="headerlink" title="练习9.3"></a>练习9.3</h2><blockquote><p>构成迭代器范围的迭代器有何限制？</p></blockquote><p>解：</p><p>两个迭代器 <code>begin</code> 和 <code>end</code>需满足以下条件：</p><ul><li>它们指向同一个容器中的元素，或者是容器最后一个元素之后的位置。</li><li>我们可以通过反复递增<code>begin</code>来到达<code>end</code>。换句话说，<code>end</code> 不在<code>begin</code>之前。</li></ul><h2 id="练习9-4"><a href="#练习9-4" class="headerlink" title="练习9.4"></a>练习9.4</h2><blockquote><p>编写函数，接受一对指向<code>vector&lt;int&gt;</code>的迭代器和一个<code>int</code>值。在两个迭代器指定的范围中查找给定的值，返回一个布尔值来指出是否找到。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator begin<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator end<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>begin<span class="token operator">++</span> <span class="token operator">!=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>begin <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-5"><a href="#练习9-5" class="headerlink" title="练习9.5"></a>练习9.5</h2><blockquote><p>重写上一题的函数，返回一个迭代器指向找到的元素。注意，程序必须处理未找到给定值的情况。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator <span class="token function">find</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator begin<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator end<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">!=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>begin <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> begin<span class="token punctuation">;</span><span class="token operator">++</span>begin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-6"><a href="#练习9-6" class="headerlink" title="练习9.6"></a>练习9.6</h2><blockquote><p>下面的程序有何错误？你应该如何修改它？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lst1<span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator iter1 <span class="token operator">=</span> lst1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>iter2 <span class="token operator">=</span> lst1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter1 <span class="token operator">&lt;</span> iter2<span class="token punctuation">)</span> <span class="token comment">/* ... */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解:</p><p>修改成如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>iter1 <span class="token operator">!=</span> iter2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习9-7"><a href="#练习9-7" class="headerlink" title="练习9.7"></a>练习9.7</h2><blockquote><p>为了索引<code>int</code>的<code>vector</code>中的元素，应该使用什么类型？</p></blockquote><p>解:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习9-8"><a href="#练习9-8" class="headerlink" title="练习9.8"></a>练习9.8</h2><blockquote><p>为了读取<code>string</code>的<code>list</code>中的元素，应该使用什么类型？如果写入<code>list</code>，又应该使用什么类型？</p></blockquote><p>解:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">list<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator <span class="token comment">// 读</span>list<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token comment">// 写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习9-9"><a href="#练习9-9" class="headerlink" title="练习9.9"></a>练习9.9</h2><blockquote><p><code>begin</code>和<code>cbegin</code>两个函数有什么不同？</p></blockquote><p>解:</p><p><code>begin</code> 返回的是普通迭代器，<code>cbegin</code> 返回的是常量迭代器。</p><h2 id="练习9-10"><a href="#练习9-10" class="headerlink" title="练习9.10"></a>练习9.10</h2><blockquote><p>下面4个对象分别是什么类型？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1<span class="token punctuation">;</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2<span class="token punctuation">;</span><span class="token keyword">auto</span> it1 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it2 <span class="token operator">=</span> v2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it3 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it4 <span class="token operator">=</span> v2<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解:</p><p><code>it1</code> 是 <code>vector&lt;int&gt;::iterator</code></p><p><code>it2</code>，<code>it3</code> 和 <code>it4</code> 是 <code>vector&lt;int&gt;::const_iterator</code></p><h2 id="练习9-11"><a href="#练习9-11" class="headerlink" title="练习9.11"></a>练习9.11</h2><blockquote><p>对6种创建和初始化<code>vector</code>对象的方法，每一种都给出一个实例。解释每个<code>vector</code>包含什么值。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>    <span class="token comment">// 0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 10个0</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10个1</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3, 4, 5</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>other_vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝 other_vec 的元素</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>other_vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> other_vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝 other_vec 的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-12"><a href="#练习9-12" class="headerlink" title="练习9.12"></a>练习9.12</h2><blockquote><p>对于接受一个容器创建其拷贝的构造函数，和接受两个迭代器创建拷贝的构造函数，解释它们的不同。</p></blockquote><p>解：</p><ul><li>接受一个容器创建其拷贝的构造函数，必须容器类型和元素类型都相同。</li><li>接受两个迭代器创建拷贝的构造函数，只需要元素的类型能够相互转换，容器类型和元素类型可以不同。</li></ul><h2 id="练习9-13"><a href="#练习9-13" class="headerlink" title="练习9.13"></a>练习9.13</h2><blockquote><p>如何从一个<code>list&lt;int&gt;</code>初始化一个<code>vector&lt;double&gt;</code>？从一个<code>vector&lt;int&gt;</code>又该如何创建？编写代码验证你的答案。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ilst</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ivc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dvc</span><span class="token punctuation">(</span>ilst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ilst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dvc2</span><span class="token punctuation">(</span>ivc<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivc<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-14"><a href="#练习9-14" class="headerlink" title="练习9.14"></a>练习9.14</h2><blockquote><p>编写程序，将一个<code>list</code>中的<code>char *</code>指针元素赋值给一个<code>vector</code>中的<code>string</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> l<span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习9-15"><a href="#练习9-15" class="headerlink" title="练习9.15"></a>练习9.15</h2><blockquote><p>编写程序，判定两个<code>vector&lt;int&gt;</code>是否相等。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec1<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec2<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec3<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>vec1 <span class="token operator">==</span> vec2 <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>vec1 <span class="token operator">==</span> vec3 <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-16"><a href="#练习9-16" class="headerlink" title="练习9.16"></a>练习9.16</h2><blockquote><p>重写上一题的程序，比较一个list<int>中的元素和一个vector<int>中的元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>      li<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    vec2<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    vec3<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> li<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> vec2 <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> li<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> vec3 <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-17"><a href="#练习9-17" class="headerlink" title="练习9.17"></a>练习9.17</h2><blockquote><p>假定<code>c1</code>和<code>c2</code>是两个容器，下面的比较操作有何限制？</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">&lt;</span> c2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>c1</code>和<code>c2</code>必须是相同类型的容器并且保存相同类型的元素</li><li>元素类型要支持关系运算符</li></ul><h2 id="练习9-18"><a href="#练习9-18" class="headerlink" title="练习9.18"></a>练习9.18</h2><blockquote><p>编写程序，从标准输入读取<code>string</code>序列，存入一个<code>deque</code>中。编写一个循环，用迭代器打印<code>deque</code>中的元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>deque<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    deque<span class="token operator">&lt;</span>string<span class="token operator">></span> input<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string str<span class="token punctuation">;</span> cin <span class="token operator">>></span> str<span class="token punctuation">;</span> input<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> iter <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> input<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iter <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-19"><a href="#练习9-19" class="headerlink" title="练习9.19"></a>练习9.19</h2><blockquote><p>重写上一题的程序，用<code>list</code>替代<code>deque</code>。列出程序要做出哪些改变。</p></blockquote><p>解：</p><p>只需要在声明上做出改变即可，其他都不变。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">deque<span class="token operator">&lt;</span>string<span class="token operator">></span> input<span class="token punctuation">;</span> <span class="token comment">//改为</span>list<span class="token operator">&lt;</span>string<span class="token operator">></span> input<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习9-20"><a href="#练习9-20" class="headerlink" title="练习9.20"></a>练习9.20</h2><blockquote><p>编写程序，从一个<code>list&lt;int&gt;</code>拷贝元素到两个<code>deque</code>中。值为偶数的所有元素都拷贝到一个<code>deque</code>中，而奇数值元素都拷贝到另一个<code>deque</code>中。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>deque<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>list<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> odd<span class="token punctuation">,</span> even<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> l<span class="token punctuation">)</span>        <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">0x1</span> <span class="token operator">?</span> odd <span class="token operator">:</span> even<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> odd<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> even<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-21"><a href="#练习9-21" class="headerlink" title="练习9.21"></a>练习9.21</h2><blockquote><p>如果我们将第308页中使用<code>insert</code>返回值将元素添加到<code>list</code>中的循环程序改写为将元素插入到<code>vector</code>中，分析循环将如何工作。</p></blockquote><p>解：</p><p>一样的。如书上所说：</p><blockquote><p>第一次调用 <code>insert</code> 会将我们刚刚读入的 <code>string</code> 插入到 <code>iter</code> 所指向的元素之前的位置。<code>insert</code> 返回的迭代器恰好指向这个新元素。我们将此迭代器赋予 <code>iter</code> 并重复循环，读取下一个单词。只要继续有单词读入，每步 while 循环就会将一个新元素插入到 <code>iter</code> 之前，并将 <code>iter</code> 改变为新加入元素的尾置。此元素为（新的）首元素。因此，每步循环将一个元素插入到 <code>list</code> 首元素之前的位置。</p></blockquote><h2 id="练习9-22"><a href="#练习9-22" class="headerlink" title="练习9.22"></a>练习9.22</h2><blockquote><p>假定<code>iv</code>是一个<code>int</code>的<code>vector</code>，下面的程序存在什么错误？你将如何修改？</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator iter <span class="token operator">=</span> iv<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  mid <span class="token operator">=</span> iv<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> iv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> mid<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>iter <span class="token operator">==</span> some_val<span class="token punctuation">)</span>iv<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> some_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>循环不会结束</li><li>迭代器可能会失效</li></ul><p>要改为下面这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>iter <span class="token operator">==</span> some_val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>iter <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> some_val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>iter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">++</span>iter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-23"><a href="#练习9-23" class="headerlink" title="练习9.23"></a>练习9.23</h2><blockquote><p>在本节第一个程序中，若<code>c.size()</code> 为1，则<code>val</code>、<code>val2</code>、<code>val3</code>和<code>val4</code>的值会是什么？</p></blockquote><p>解：</p><p>都会是同一个值（容器中仅有的那个）。</p><h2 id="练习9-24"><a href="#练习9-24" class="headerlink" title="练习9.24"></a>练习9.24</h2><blockquote><p>编写程序，分别使用<code>at</code>、下标运算符、<code>front</code> 和 <code>begin</code> 提取一个<code>vector</code>中的第一个元素。在一个空<code>vector</code>上测试你的程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// terminating with uncaught exception of type std::out_of_range</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// Segmentation fault: 11</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// Segmentation fault: 11</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Segmentation fault: 11</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-25"><a href="#练习9-25" class="headerlink" title="练习9.25"></a>练习9.25</h2><blockquote><p>对于第312页中删除一个范围内的元素的程序，如果 <code>elem1</code> 与 <code>elem2</code> 相等会发生什么？如果 <code>elem2</code> 是尾后迭代器，或者 <code>elem1</code> 和 <code>elem2</code> 皆为尾后迭代器，又会发生什么？</p></blockquote><p>解：</p><ul><li>如果 <code>elem1</code> 和 <code>elem2</code> 相等，那么不会发生任何操作。</li><li><code>如果elem2</code> 是尾后迭代器，那么删除从 <code>elem1</code> 到最后的元素。</li><li>如果两者皆为尾后迭代器，也什么都不会发生。</li></ul><h2 id="练习9-26"><a href="#练习9-26" class="headerlink" title="练习9.26"></a>练习9.26</h2><blockquote><p>使用下面代码定义的<code>ia</code>，将<code>ia</code>拷贝到一个<code>vector</code>和一个<code>list</code>中。是用单迭代器版本的<code>erase</code>从<code>list</code>中删除奇数元素，从<code>vector</code>中删除偶数元素。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>ia<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>ia<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">lst</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> lst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> lst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span>it <span class="token operator">=</span> lst<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">++</span>it<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">++</span>it<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-27"><a href="#练习9-27" class="headerlink" title="练习9.27"></a>练习9.27</h2><blockquote><p>编写程序，查找并删除<code>forward_list&lt;int&gt;</code>中的奇数元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;forward_list></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>forward_list<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token function">remove_odds</span><span class="token punctuation">(</span>forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> flist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> is_odd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    flist<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span>is_odd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    forward_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">remove_odds</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> data<span class="token punctuation">)</span>         cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-28"><a href="#练习9-28" class="headerlink" title="练习9.28"></a>练习9.28</h2><blockquote><p>编写函数，接受一个<code>forward_list&lt;string&gt;</code>和两个<code>string</code>共三个参数。函数应在链表中查找第一个<code>string</code>，并将第二个<code>string</code>插入到紧接着第一个<code>string</code>之后的位置。若第一个<code>string</code>未在链表中，则将第二个<code>string</code>插入到链表末尾。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">find_and_insert</span><span class="token punctuation">(</span>forward_list<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> flst<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> prev <span class="token operator">=</span> flst<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> curr <span class="token operator">=</span> flst<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> flst<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>curr <span class="token operator">==</span> s1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flst<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>    <span class="token operator">++</span>curr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    flst<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-29"><a href="#练习9-29" class="headerlink" title="练习9.29"></a>练习9.29</h2><blockquote><p>假定<code>vec</code>包含25个元素，那么<code>vec.resize(100)</code>会做什么？如果接下来调用<code>vec.resize(10)</code>会做什么？</p></blockquote><p>解：</p><ul><li>将75个值为0的元素添加到<code>vec</code>的末尾</li><li>从<code>vec</code>的末尾删除90个元素</li></ul><h2 id="练习9-30"><a href="#练习9-30" class="headerlink" title="练习9.30"></a>练习9.30</h2><blockquote><p>接受单个参数的<code>resize</code>版本对元素类型有什么限制（如果有的话）？</p></blockquote><p>解：</p><p>元素类型必须提供一个默认构造函数。</p><h2 id="练习9-31"><a href="#练习9-31" class="headerlink" title="练习9.31"></a>练习9.31</h2><blockquote><p>第316页中删除偶数值元素并复制奇数值元素的程序不能用于<code>list</code>或<code>forward_list</code>。为什么？修改程序，使之也能用于这些类型。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iter <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为复合赋值语句只能用于<code>string</code>、<code>vector</code>、<code>deque</code>、<code>array</code>，所以要改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">++</span>iter<span class="token punctuation">;</span><span class="token operator">++</span>iter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是<code>forward_list</code>的话，要增加一个首先迭代器<code>prev</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> prev <span class="token operator">=</span> flst<span class="token punctuation">.</span><span class="token function">before_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span>curr <span class="token operator">==</span> flst<span class="token punctuation">.</span><span class="token function">insert_after</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token operator">*</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>curr<span class="token punctuation">;</span> <span class="token operator">++</span>curr<span class="token punctuation">;</span><span class="token operator">++</span>prev<span class="token punctuation">;</span> <span class="token operator">++</span>prev<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-32"><a href="#练习9-32" class="headerlink" title="练习9.32"></a>练习9.32</h2><blockquote><p>在第316页的程序中，向下面语句这样调用<code>insert</code>是否合法？如果不合法，为什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iter <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> <span class="token operator">*</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>不合法。因为参数的求值顺序是未指定的。</p><h2 id="练习9-33"><a href="#练习9-33" class="headerlink" title="练习9.33"></a>练习9.33</h2><blockquote><p>在本节最后一个例子中，如果不将<code>insert</code>的结果赋予<code>begin</code>，将会发生什么？编写程序，去掉此赋值语句，验证你的答案。</p></blockquote><p>解：</p><p><code>begin</code>将会失效。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> data <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cur <span class="token operator">!=</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>cur<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>cur <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token operator">*</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>cur<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> data<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-34"><a href="#练习9-34" class="headerlink" title="练习9.34"></a>练习9.34</h2><blockquote><p>假定<code>vi</code>是一个保存<code>int</code>的容器，其中有偶数值也有奇数值，分析下面循环的行为，然后编写程序验证你的分析是否正确。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">iter <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter <span class="token operator">!=</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>iter <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>iter <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> <span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>iter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>循环永远不会结束。</p><h2 id="练习9-35"><a href="#练习9-35" class="headerlink" title="练习9.35"></a>练习9.35</h2><blockquote><p>解释一个<code>vector</code>的<code>capacity</code>和<code>size</code>有何区别。</p></blockquote><p>解：</p><ul><li><code>capacity</code>的值表明，在不重新分配内存空间的情况下，容器可以保存多少元素</li><li>而<code>size</code>的值是指容器已经保存的元素的数量</li></ul><h2 id="练习9-36"><a href="#练习9-36" class="headerlink" title="练习9.36"></a>练习9.36</h2><blockquote><p>一个容器的<code>capacity</code>可能小于它的<code>size</code>吗？</p></blockquote><p>解：</p><p>不可能。</p><h2 id="练习9-37"><a href="#练习9-37" class="headerlink" title="练习9.37"></a>练习9.37</h2><blockquote><p>为什么<code>list</code>或<code>array</code>没有<code>capacity</code>成员函数？</p></blockquote><p>解：</p><p>因为<code>list</code>是链表，而<code>array</code>不允许改变容器大小。</p><h2 id="练习9-38"><a href="#练习9-38" class="headerlink" title="练习9.38"></a>练习9.38</h2><blockquote><p>编写程序，探究在你的标准实现中，<code>vector</code>是如何增长的。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"capacity: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  size: "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br>输出：</p><pre class="line-numbers language-none"><code class="language-none">capacity: 0  size: 0capacity: 1  size: 1capacity: 2  size: 2capacity: 3  size: 3capacity: 4  size: 4capacity: 6  size: 5capacity: 6  size: 6capacity: 9  size: 7capacity: 9  size: 8capacity: 9  size: 9capacity: 13  size: 10capacity: 13  size: 11capacity: 13  size: 12capacity: 13  size: 13capacity: 19  size: 14capacity: 19  size: 15capacity: 19  size: 16capacity: 19  size: 17capacity: 19  size: 18capacity: 19  size: 19capacity: 28  size: 20capacity: 28  size: 21capacity: 28  size: 22capacity: 28  size: 23capacity: 28  size: 24capacity: 28  size: 25capacity: 28  size: 26capacity: 28  size: 27capacity: 28  size: 28capacity: 42  size: 29capacity: 42  size: 30capacity: 42  size: 31capacity: 42  size: 32capacity: 42  size: 33capacity: 42  size: 34capacity: 42  size: 35capacity: 42  size: 36capacity: 42  size: 37capacity: 42  size: 38capacity: 42  size: 39capacity: 42  size: 40capacity: 42  size: 41capacity: 42  size: 42capacity: 63  size: 43capacity: 63  size: 44capacity: 63  size: 45capacity: 63  size: 46capacity: 63  size: 47capacity: 63  size: 48capacity: 63  size: 49capacity: 63  size: 50capacity: 63  size: 51capacity: 63  size: 52capacity: 63  size: 53capacity: 63  size: 54capacity: 63  size: 55capacity: 63  size: 56capacity: 63  size: 57capacity: 63  size: 58capacity: 63  size: 59capacity: 63  size: 60capacity: 63  size: 61capacity: 63  size: 62capacity: 63  size: 63capacity: 94  size: 64capacity: 94  size: 65capacity: 94  size: 66capacity: 94  size: 67capacity: 94  size: 68capacity: 94  size: 69capacity: 94  size: 70capacity: 94  size: 71capacity: 94  size: 72capacity: 94  size: 73capacity: 94  size: 74capacity: 94  size: 75capacity: 94  size: 76capacity: 94  size: 77capacity: 94  size: 78capacity: 94  size: 79capacity: 94  size: 80capacity: 94  size: 81capacity: 94  size: 82capacity: 94  size: 83capacity: 94  size: 84capacity: 94  size: 85capacity: 94  size: 86capacity: 94  size: 87capacity: 94  size: 88capacity: 94  size: 89capacity: 94  size: 90capacity: 94  size: 91capacity: 94  size: 92capacity: 94  size: 93capacity: 94  size: 94capacity: 141  size: 95capacity: 141  size: 96capacity: 141  size: 97capacity: 141  size: 98capacity: 141  size: 99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-39"><a href="#练习9-39" class="headerlink" title="练习9.39"></a>练习9.39</h2><blockquote><p>解释下面程序片段做了什么：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> svec<span class="token punctuation">;</span>svec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string word<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> word<span class="token punctuation">)</span>svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>svec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>svec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> svec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>定义一个<code>vector</code>，为它分配1024个元素的空间。然后通过一个循环从标准输入中读取字符串并添加到<code>vector</code>当中。循环结束后，改变<code>vector</code>的容器大小（元素数量）为原来的1.5倍，使用元素的默认初始化值填充。如果容器的大小超过1024，<code>vector</code>也会重新分配空间以容纳新增的元素。</p><h2 id="练习9-40"><a href="#练习9-40" class="headerlink" title="练习9.40"></a>练习9.40</h2><blockquote><p>如果上一题的程序读入了256个词，在<code>resize</code>之后容器的<code>capacity</code>可能是多少？如果读入了512个、1000个、或1048个呢？</p></blockquote><p>解：</p><ul><li>如果读入了256个词，<code>capacity</code> 仍然是 1024</li><li>如果读入了512个词，<code>capacity</code> 仍然是 1024</li><li>如果读入了1000或1048个词，<code>capacity</code> 取决于具体实现。</li></ul><h2 id="练习9-41"><a href="#练习9-41" class="headerlink" title="练习9.41"></a>练习9.41</h2><blockquote><p>编写程序，从一个<code>vector&lt;char&gt;</code>初始化一个<code>string</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> v<span class="token punctuation">&#123;</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string <span class="token function">str</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习9-42"><a href="#练习9-42" class="headerlink" title="练习9.42"></a>练习9.42</h2><blockquote><p>假定你希望每次读取一个字符存入一个<code>string</code>中，而且知道最少需要读取100个字符，应该如何提高程序的性能？</p></blockquote><p>解：</p><p>使用 <code>reserve(100)</code> 函数预先分配100个元素的空间。</p><h2 id="练习9-43"><a href="#练习9-43" class="headerlink" title="练习9.43"></a>练习9.43</h2><blockquote><p>编写一个函数，接受三个<code>string</code>参数是<code>s</code>、<code>oldVal</code> 和<code>newVal</code>。使用迭代器及<code>insert</code>和<code>erase</code>函数将<code>s</code>中所有<code>oldVal</code>替换为<code>newVal</code>。测试你的程序，用它替换通用的简写形式，如，将”tho”替换为”though”,将”thru”替换为”through”。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token function">replace_with</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> oldVal<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cur <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> oldVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">==</span> string<span class="token punctuation">&#123;</span> cur<span class="token punctuation">,</span> cur <span class="token operator">+</span> oldVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> cur <span class="token operator">+</span> oldVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> newVal<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newVal<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            cur <span class="token operator">+=</span> newVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>              <span class="token operator">++</span>cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">&#123;</span> <span class="token string">"To drive straight thru is a foolish, tho courageous act."</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">replace_with</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"tho"</span><span class="token punctuation">,</span> <span class="token string">"though"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">replace_with</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"thru"</span><span class="token punctuation">,</span> <span class="token string">"through"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-44"><a href="#练习9-44" class="headerlink" title="练习9.44"></a>练习9.44</h2><blockquote><p>重写上一题的函数，这次使用一个下标和<code>replace</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token function">replace_with</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> oldVal<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> newVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> oldVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> oldVal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> oldVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> oldVal<span class="token punctuation">)</span>            s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> oldVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">,</span>            pos <span class="token operator">+=</span> newVal<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token operator">++</span>pos<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string str<span class="token punctuation">&#123;</span> <span class="token string">"To drive straight thru is a foolish, tho courageous act."</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">replace_with</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"tho"</span><span class="token punctuation">,</span> <span class="token string">"though"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">replace_with</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"thru"</span><span class="token punctuation">,</span> <span class="token string">"through"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-45"><a href="#练习9-45" class="headerlink" title="练习9.45"></a>练习9.45</h2><blockquote><p>编写一个函数，接受一个表示名字的<code>string</code>参数和两个分别表示前缀（如”Mr.”或”Mrs.”）和后缀（如”Jr.”或”III”）的字符串。使用迭代器及<code>insert</code>和<code>append</code>函数将前缀和后缀添加到给定的名字中，将生成的新<code>string</code>返回。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// Exercise 9.45</span><span class="token keyword">auto</span> <span class="token function">add_pre_and_suffix</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> pre<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> su<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    name<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>su<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string <span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">add_pre_and_suffix</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"Mr."</span><span class="token punctuation">,</span> <span class="token string">", Jr."</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-46"><a href="#练习9-46" class="headerlink" title="练习9.46"></a>练习9.46</h2><blockquote><p>重写上一题的函数，这次使用位置和长度来管理<code>string</code>，并只使用<code>insert</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">auto</span> <span class="token function">add_pre_and_suffix</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> pre<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> su<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    name<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> su<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"alan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">add_pre_and_suffix</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"Mr."</span><span class="token punctuation">,</span> <span class="token string">",Jr."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-47"><a href="#练习9-47" class="headerlink" title="练习9.47"></a>练习9.47</h2><blockquote><p>编写程序，首先查找<code>string</code>“ab2c3d7R4E6”中每个数字字符，然后查找其中每个字母字符。编写两个版本的程序，第一个要使用<code>find_first_of</code>，第二个要使用<code>find_first_not_of</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token string">"0123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">"ab2c3d7R4E6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"numeric characters: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nalphabetic characters: "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">;</span> <span class="token operator">++</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-48"><a href="#练习9-48" class="headerlink" title="练习9.48"></a>练习9.48</h2><blockquote><p>假定<code>name</code>和<code>numbers</code>的定义如325页所示，<code>numbers.find(name)</code>返回什么？</p></blockquote><p>解：</p><p>返回 <code>string::npos</code></p><h2 id="练习9-49"><a href="#练习9-49" class="headerlink" title="练习9.49"></a>练习9.49</h2><blockquote><p>如果一个字母延伸到中线之上，如d或f，则称其有上出头部分（<code>ascender</code>）。如果一个字母延伸到中线之下，如p或g，则称其有下出头部分（<code>descender</code>）。编写程序，读入一个单词文件，输出最长的既不包含上出头部分，也不包含下出头部分的单词。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"../data/letter.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    string longest<span class="token punctuation">;</span>    <span class="token keyword">auto</span> update_with <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>longest<span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> curr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token double-colon punctuation">::</span>npos <span class="token operator">==</span> curr<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">"aceimnorsuvwxz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            longest <span class="token operator">=</span> longest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> curr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> curr <span class="token operator">:</span> longest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>string curr<span class="token punctuation">;</span> ifs <span class="token operator">>></span> curr<span class="token punctuation">;</span> <span class="token function">update_with</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> longest <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-50"><a href="#练习9-50" class="headerlink" title="练习9.50"></a>练习9.50</h2><blockquote><p>编写程序处理一个<code>vector&lt;string&gt;</code>，其元素都表示整型值。计算<code>vector</code>中所有元素之和。修改程序，使之计算表示浮点值的<code>string</code>之和。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">auto</span> <span class="token function">sum_for_int</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> v<span class="token punctuation">)</span>        sum <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">auto</span> <span class="token function">sum_for_float</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> v<span class="token punctuation">)</span>        sum <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">stof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4.5"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum_for_int</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum_for_float</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-51"><a href="#练习9-51" class="headerlink" title="练习9.51"></a>练习9.51</h2><blockquote><p>设计一个类，它有三个<code>unsigned</code>成员，分别表示年、月和日。为其编写构造函数，接受一个表示日期的<code>string</code>参数。你的构造函数应该能处理不同的数据格式，如January 1,1900、1/1/1990、Jan 1 1900 等。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">My_date</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">unsigned</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">My_date</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> tag<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> format<span class="token punctuation">;</span>        format <span class="token operator">=</span> tag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 1/1/1900</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">!=</span> string <span class="token double-colon punctuation">::</span> npos<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            format <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// January 1, 1900 or Jan 1, 1900</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token operator">!=</span> string <span class="token double-colon punctuation">::</span> npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            format <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// Jan 1 1900</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span>                <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token operator">!=</span> string <span class="token double-colon punctuation">::</span> npos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                format <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>                tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">0x01</span><span class="token operator">:</span>            day <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            month <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">-</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            year <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0x10</span><span class="token operator">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Jan"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Feb"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Mar"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Apr"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"May"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Jun"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Jul"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Aug"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Sep"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Oct"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Nov"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"Dec"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  month <span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> chr <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                chr <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            day <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span>chr<span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">.</span><span class="token function">find_first_of</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            year <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_last_of</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"day:"</span> <span class="token operator">&lt;&lt;</span> day <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"month: "</span> <span class="token operator">&lt;&lt;</span> month <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"year: "</span> <span class="token operator">&lt;&lt;</span> year<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    My_date <span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jan 1 1900"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习9-52"><a href="#练习9-52" class="headerlink" title="练习9.52"></a>练习9.52</h2><blockquote><p>使用<code>stack</code>处理括号化的表达式。当你看到一个左括号，将其记录下来。当你在一个左括号之后看到一个右括号，从<code>stack</code>中<code>pop</code>对象，直至遇到左括号，将左括号也一起弹出栈。然后将一个值（括号内的运算结果）<code>push</code>到栈中，表示一个括号化的（子）表达式已经处理完毕，被其运算结果所替代。</p></blockquote><p>解：</p><p>这道题可以延伸为逆波兰求值，以及中缀转后缀表达式。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>stack<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string expression<span class="token punctuation">&#123;</span> <span class="token string">"This is (pezy)."</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> bSeen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> stk<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> expression<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> bSeen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> bSeen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bSeen<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        string repstr<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        repstr <span class="token operator">+=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        expression<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> repstr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repstr<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> expression <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案12</title>
      <link href="2021/04/10/excersize/ch12/"/>
      <url>2021/04/10/excersize/ch12/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二章-动态内存"><a href="#第十二章-动态内存" class="headerlink" title="第十二章 动态内存"></a>第十二章 动态内存</h1><h2 id="练习12-1"><a href="#练习12-1" class="headerlink" title="练习12.1"></a>练习12.1</h2><blockquote><p>在此代码的结尾，<code>b1</code> 和 <code>b2</code> 各包含多少个元素？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">StrBlob b1<span class="token punctuation">;</span><span class="token punctuation">&#123;</span>StrBlob b2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"an"</span><span class="token punctuation">,</span> <span class="token string">"the"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>b1 <span class="token operator">=</span> b2<span class="token punctuation">;</span>b2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"about"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>它们实际操作的是同一个<code>vector</code>，都包含4个元素。在代码的结尾，<code>b2</code> 被析构了，不影响 <code>b1</code> 的元素。</p><h2 id="练习12-2"><a href="#练习12-2" class="headerlink" title="练习12.2"></a>练习12.2</h2><blockquote><p>编写你自己的<code>StrBlob</code> 类，包含<code>const</code> 版本的 <code>front</code> 和 <code>back</code>。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;exception></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StrBlob</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> size_type <span class="token operator">=</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>    <span class="token function">StrBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">StrBlob</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>string<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"pop_back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">-></span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"front on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"front on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex12_02.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> StrBlob csb<span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"pezy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    StrBlob sb<span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"Mooophy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> csb<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> csb<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"pezy"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sb<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> sb<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-3"><a href="#练习12-3" class="headerlink" title="练习12.3"></a>练习12.3</h2><blockquote><p><code>StrBlob</code> 需要<code>const</code> 版本的<code>push_back</code> 和 <code>pop_back</code>吗？如需要，添加进去。否则，解释为什么不需要。</p></blockquote><p>解：</p><p>不需要。<code>push_back</code> 和 <code>pop_back</code> 会改变对象的内容。而 <code>const</code> 对象是只读的，因此不需要。</p><h2 id="练习12-4"><a href="#练习12-4" class="headerlink" title="练习12.4"></a>练习12.4</h2><blockquote><p>在我们的 <code>check</code> 函数中，没有检查 <code>i</code> 是否大于0。为什么可以忽略这个检查？</p></blockquote><p>解：</p><p>因为 <code>size_type</code> 是一个无符号整型，当传递给 <code>check</code> 的参数小于 0 的时候，参数值会转换成一个正整数。</p><h2 id="练习12-5"><a href="#练习12-5" class="headerlink" title="练习12.5"></a>练习12.5</h2><blockquote><p>我们未编写接受一个 <code>initializer_list explicit</code> 参数的构造函数。讨论这个设计策略的优点和缺点。</p></blockquote><p>解：</p><p>构造函数不是 <code>explicit</code> 的，意味着可以从 <code>initializer_list</code> 隐式转换为 <code>StrBlob</code>。在 <code>StrBlob</code> 对象中，只有一个数据成员 <code>data</code>，而 <code>StrBlob</code> 对象本身的含义，也是一个<strong>管理字符串的序列</strong>。因此，从 <code>initializer_list</code> 到 <code>StrBlob</code> 的转换，在逻辑上是可行的。而这个设计策略的缺点，可能在某些地方我们确实需要 <code>initializer_list</code>，而编译器仍会将之转换为 <code>StrBlob</code>。</p><h2 id="练习12-6"><a href="#练习12-6" class="headerlink" title="练习12.6"></a>练习12.6</h2><blockquote><p>编写函数，返回一个动态分配的 <code>int</code> 的<code>vector</code>。将此<code>vector</code> 传递给另一个函数，这个函数读取标准输入，将读入的值保存在 <code>vector</code> 元素中。再将<code>vector</code>传递给另一个函数，打印读入的值。记得在恰当的时刻<code>delete vector</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span> <span class="token function">alloc_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">assign_vector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_vector</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">alloc_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign_vector</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_vector</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-7"><a href="#练习12-7" class="headerlink" title="练习12.7"></a>练习12.7</h2><blockquote><p>重做上一题，这次使用 <code>shared_ptr</code> 而不是内置指针。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">alloc_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">assign_vector</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_vector</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">alloc_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign_vector</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_vector</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-8"><a href="#练习12-8" class="headerlink" title="练习12.8"></a>练习12.8</h2><blockquote><p>下面的函数是否有错误？如果有，解释错误原因。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>有错误。<code>p</code>会被强制转换成<code>bool</code>，继而没有释放指针 <code>p</code> 指向的对象。</p><h2 id="练习12-9"><a href="#练习12-9" class="headerlink" title="练习12.9"></a>练习12.9</h2><blockquote><p>解释下面代码执行的结果。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r <span class="token operator">=</span> q<span class="token punctuation">;</span><span class="token keyword">auto</span> q2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r2 <span class="token operator">=</span> q2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>r</code> 和 <code>q</code> 指向 42，而之前 <code>r</code> 指向的 100 的内存空间并没有被释放，因此会发生内存泄漏。<code>r2</code> 和 <code>q2</code> 都是智能指针，当对象空间不被引用的时候会自动释放。</p><h2 id="练习12-10"><a href="#练习12-10" class="headerlink" title="练习12.10"></a>练习12.10</h2><blockquote><p>下面的代码调用了第413页中定义的<code>process</code> 函数，解释此调用是否正确。如果不正确，应如何修改？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">shared_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>正确。<code>shared_ptr&lt;int&gt;(p)</code> 会创建一个临时的智能指针，这个智能指针与 <code>p</code> 引用同一个对象，此时引用计数为 2。当表达式结束时，临时的智能指针被销毁，此时引用计数为 1。</p><h2 id="练习12-11"><a href="#练习12-11" class="headerlink" title="练习12.11"></a>练习12.11</h2><blockquote><p>如果我们像下面这样调用 <code>process</code>，会发生什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">process</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>这样会创建一个新的智能指针，它的引用计数为 1，这个智能指针所指向的空间与 <code>p</code> 相同。在表达式结束后，这个临时智能指针会被销毁，引用计数为 0，所指向的内存空间也会被释放。而导致 <code>p</code> 所指向的空间被释放，使得 p` 成为一个空悬指针。</p><h2 id="练习12-12"><a href="#练习12-12" class="headerlink" title="练习12.12"></a>练习12.12</h2><blockquote><p><code>p</code> 和 <code>sp</code> 的定义如下，对于接下来的对 <code>process</code> 的每个调用，如果合法，解释它做了什么，如果不合法，解释错误原因：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> sp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">process</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">process</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 合法。将<code>sp</code> 拷贝给 <code>process</code>函数的形参，在函数里面引用计数为 2，函数结束后引用计数为 1。</li><li>(b) 不合法。不能从内置指针隐式转换为智能指针。</li><li>(c) 不合法。不能从内置指针隐式转换为智能指针。</li><li>(d) 合法。但是智能指针和内置指针一起使用可能会出现问题，在表达式结束后智能指针会被销毁，它所指向的对象也被释放。而此时内置指针 <code>p</code> 依旧指向该内存空间。之后对内置指针 <code>p</code> 的操作可能会引发错误。</li></ul><h2 id="练习12-13"><a href="#练习12-13" class="headerlink" title="练习12.13"></a>练习12.13</h2><blockquote><p>如果执行下面的代码，会发生什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> sp <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>智能指针 <code>sp</code> 所指向空间已经被释放，再对 <code>sp</code> 进行操作会出现错误。</p><h2 id="练习12-14"><a href="#练习12-14" class="headerlink" title="练习12.14"></a>练习12.14</h2><blockquote><p>编写你自己版本的用 <code>shared_ptr</code> 管理 <code>connection</code> 的函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">struct</span> <span class="token class-name">connection</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string ip<span class="token punctuation">;</span><span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token function">connection</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string i<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">port</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">destination</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string ip<span class="token punctuation">;</span><span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token function">destination</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string i<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">port</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>connection <span class="token function">connect</span><span class="token punctuation">(</span>destination<span class="token operator">*</span> pDest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>connection<span class="token operator">></span> <span class="token function">pConn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">connection</span><span class="token punctuation">(</span>pDest<span class="token operator">-></span>ip<span class="token punctuation">,</span> pDest<span class="token operator">-></span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"creating connection("</span> <span class="token operator">&lt;&lt;</span> pConn<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span>pConn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">disconnect</span><span class="token punctuation">(</span>connection pConn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connection close("</span> <span class="token operator">&lt;&lt;</span> pConn<span class="token punctuation">.</span>ip <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> pConn<span class="token punctuation">.</span>port <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">end_connection</span><span class="token punctuation">(</span>connection<span class="token operator">*</span> pConn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token operator">*</span>pConn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>destination <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>connection conn <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>connection<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> end_connection<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connecting now("</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>destination <span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"220.181.111.111"</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-15"><a href="#练习12-15" class="headerlink" title="练习12.15"></a>练习12.15</h2><blockquote><p>重写上一题的程序，用 <code>lambda</code> 代替<code>end_connection</code> 函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">struct</span> <span class="token class-name">connection</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string ip<span class="token punctuation">;</span><span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token function">connection</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string i<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">port</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">destination</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string ip<span class="token punctuation">;</span><span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token function">destination</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string i<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">port</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>connection <span class="token function">connect</span><span class="token punctuation">(</span>destination<span class="token operator">*</span> pDest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>connection<span class="token operator">></span> <span class="token function">pConn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">connection</span><span class="token punctuation">(</span>pDest<span class="token operator">-></span>ip<span class="token punctuation">,</span> pDest<span class="token operator">-></span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"creating connection("</span> <span class="token operator">&lt;&lt;</span> pConn<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span>pConn<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">disconnect</span><span class="token punctuation">(</span>connection pConn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connection close("</span> <span class="token operator">&lt;&lt;</span> pConn<span class="token punctuation">.</span>ip <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> pConn<span class="token punctuation">.</span>port <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>destination <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>connection conn <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>connection<span class="token operator">></span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>connection<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"connecting now("</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>destination <span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"220.181.111.111"</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-16"><a href="#练习12-16" class="headerlink" title="练习12.16"></a>练习12.16</h2><blockquote><p>如果你试图拷贝或赋值 <code>unique_ptr</code>，编译器并不总是能给出易于理解的错误信息。编写包含这种错误的程序，观察编译器如何诊断这种错误。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>unique_ptr<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    unique_ptr<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"pezy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// unique_ptr&lt;string> p2(p1); // copy</span>    <span class="token comment">//                      ^</span>    <span class="token comment">// Error: Call to implicitly-deleted copy constructor of 'unique_ptr&lt;string>'</span>    <span class="token comment">//</span>    <span class="token comment">// unique_ptr&lt;string> p3 = p1; // assign</span>    <span class="token comment">//                      ^</span>    <span class="token comment">// Error: Call to implicitly-deleted copy constructor of 'unique_ptr&lt;string>'</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p1 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    p1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-17"><a href="#练习12-17" class="headerlink" title="练习12.17"></a>练习12.17</h2><blockquote><p>下面的 <code>unique_ptr</code> 声明中，哪些是合法的，哪些可能导致后续的程序错误？解释每个错误的问题在哪里。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> ix <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>ix<span class="token punctuation">,</span> <span class="token operator">*</span>pi2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> unique_ptr<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> IntP<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> IntP <span class="token function">p0</span><span class="token punctuation">(</span>ix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> IntP <span class="token function">p1</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> IntP <span class="token function">p2</span><span class="token punctuation">(</span>pi2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> IntP <span class="token function">p3</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> IntP <span class="token function">p4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> IntP <span class="token function">p5</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 不合法。在定义一个 <code>unique_ptr</code> 时，需要将其绑定到一个<code>new</code> 返回的指针上。</li><li>(b) 不合法。理由同上。</li><li>(c) 合法。但是也可能会使得 <code>pi2</code> 成为空悬指针。</li><li>(d) 不合法。当 <code>p3</code> 被销毁时，它试图释放一个栈空间的对象。</li><li>(e) 合法。</li><li>(f) 不合法。<code>p5</code> 和 <code>p2</code> 指向同一个对象，当 <code>p5</code> 和 <code>p2</code> 被销毁时，会使得同一个指针被释放两次。</li></ul><h2 id="练习12-18"><a href="#练习12-18" class="headerlink" title="练习12.18"></a>练习12.18</h2><blockquote><p><code>shared_ptr</code> 为什么没有 <code>release</code> 成员？</p></blockquote><p><code>release</code> 成员的作用是放弃控制权并返回指针，因为在某一时刻只能有一个 <code>unique_ptr</code> 指向某个对象，<code>unique_ptr</code> 不能被赋值，所以要使用 <code>release</code> 成员将一个 <code>unique_ptr</code> 的指针的所有权传递给另一个 <code>unique_ptr</code>。而 <code>shared_ptr</code> 允许有多个 <code>shared_ptr</code> 指向同一个对象，因此不需要 <code>release</code> 成员。</p><h2 id="练习12-19"><a href="#练习12-19" class="headerlink" title="练习12.19"></a>练习12.19</h2><blockquote><p>定义你自己版本的 <code>StrBlobPtr</code>，更新 <code>StrBlob</code> 类，加入恰当的 <code>friend</code> 声明以及 <code>begin</code> 和 <code>end</code> 成员。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdexcept></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StrBlob</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">using</span> size_type <span class="token operator">=</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span><span class="token punctuation">;</span>StrBlobPtr <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StrBlobPtr <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">StrBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">StrBlob</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>string<span class="token operator">></span> il<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"pop_back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token operator">-></span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"front on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"front on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">StrBlobPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">curr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">StrBlobPtr</span><span class="token punctuation">(</span>StrBlob <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size_t sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">wptr</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">curr</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrBlobPtr<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>curr <span class="token operator">!=</span> curr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>string<span class="token operator">&amp;</span> <span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"dereference past end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrBlobPtr<span class="token operator">&amp;</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>curr<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">check</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> ret <span class="token operator">=</span> wptr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"unbound StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> ret<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> wptr<span class="token punctuation">;</span>size_t curr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>StrBlobPtr <span class="token class-name">StrBlob</span><span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">StrBlobPtr</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrBlobPtr <span class="token class-name">StrBlob</span><span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">StrBlobPtr</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-20"><a href="#练习12-20" class="headerlink" title="练习12.20"></a>练习12.20</h2><blockquote><p>编写程序，逐行读入一个输入文件，将内容存入一个 <code>StrBlob</code> 中，用一个 <code>StrBlobPtr</code> 打印出 <code>StrBlob</code> 中的每个元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"exercise12_19.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"books.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StrBlob sb<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sb<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>StrBlobPtr sbp <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sbp <span class="token operator">!=</span> sb<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sbp<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> sbp<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-21"><a href="#练习12-21" class="headerlink" title="练习12.21"></a>练习12.21</h2><blockquote><p>也可以这样编写 <code>StrBlobPtr</code> 的 <code>deref</code> 成员：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"dereference past end"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你认为哪个版本更好？为什么？</p><p>解：</p><p>原来的版本更好，可读性更高。</p><h2 id="练习12-22"><a href="#练习12-22" class="headerlink" title="练习12.22"></a>练习12.22</h2><blockquote><p>为了能让 <code>StrBlobPtr</code> 使用 <code>const StrBlob</code>，你觉得应该如何修改？定义一个名为<code>ConstStrBlobPtr</code> 的类，使其能够指向 <code>const StrBlob</code>。</p></blockquote><p>解：</p><p>构造函数改为接受 <code>const Strblob &amp;</code> , 然后给 <code>Strblob</code> 类添加两个 <code>const</code> 成员函数 <code>cbegin</code> 和 <code>cend</code>，返回 <code>ConstStrBlobPtr</code>。</p><h2 id="练习12-23"><a href="#练习12-23" class="headerlink" title="练习12.23"></a>练习12.23</h2><blockquote><p>编写一个程序，连接两个字符串字面常量，将结果保存在一个动态分配的<code>char</code>数组中。重写这个程序，连接两个标准库<code>string</code>对象。</p></blockquote><p>解:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>c1 <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>c2 <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat_s</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> len<span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat_s</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> len<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string s1 <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string s2 <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span><span class="token function">strcpy_s</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-24"><a href="#练习12-24" class="headerlink" title="练习12.24"></a>练习12.24</h2><blockquote><p>编写一个程序，从标准输入读取一个字符串，存入一个动态分配的字符数组中。描述你的程序如何处理变长输入。测试你的程序，输入一个超出你分配的数组长度的字符串。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"How long do you want the string? "</span><span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> size<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input the string: "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-25"><a href="#练习12-25" class="headerlink" title="练习12.25"></a>练习12.25</h2><blockquote><p>给定下面的<code>new</code>表达式，你应该如何释放<code>pa</code>？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> pa<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习12-26"><a href="#练习12-26" class="headerlink" title="练习12.26"></a>练习12.26</h2><blockquote><p>用 <code>allocator</code> 重写第427页中的程序。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>allocator<span class="token operator">&lt;</span>string<span class="token operator">></span> alloc<span class="token punctuation">;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">auto</span> q <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">&amp;&amp;</span> q <span class="token operator">!=</span> p <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>q<span class="token operator">++</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">--</span>q <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-27"><a href="#练习12-27" class="headerlink" title="练习12.27"></a>练习12.27</h2><blockquote><p><code>TextQuery</code> 和 <code>QueryResult</code> 类只使用了我们已经介绍过的语言和标准库特性。不要提前看后续章节内容，只用已经学到的知识对这两个类编写你自己的版本。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EX12_27_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EX12_27_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">class</span> <span class="token class-name">QueryResult</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TextQuery</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">using</span> line_no <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span><span class="token function">TextQuery</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ifstream<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QueryResult <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">>></span> file<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>line_no<span class="token operator">>></span><span class="token operator">></span> wm<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QueryResult</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">QueryResult</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>TextQuery<span class="token double-colon punctuation">::</span>line_no<span class="token operator">>></span> p<span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">>></span> f<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">sought</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lines</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">file</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string sought<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>TextQuery<span class="token double-colon punctuation">::</span>line_no<span class="token operator">>></span> lines<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">>></span> file<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_12_27.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token class-name">TextQuery</span><span class="token double-colon punctuation">::</span><span class="token function">TextQuery</span><span class="token punctuation">(</span>ifstream<span class="token operator">&amp;</span> ifs<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token keyword">new</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string text<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>file<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> file<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>istringstream <span class="token function">line</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>string word<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">>></span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>lines <span class="token operator">=</span> wm<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lines<span class="token punctuation">)</span>lines<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">new</span> set<span class="token operator">&lt;</span>line_no<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>lines<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>QueryResult <span class="token class-name">TextQuery</span><span class="token double-colon punctuation">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> shared_ptr<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span>line_no<span class="token operator">>></span> <span class="token function">nodata</span><span class="token punctuation">(</span><span class="token keyword">new</span> set<span class="token operator">&lt;</span>line_no<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> loc <span class="token operator">=</span> wm<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">==</span> wm<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">QueryResult</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> nodata<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">QueryResult</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> loc<span class="token operator">-></span>second<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> QueryResult<span class="token operator">&amp;</span> qr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> qr<span class="token punctuation">.</span>sought <span class="token operator">&lt;&lt;</span> <span class="token string">" occurs "</span> <span class="token operator">&lt;&lt;</span> qr<span class="token punctuation">.</span>lines<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token string">"time"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>qr<span class="token punctuation">.</span>lines<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"s"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> num <span class="token operator">:</span> <span class="token operator">*</span>qr<span class="token punctuation">.</span>lines<span class="token punctuation">)</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"\t(line "</span> <span class="token operator">&lt;&lt;</span> num <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>qr<span class="token punctuation">.</span>file<span class="token operator">-></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_12_27.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">runQueries</span><span class="token punctuation">(</span>ifstream<span class="token operator">&amp;</span> infile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>TextQuery <span class="token function">tq</span><span class="token punctuation">(</span>infile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter word to look for, or q to quit: "</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"q"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span> tq<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"storyDataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">runQueries</span><span class="token punctuation">(</span>ifs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-28"><a href="#练习12-28" class="headerlink" title="练习12.28"></a>练习12.28</h2><blockquote><p>编写程序实现文本查询，不要定义类来管理数据。你的程序应该接受一个文件，并与用户交互来查询单词。使用<code>vector</code>、<code>map</code> 和 <code>set</code> 容器来保存来自文件的数据并生成查询结果。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"H:/code/C++/Cpp_Primer_Answers/data/storyDataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> input<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span> dictionary<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> lineNo<span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>string line<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>lineNo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>input<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istringstream <span class="token function">line_stream</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>string text<span class="token punctuation">,</span> word<span class="token punctuation">;</span> line_stream <span class="token operator">>></span> text<span class="token punctuation">;</span> word<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">remove_copy_if</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">back_inserter</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">,</span> ispunct<span class="token punctuation">)</span><span class="token punctuation">;</span>dictionary<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>lineNo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter word to look for, or q to quit: "</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"q"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">auto</span> found <span class="token operator">=</span> dictionary<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>found <span class="token operator">!=</span> dictionary<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" occurs "</span> <span class="token operator">&lt;&lt;</span> found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>found<span class="token operator">-></span>second<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">" times"</span> <span class="token operator">:</span> <span class="token string">" time"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> found<span class="token operator">-></span>second<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\t(line "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" occurs 0 time"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习12-29"><a href="#练习12-29" class="headerlink" title="练习12.29"></a>练习12.29</h2><blockquote><p>我们曾经用<code>do while</code> 循环来编写管理用户交互的循环。用<code>do while</code> 重写本节程序，解释你倾向于哪个版本，为什么？</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter word to look for, or q to quit: "</span><span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"q"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> tq<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我更喜欢 <code>while</code>，这可能是习惯的问题。</p><h2 id="练习12-30"><a href="#练习12-30" class="headerlink" title="练习12.30"></a>练习12.30</h2><blockquote><p>定义你自己版本的 <code>TextQuery</code> 和 <code>QueryResult</code> 类，并执行12.3.1节中的<code>runQueries</code> 函数。</p></blockquote><p>解：</p><p>同12.27。</p><h2 id="练习12-31"><a href="#练习12-31" class="headerlink" title="练习12.31"></a>练习12.31</h2><blockquote><p>如果用<code>vector</code> 代替 <code>set</code> 保存行号，会有什么差别？哪个方法更好？为什么？</p></blockquote><p>如果用 <code>vector</code> 则会有单词重复的情况出现。而这里保存的是行号，不需要重复元素，所以 <code>set</code> 更好。</p><h2 id="练习12-32"><a href="#练习12-32" class="headerlink" title="练习12.32"></a>练习12.32</h2><blockquote><p>重写 <code>TextQuery</code> 和 <code>QueryResult</code>类，用<code>StrBlob</code> 代替 <code>vector&lt;string&gt;</code> 保存输入文件。</p></blockquote><p>解：</p><p><code>TextQuery</code> 和 <code>QueryResult</code> 类中的 <code>file</code> 成员，改为 指向 <code>StrBlob</code> 的智能指针。在访问 <code>StrBlob</code> 时，要使用 <code>StrBlobPtr</code>。</p><h2 id="练习12-33"><a href="#练习12-33" class="headerlink" title="练习12.33"></a>练习12.33</h2><blockquote><p>在第15章中我们将扩展查询系统，在 <code>QueryResult</code> 类中将会需要一些额外的成员。添加名为 <code>begin</code> 和 <code>end</code> 的成员，返回一个迭代器，指向一个给定查询返回的行号的 <code>set</code> 中的位置。再添加一个名为 <code>get_file</code> 的成员，返回一个 <code>shared_ptr</code>，指向 <code>QueryResult</code> 对象中的文件。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QueryResult</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">using</span> Iter <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>line_no<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">;</span><span class="token comment">// ...</span>Iter <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> lines<span class="token operator">-></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>Iter <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> lines<span class="token operator">-></span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">>></span> <span class="token function">get_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案6</title>
      <link href="2021/04/10/excersize/ch06/"/>
      <url>2021/04/10/excersize/ch06/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-函数"><a href="#第六章-函数" class="headerlink" title="第六章 函数"></a>第六章 函数</h1><h2 id="练习6-1"><a href="#练习6-1" class="headerlink" title="练习6.1"></a>练习6.1</h2><p>实参和形参的区别的什么？</p><p>解：</p><p>实参是函数调用的实际值，是形参的初始值。</p><h2 id="练习6-2"><a href="#练习6-2" class="headerlink" title="练习6.2"></a>练习6.2</h2><p>请指出下列函数哪个有错误，为什么？应该如何修改这些错误呢？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         string s<span class="token punctuation">;</span>         <span class="token comment">// ...</span>         <span class="token keyword">return</span> s<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">double</span> <span class="token function">square</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>应该改为下面这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> string <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         string s<span class="token punctuation">;</span>         <span class="token comment">// ...</span>         <span class="token keyword">return</span> s<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">double</span> <span class="token function">square</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-3"><a href="#练习6-3" class="headerlink" title="练习6.3"></a>练习6.3</h2><p>编写你自己的<code>fact</code>函数，上机检查是否正确。注：阶乘。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>runtime_error <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"Input cannot be a negative number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> err<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> i <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>boolalpha <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">120</span> <span class="token operator">==</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用<code>std::boolalpha</code>，可以输出 <code>&quot;true&quot;</code>或者 <code>&quot;false&quot;</code>。</p><h2 id="练习6-4"><a href="#练习6-4" class="headerlink" title="练习6.4"></a>练习6.4</h2><p>编写一个与用户交互的函数，要求用户输入一个数字，计算生成该数字的阶乘。在main函数中调用该函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> i <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">interactive_fact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token string">"Enter a number within [1, 13) :\n"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span> out_of_range <span class="token operator">=</span> <span class="token string">"Out of range, please try again.\n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> prompt<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> i<span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> out_of_range<span class="token punctuation">;</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">fact</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">interactive_fact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-5"><a href="#练习6-5" class="headerlink" title="练习6.5"></a>练习6.5</h2><p>编写一个函数输出其实参的绝对值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-6"><a href="#练习6-6" class="headerlink" title="练习6.6"></a>练习6.6</h2><p>说明形参、局部变量以及局部静态变量的区别。编写一个函数，同时达到这三种形式。</p><p>解：</p><p>形参定义在函数形参列表里面；局部变量定义在代码块里面；<br>局部静态变量在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序终止时才被销毁。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 例子</span><span class="token keyword">int</span> <span class="token function">count_add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>       <span class="token comment">// n是形参</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// ctr 是局部静态变量</span>    ctr <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> ctr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token comment">// i 是局部变量</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token function">count_add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-7"><a href="#练习6-7" class="headerlink" title="练习6.7"></a>练习6.7</h2><p>编写一个函数，当它第一次被调用时返回0，以后每次被调用返回值加1。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> ctr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-8"><a href="#练习6-8" class="headerlink" title="练习6.8"></a>练习6.8</h2><p>编写一个名为Chapter6.h 的头文件，令其包含6.1节练习中的函数声明。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token comment">//参考：https://blog.csdn.net/fightingforcv/article/details/51472586</span>T <span class="token function">abs</span><span class="token punctuation">(</span>T i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-9-fact-cc-factMain-cc"><a href="#练习6-9-fact-cc-factMain-cc" class="headerlink" title="练习6.9 : fact.cc | factMain.cc"></a>练习6.9 : fact.cc | factMain.cc</h2><p>编写你自己的fact.cc 和factMain.cc ，这两个文件都应该包含上一小节的练习中编写的 Chapter6.h 头文件。通过这些文件，理解你的编译器是如何支持分离式编译的。</p><p>解：</p><p>fact.cc：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Chapter6.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>val<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"input a number: "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">*=</span> n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>factMain.cc：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Chapter6.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5! is "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9.78</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译： <code>g++ factMain.cpp fact.cpp -o main</code></p><h2 id="练习6-10"><a href="#练习6-10" class="headerlink" title="练习6.10"></a>练习6.10</h2><p>编写一个函数，使用指针形参交换两个整数的值。<br>在代码中调用该函数并输出交换后的结果，以此验证函数的正确性。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> lhs<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span>tmp <span class="token operator">=</span> <span class="token operator">*</span>lhs<span class="token punctuation">;</span><span class="token operator">*</span>lhs <span class="token operator">=</span> <span class="token operator">*</span>rhs<span class="token punctuation">;</span><span class="token operator">*</span>rhs <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lft<span class="token punctuation">,</span> rht<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please Enter:\n"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> lft <span class="token operator">>></span> rht<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lft<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rht<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> lft <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rht <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-11"><a href="#练习6-11" class="headerlink" title="练习6.11"></a>练习6.11</h2><p>编写并验证你自己的reset函数，使其作用于引用类型的参数。注：reset即置0。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token function">reset</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i  <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-12"><a href="#练习6-12" class="headerlink" title="练习6.12"></a>练习6.12</h2><p>改写6.2.1节练习中的程序，使其引用而非指针交换两个整数的值。你觉得哪种方法更易于使用呢？为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    lhs <span class="token operator">=</span> rhs<span class="token punctuation">;</span>    rhs <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please Enter:\n"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> left <span class="token operator">>></span> right<span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> left <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> right <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显引用更好用。</p><h2 id="练习6-13"><a href="#练习6-13" class="headerlink" title="练习6.13"></a>练习6.13</h2><p>假设<code>T</code>是某种类型的名字，说明以下两个函数声明的区别：<br>一个是<code>void f(T)</code>, 另一个是<code>void f(&amp;T)</code>。</p><p>解：</p><p><code>void f(T)</code>的参数通过值传递，在函数中<code>T</code>是实参的副本，改变<code>T</code>不会影响到原来的实参。<br><code>void f(&amp;T)</code>的参数通过引用传递，在函数中的<code>T</code>是实参的引用，<code>T</code>的改变也就是实参的改变。</p><h2 id="练习6-14"><a href="#练习6-14" class="headerlink" title="练习6.14"></a>练习6.14</h2><p>举一个形参应该是引用类型的例子，再举一个形参不能是引用类型的例子。</p><p>解：</p><p>例如交换两个整数的函数，形参应该是引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> lhs<span class="token punctuation">;</span>lhs <span class="token operator">=</span> rhs<span class="token punctuation">;</span>rhs <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当实参的值是右值时，形参不能为引用类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-15"><a href="#练习6-15" class="headerlink" title="练习6.15"></a>练习6.15</h2><p>说明<code>find_char</code>函数中的三个形参为什么是现在的类型，特别说明为什么<code>s</code>是常量引用而<code>occurs</code>是普通引用？<br>为什么<code>s</code>和<code>occurs</code>是引用类型而<code>c</code>不是？<br>如果令<code>s</code>是普通引用会发生什么情况？<br>如果令<code>occurs</code>是常量引用会发生什么情况？</p><p>解：</p><ul><li>因为字符串可能很长，因此使用引用避免拷贝；</li><li>而在函数中我们不希望改变<code>s</code>的内容，所以令<code>s</code>为常量。</li><li><code>occurs</code>是要传到函数外部的变量，所以使用引用，<code>occurs</code>的值会改变，所以是普通引用。</li><li>因为我们只需要<code>c</code>的值，这个实参可能是右值(右值实参无法用于引用形参)，所以<code>c</code>不能用引用类型。</li><li>如果<code>s</code>是普通引用，也可能会意外改变原来字符串的内容。</li><li><code>occurs</code>如果是常量引用，那么意味着不能改变它的值，那也就失去意义了。</li></ul><h2 id="练习6-16"><a href="#练习6-16" class="headerlink" title="练习6.16"></a>练习6.16</h2><p>下面的这个函数虽然合法，但是不算特别有用。指出它的局限性并设法改善。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>局限性在于常量字符串和字符串字面值无法作为该函数的实参，如果下面这样调用是非法的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> string str<span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非法</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以要将这个函数的形参定义为常量引用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习6-17"><a href="#练习6-17" class="headerlink" title="练习6.17"></a>练习6.17</h2><p>编写一个函数，判断<code>string</code>对象中是否含有大写字母。<br>编写另一个函数，把<code>string</code>对象全部改写成小写形式。<br>在这两个函数中你使用的形参类型相同吗？为什么？</p><p>解：</p><p>两个函数的形参不一样。第一个函数使用常量引用，第二个函数使用普通引用。</p><h2 id="练习6-18"><a href="#练习6-18" class="headerlink" title="练习6.18"></a>练习6.18</h2><p>为下面的函数编写函数声明，从给定的名字中推测函数具备的功能。</p><ul><li>(a) 名为<code>compare</code>的函数，返回布尔值，两个参数都是<code>matrix</code>类的引用。</li><li>(b) 名为<code>change_val</code>的函数，返回<code>vector</code>的迭代器，有两个参数：一个是<code>int</code>，另一个是<code>vector</code>的迭代器。</li></ul><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>matrix <span class="token operator">&amp;</span>m1<span class="token punctuation">,</span> matrix <span class="token operator">&amp;</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">change_val</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习6-19"><a href="#练习6-19" class="headerlink" title="练习6.19"></a>练习6.19</h2><p>假定有如下声明，判断哪个调用合法、哪个调用不合法。对于不合法的函数调用，说明原因。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">23.4</span><span class="token punctuation">,</span> <span class="token number">55.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"abcda"</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">sum</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 不合法。<code>calc</code>只有一个参数。</li><li>(b) 合法。</li><li>(c) 合法。</li><li>(d) 合法。</li></ul><h2 id="练习6-20"><a href="#练习6-20" class="headerlink" title="练习6.20"></a>练习6.20</h2><p>引用形参什么时候应该是常量引用？如果形参应该是常量引用，而我们将其设为了普通引用，会发生什么情况？</p><p>解：</p><p>应该尽量将引用形参设为常量引用，除非有明确的目的是为了改变这个引用变量。<br>如果形参应该是常量引用，而我们将其设为了普通引用，那么常量实参将无法作用于普通引用形参。</p><h2 id="练习6-21"><a href="#练习6-21" class="headerlink" title="练习6.21"></a>练习6.21</h2><p>编写一个函数，令其接受两个参数：一个是<code>int</code>型的数，另一个是<code>int</code>指针。<br>函数比较<code>int</code>的值和指针所指的值，返回较大的那个。<br>在该函数中指针的类型应该是什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">larger_one</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">larger_one</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是<code>const int *</code>类型。</p><h2 id="练习6-22"><a href="#练习6-22" class="headerlink" title="练习6.22"></a>练习6.22</h2><p>编写一个函数，令其交换两个<code>int</code>指针。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&amp;</span> lft<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">&amp;</span> rht<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> tmp <span class="token operator">=</span> lft<span class="token punctuation">;</span>    lft <span class="token operator">=</span> rht<span class="token punctuation">;</span>    rht <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> lft <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>    <span class="token keyword">auto</span> rht <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lft<span class="token punctuation">,</span> rht<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>lft <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>rht <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-23"><a href="#练习6-23" class="headerlink" title="练习6.23"></a>练习6.23</h2><p>参考本节介绍的几个<code>print</code>函数，根据理解编写你自己的版本。<br>依次调用每个函数使其输入下面定义的<code>i</code>和<code>j</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>begin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>end<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pi <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>beg<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>beg <span class="token operator">!=</span> end<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>beg<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> ia<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pezy"</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">begin</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token function">end</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">begin</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-24"><a href="#练习6-24" class="headerlink" title="练习6.24"></a>练习6.24</h2><p>描述下面这个函数的行为。如果代码中存在问题，请指出并改正。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> ia<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>当数组作为实参的时候，会被自动转换为指向首元素的指针。<br>因此函数形参接受的是一个指针。<br>如果要让这个代码成功运行(不更改也可以运行），可以将形参改为数组的引用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>ia<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> ia<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-25"><a href="#练习6-25" class="headerlink" title="练习6.25"></a>练习6.25</h2><p>编写一个<code>main</code>函数，令其接受两个实参。把实参的内容连接成一个<code>string</code>对象并输出出来。</p><h2 id="练习6-26"><a href="#练习6-26" class="headerlink" title="练习6.26"></a>练习6.26</h2><p>编写一个程序，使其接受本节所示的选项；输出传递给<code>main</code>函数的实参内容。</p><p>解：</p><p>包括6.25</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> argc<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        str <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-27"><a href="#练习6-27" class="headerlink" title="练习6.27"></a>练习6.27</h2><p>编写一个函数，它的参数是<code>initializer_list</code>类型的对象，函数的功能是计算列表中所有元素的和。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> il<span class="token punctuation">)</span> sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> il <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-28"><a href="#练习6-28" class="headerlink" title="练习6.28"></a>练习6.28</h2><p>在<code>error_msg</code>函数的第二个版本中包含<code>ErrCode</code>类型的参数，其中循环内的<code>elem</code>是什么类型？</p><p>解：</p><p><code>elem</code>是<code>const string &amp;</code>类型。</p><h2 id="练习6-29"><a href="#练习6-29" class="headerlink" title="练习6.29"></a>练习6.29</h2><p>在范围<code>for</code>循环中使用<code>initializer_list</code>对象时，应该将循环控制变量声明成引用类型吗？为什么？</p><p>解：</p><p>应该使用常量引用类型。<code>initializer_list</code>对象中的元素都是常量，我们无法修改<code>initializer_list</code>对象中的元素的值。</p><h2 id="练习6-30"><a href="#练习6-30" class="headerlink" title="练习6.30"></a>练习6.30</h2><p>编译第200页的<code>str_subrange</code>函数，看看你的编译器是如何处理函数中的错误的。</p><p>解：</p><p>编译器信息：</p><pre class="line-numbers language-none"><code class="language-none">g++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译错误信息：</p><pre class="line-numbers language-none"><code class="language-none">ch6.cpp:38:9: error: return-statement with no value, in function returning ‘bool’ [-fpermissive]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习6-31"><a href="#练习6-31" class="headerlink" title="练习6.31"></a>练习6.31</h2><p>什么情况下返回的引用无效？什么情况下返回常量的引用无效？</p><p>解：</p><p>当返回的引用的对象是局部变量时，返回的引用无效；当我们希望返回的对象被修改时，返回常量的引用无效。</p><h2 id="练习6-32"><a href="#练习6-32" class="headerlink" title="练习6.32"></a>练习6.32</h2><p>下面的函数合法吗？如果合法，说明其功能；如果不合法，修改其中的错误并解释原因。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ia<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">get</span><span class="token punctuation">(</span>ia<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>合法。<code>get</code>函数根据索引取得数组中的元素的引用。</p><h2 id="练习6-33"><a href="#练习6-33" class="headerlink" title="练习6.33"></a>练习6.33</h2><p>编写一个递归函数，输出<code>vector</code>对象的内容。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> Iter <span class="token operator">=</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Iter first<span class="token punctuation">,</span> Iter last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> last<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">++</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-34"><a href="#练习6-34" class="headerlink" title="练习6.34"></a>练习6.34</h2><p>如果<code>factorial</code>函数的停止条件如下所示，将发生什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：<br>如果<code>val</code>为正数，从结果上来说没有区别（多乘了个1）;<br>如果<code>val</code>为负数，那么递归永远不会结束。</p><h2 id="练习6-35"><a href="#练习6-35" class="headerlink" title="练习6.35"></a>练习6.35</h2><p>在调用<code>factorial</code>函数时，为什么我们传入的值是<code>val-1</code>而非<code>val--</code>？</p><p>解：</p><p>如果传入的值是<code>val--</code>，那么将会永远传入相同的值来调用该函数，递归将永远不会结束。</p><h2 id="练习6-36"><a href="#练习6-36" class="headerlink" title="练习6.36"></a>练习6.36</h2><p>编写一个函数声明，使其返回数组的引用并且该数组包含10个<code>string</code>对象。<br>不用使用尾置返回类型、<code>decltype</code>或者类型别名。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">string</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习6-37"><a href="#练习6-37" class="headerlink" title="练习6.37"></a>练习6.37</h2><p>为上一题的函数再写三个声明，一个使用类型别名，另一个使用尾置返回类型，最后一个使用<code>decltype</code>关键字。<br>你觉得哪种形式最好？为什么？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> string str_arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>str_arr<span class="token operator">&amp;</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&amp;</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我觉得尾置返回类型最好，就一行代码。</p><h2 id="练习6-38"><a href="#练习6-38" class="headerlink" title="练习6.38"></a>练习6.38</h2><p>修改<code>arrPtr</code>函数，使其返回数组的引用。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">decltype</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token operator">&amp;</span> <span class="token function">arrPtr</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> odd <span class="token operator">:</span> even<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-39"><a href="#练习6-39" class="headerlink" title="练习6.39"></a>练习6.39</h2><p>说明在下面的每组声明中第二条语句是何含义。<br>如果有非法的声明，请指出来。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 非法。因为顶层const不影响传入函数的对象，所以第二个声明无法与第一个声明区分开来。</li><li>(b) 非法。对于重载的函数来说，它们应该只有形参的数量和形参的类型不同。返回值与重载无关。</li><li>(c) 合法。</li></ul><h2 id="练习6-40"><a href="#练习6-40" class="headerlink" title="练习6.40"></a>练习6.40</h2><p>下面的哪个声明是错误的？为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">ff</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> ht <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token keyword">int</span> wd<span class="token punctuation">,</span> <span class="token keyword">char</span> bckgrnd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>(a) 正确。<br>(b) 错误。因为一旦某个形参被赋予了默认值，那么它之后的形参都必须要有默认值。</p><h2 id="练习6-41"><a href="#练习6-41" class="headerlink" title="练习6.41"></a>练习6.41</h2><p>下面的哪个调用是非法的？为什么？哪个调用虽然合法但显然与程序员的初衷不符？为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> ht<span class="token punctuation">,</span> <span class="token keyword">int</span> wd <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token keyword">char</span> bckgrnd <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 非法。第一个参数不是默认参数，最少需要一个实参。</li><li>(b) 合法。</li><li>(c) 合法，但与初衷不符。字符<code>*</code>被解释成<code>int</code>传入到了第二个参数。而初衷是要传给第三个参数。</li></ul><h2 id="练习6-42"><a href="#练习6-42" class="headerlink" title="练习6.42"></a>练习6.42</h2><p>给<code>make_plural</code>函数的第二个形参赋予默认实参’s’, 利用新版本的函数输出单词success和failure的单数和复数形式。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>string <span class="token function">make_plural</span><span class="token punctuation">(</span>size_t ctr<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> word<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> ending <span class="token operator">=</span> <span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>ctr <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> word <span class="token operator">+</span> ending <span class="token operator">:</span> word<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"single: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">make_plural</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token string">"es"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">make_plural</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"failure"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"plural : "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">make_plural</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> <span class="token string">"es"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> <span class="token function">make_plural</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"failure"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-43"><a href="#练习6-43" class="headerlink" title="练习6.43"></a>练习6.43</h2><p>你会把下面的哪个声明和定义放在头文件中？哪个放在源文件中？为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> BigInt<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">putValues</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>全部都放进头文件。(a) 是内联函数，(b) 是声明。</p><h2 id="练习6-44"><a href="#练习6-44" class="headerlink" title="练习6.44"></a>练习6.44</h2><p>将6.2.2节的<code>isShorter</code>函数改写成内联函数。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">is_shorter</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>lft<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>rht<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lft<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rht<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-45"><a href="#练习6-45" class="headerlink" title="练习6.45"></a>练习6.45</h2><p>回顾在前面的练习中你编写的那些函数，它们应该是内联函数吗？<br>如果是，将它们改写成内联函数；如果不是，说明原因。</p><p>解：</p><p>一般来说，内联机制用于优化规模小、流程直接、频繁调用的函数。</p><h2 id="练习6-46"><a href="#练习6-46" class="headerlink" title="练习6.46"></a>练习6.46</h2><p>能把<code>isShorter</code>函数定义成<code>constexpr</code>函数吗？<br>如果能，将它改写成<code>constxpre</code>函数；如果不能，说明原因。</p><p>解：</p><p>不能。<code>constexpr</code>函数的返回值类型及所有形参都得是字面值类型。</p><h2 id="练习6-47"><a href="#练习6-47" class="headerlink" title="练习6.47"></a>练习6.47</h2><p>改写6.3.2节练习中使用递归输出<code>vector</code>内容的程序，使其有条件地输出与执行过程有关的信息。<br>例如，每次调用时输出<code>vector</code>对象的大小。<br>分别在打开和关闭调试器的情况下编译并执行这个程序。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printVec</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">NDEBUG</span></span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"vector size: "</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> tmp <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printVec</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> tmp <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printVec</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-48"><a href="#练习6-48" class="headerlink" title="练习6.48"></a>练习6.48</h2><p>说明下面这个循环的含义，它对assert的使用合理吗？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">&amp;&amp;</span> s <span class="token operator">!=</span> sought<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//空函数体</span><span class="token function">assert</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>不合理。从这个程序的意图来看，应该用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">assert</span><span class="token punctuation">(</span>s <span class="token operator">==</span> sought<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习6-49"><a href="#练习6-49" class="headerlink" title="练习6.49"></a>练习6.49</h2><p>什么是候选函数？什么是可行函数？</p><p>解：</p><p>候选函数：与被调用函数同名，并且其声明在调用点可见。<br>可行函数：形参与实参的数量相等，并且每个实参类型与对应的形参类型相同或者能转换成形参的类型。</p><h2 id="练习6-50"><a href="#练习6-50" class="headerlink" title="练习6.50"></a>练习6.50</h2><p>已知有第217页对函数<code>f</code>的声明，对于下面的每一个调用列出可行函数。<br>其中哪个函数是最佳匹配？<br>如果调用不合法，是因为没有可匹配的函数还是因为调用具有二义性？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2.56</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2.56</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) <code>void f(int, int);</code>和<code>void f(double, double = 3.14);</code>是可行函数。<br>该调用具有二义性而不合法。</li><li>(b) <code>void f(int);</code> 是可行函数。调用合法。</li><li>(c) <code>void f(int, int);</code>和<code>void f(double, double = 3.14);</code>是可行函数。<br><code>void f(int, int);</code>是最佳匹配。</li><li>(d) <code>void f(int, int);</code>和<code>void f(double, double = 3.14);</code>是可行函数。<br><code>void f(double, double = 3.14);</code>是最佳匹配。</li></ul><h2 id="练习6-51"><a href="#练习6-51" class="headerlink" title="练习6.51"></a>练习6.51</h2><p>编写函数<code>f</code>的4版本，令其各输出一条可以区分的消息。<br>验证上一个练习的答案，如果你的回答错了，反复研究本节内容直到你弄清自己错在何处。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(int)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(int, int)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"f(double, double)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//f(2.56, 42); // error: 'f' is ambiguous.</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2.56</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-52"><a href="#练习6-52" class="headerlink" title="练习6.52"></a>练习6.52</h2><p>已知有如下声明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">manip</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> dobj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>请指出下列调用中每个类型转换的等级。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">manip</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">manip</span><span class="token punctuation">(</span><span class="token number">55.4</span><span class="token punctuation">,</span> dobj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 第3级。类型提升实现的匹配。</li><li>(b) 第4级。算术类型转换实现的匹配。</li></ul><h2 id="练习6-53"><a href="#练习6-53" class="headerlink" title="练习6.53"></a>练习6.53</h2><p>说明下列每组声明中的第二条语句会产生什么影响，并指出哪些不合法（如果有的话）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>(c) 不合法。顶层const不影响传入函数的对象。</p><h2 id="练习6-54"><a href="#练习6-54" class="headerlink" title="练习6.54"></a>练习6.54</h2><p>编写函数的声明，令其接受两个<code>int</code>形参并返回类型也是<code>int</code>；然后声明一个<code>vector</code>对象，令其元素是指向该函数的指针。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习6-55"><a href="#练习6-55" class="headerlink" title="练习6.55"></a>练习6.55</h2><p>编写4个函数，分别对两个<code>int</code>值执行加、减、乘、除运算；在上一题创建的<code>vector</code>对象中保存指向这些函数的指针。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> b <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">/</span> b <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>subtract<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>divide<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习6-56"><a href="#练习6-56" class="headerlink" title="练习6.56"></a>练习6.56</h2><p>调用上述<code>vector</code>对象中的每个元素并输出结果。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">></span> vec<span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> subtract<span class="token punctuation">,</span> multiply<span class="token punctuation">,</span> divide <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> f <span class="token operator">:</span> vec<span class="token punctuation">)</span>          std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案15</title>
      <link href="2021/04/10/excersize/ch15/"/>
      <url>2021/04/10/excersize/ch15/</url>
      
        <content type="html"><![CDATA[<h1 id="第十五章-面向对象程序设计"><a href="#第十五章-面向对象程序设计" class="headerlink" title="第十五章 面向对象程序设计"></a>第十五章 面向对象程序设计</h1><h2 id="练习15-1"><a href="#练习15-1" class="headerlink" title="练习15.1"></a>练习15.1</h2><blockquote><p>什么是虚成员？</p></blockquote><p>解：</p><p>对于某些函数，基类希望它的派生类各自定义适合自身的版本，此时基类就将这些函数声明成虚函数。</p><h2 id="练习15-2"><a href="#练习15-2" class="headerlink" title="练习15.2"></a>练习15.2</h2><blockquote><p><code>protected</code> 访问说明符与 <code>private</code> 有何区别？</p></blockquote><p>解：</p><ul><li><code>protected</code> ： 基类和和其派生类还有友元可以访问。</li><li><code>private</code> ： 只有基类本身和友元可以访问。</li></ul><h2 id="练习15-3"><a href="#练习15-3" class="headerlink" title="练习15.3"></a>练习15.3</h2><blockquote><p>定义你自己的 <code>Quote</code> 类和 <code>print_total</code> 函数。</p></blockquote><p>解：</p><p><code>Quote</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Quote</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">price</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">*</span> price<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">double</span>  price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_15_3.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token keyword">double</span> <span class="token function">print_total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> item<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">print_total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Quote <span class="token operator">&amp;</span>item<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> ret <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">net_price</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"ISBN:"</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"# sold: "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" total due: "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-4"><a href="#练习15-4" class="headerlink" title="练习15.4"></a>练习15.4</h2><blockquote><p>下面哪条声明语句是不正确的？请解释原因。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Derived</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 不正确。类不能派生自身。</li><li>(b) 不正确。这是定义而非声明。</li><li>(c) 不正确。派生列表不能出现在这。</li></ul><h2 id="练习15-5"><a href="#练习15-5" class="headerlink" title="练习15.5"></a>练习15.5</h2><blockquote><p>定义你自己的 <code>Bulk_quote</code> 类。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_15_3.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t q<span class="token punctuation">,</span> <span class="token keyword">double</span> disc<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">Quote</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min_qty</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">discount</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>size_t min_qty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span>      discount <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-6"><a href="#练习15-6" class="headerlink" title="练习15.6"></a>练习15.6</h2><blockquote><p>将 <code>Quote</code> 和 <code>Bulk_quote</code> 的对象传给15.2.1节练习中的 <code>print_total</code> 函数，检查该函数是否正确。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_15_3.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_15_5.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">double</span> <span class="token function">print_total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> item<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ex15.6</span>Quote <span class="token function">q</span><span class="token punctuation">(</span><span class="token string">"textbook"</span><span class="token punctuation">,</span> <span class="token number">10.60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Bulk_quote <span class="token function">bq</span><span class="token punctuation">(</span><span class="token string">"textbook"</span><span class="token punctuation">,</span> <span class="token number">10.60</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> bq<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">print_total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Quote <span class="token operator">&amp;</span>item<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> ret <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">net_price</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"ISBN:"</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"# sold: "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" total due: "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-7"><a href="#练习15-7" class="headerlink" title="练习15.7"></a>练习15.7</h2><blockquote><p>定义一个类使其实现一种数量受限的折扣策略，具体策略是：当购买书籍的数量不超过一个给定的限量时享受折扣，如果购买量一旦超过了限量，则超出的部分将以原价销售。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_15_5.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Limit_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Limit_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Limit_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t max<span class="token punctuation">,</span> <span class="token keyword">double</span> disc<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">Quote</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max_qty</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">discount</span><span class="token punctuation">(</span>disc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>size_t max_qty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span>      discount <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token class-name">Limit_quote</span><span class="token double-colon punctuation">::</span><span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> max_qty<span class="token punctuation">)</span><span class="token keyword">return</span> max_qty <span class="token operator">*</span> price <span class="token operator">*</span> discount <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> max_qty<span class="token punctuation">)</span> <span class="token operator">*</span> price<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> n <span class="token operator">*</span> discount <span class="token operator">*</span>price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-8"><a href="#练习15-8" class="headerlink" title="练习15.8"></a>练习15.8</h2><blockquote><p>给出静态类型和动态类型的定义。</p></blockquote><p>解：</p><p>表达式的静态类型在编译时总是已知的，它是变量声明时的类型或表达式生成的类型。动态类型则是变量或表达式表示的内存中的对象的类型。动态类型直到运行时才可知。</p><h2 id="练习15-9"><a href="#练习15-9" class="headerlink" title="练习15.9"></a>练习15.9</h2><blockquote><p>在什么情况下表达式的静态类型可能与动态类型不同？请给出三个静态类型与动态类型不同的例子。</p></blockquote><p>解：</p><p>基类的指针或引用的静态类型可能与其动态类型不一致。</p><h2 id="练习15-10"><a href="#练习15-10" class="headerlink" title="练习15.10"></a>练习15.10</h2><blockquote><p>回忆我们在8.1节进行的讨论，解释第284页中将 <code>ifstream</code> 传递给 <code>Sales_data</code> 的<code>read</code> 函数的程序是如何工作的。</p></blockquote><p>解：</p><p><code>std::ifstream</code> 是 <code>std::istream</code> 的派生基类，因此 <code>read</code> 函数能够正常工作。</p><h2 id="练习15-11"><a href="#练习15-11" class="headerlink" title="练习15.11"></a>练习15.11</h2><blockquote><p>为你的 <code>Quote</code> 类体系添加一个名为 <code>debug</code> 的虚函数，令其分别显示每个类的数据成员。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Quote</span><span class="token double-colon punctuation">::</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"data members of this class:\n"</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">"bookNo= "</span> <span class="token operator">&lt;&lt;</span><span class="token keyword">this</span><span class="token operator">-></span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>              <span class="token operator">&lt;&lt;</span> <span class="token string">"price= "</span> <span class="token operator">&lt;&lt;</span><span class="token keyword">this</span><span class="token operator">-></span>price<span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-12"><a href="#练习15-12" class="headerlink" title="练习15.12"></a>练习15.12</h2><blockquote><p>有必要将一个成员函数同时声明成 <code>override</code> 和 <code>final</code> 吗？为什么？</p></blockquote><p>解：</p><p>有必要。<code>override</code> 的含义是重写基类中相同名称的虚函数，<code>final</code> 是阻止它的派生类重写当前虚函数。</p><h2 id="练习15-13"><a href="#练习15-13" class="headerlink" title="练习15.13"></a>练习15.13</h2><blockquote><p>给定下面的类，解释每个 <code>print</code> 函数的机理：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">base</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>string <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> basename<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> os <span class="token operator">&lt;&lt;</span> basename<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>string basename<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">base</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">print</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> os <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中存在问题吗？如果有，你该如何修改它？</p><p>解：</p><p>有问题。应该改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> base<span class="token double-colon punctuation">::</span><span class="token function">print</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> os <span class="token operator">&lt;&lt;</span> <span class="token string">" derived\n "</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习15-14"><a href="#练习15-14" class="headerlink" title="练习15.14"></a>练习15.14</h2><blockquote><p>给定上一题中的类以及下面这些对象，说明在运行时调用哪个函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">base bobj<span class="token punctuation">;</span> base <span class="token operator">*</span>bp1 <span class="token operator">=</span> <span class="token operator">&amp;</span>bobj<span class="token punctuation">;</span> base <span class="token operator">&amp;</span>br1 <span class="token operator">=</span> bobj<span class="token punctuation">;</span>derived dobj<span class="token punctuation">;</span> base <span class="token operator">*</span>bp2 <span class="token operator">=</span> <span class="token operator">&amp;</span>dobj<span class="token punctuation">;</span> base <span class="token operator">&amp;</span>br2 <span class="token operator">=</span> dobj<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> bobj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>dobj<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>bp1<span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>bp2<span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>br1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>br2<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 编译时。</li><li>(b) 编译时。</li><li>(c) 编译时。</li><li>(d) 编译时。</li><li>(e) 运行时。<code>base::print()</code></li><li>(f) 运行时。<code>derived::print()</code></li></ul><h2 id="练习15-15"><a href="#练习15-15" class="headerlink" title="练习15.15"></a>练习15.15</h2><blockquote><p>定义你自己的 <code>Disc_quote</code> 和 <code>Bulk_quote</code>。</p></blockquote><p>解：</p><p><code>Disc_quote</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"quote.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Disc_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Disc_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Disc_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t q<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token function">Quote</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">quantity</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">discount</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>size_t quantity<span class="token punctuation">;</span>    <span class="token keyword">double</span>      discount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bulk_quote</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Disc_quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t q<span class="token punctuation">,</span> <span class="token keyword">double</span> disc<span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token function">Disc_quote</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> disc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>    <span class="token keyword">void</span>  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-16"><a href="#练习15-16" class="headerlink" title="练习15.16"></a>练习15.16</h2><blockquote><p>改写你在15.2.2节练习中编写的数量受限的折扣策略，令其继承 <code>Disc_quote</code>。</p></blockquote><p>解：</p><p><code>Limit_quote</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Limit_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Disc_quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Limit_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Limit_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t max<span class="token punctuation">,</span> <span class="token keyword">double</span> disc<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">Disc_quote</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">,</span> max<span class="token punctuation">,</span> disc<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span>    <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">*</span> price <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> quantity <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">-</span> discount <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-17"><a href="#练习15-17" class="headerlink" title="练习15.17"></a>练习15.17</h2><blockquote><p>尝试定义一个 <code>Disc_quote</code> 的对象，看看编译器给出的错误信息是什么？</p></blockquote><p>解：</p><p><code>error: cannot declare variable &#39;d&#39; to be of abstract type &#39;Disc_quote&#39;: Disc_quote d;</code></p><h2 id="练习15-18"><a href="#练习15-18" class="headerlink" title="练习15.18"></a>练习15.18</h2><blockquote><p>假设给定了第543页和第544页的类，同时已知每个对象的类型如注释所示，判断下面的哪些赋值语句是合法的。解释那些不合法的语句为什么不被允许：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Base <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>d1<span class="token punctuation">;</span>  <span class="token comment">//d1 的类型是 Pub_Derv</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>d2<span class="token punctuation">;</span><span class="token comment">//d2 的类型是 Priv_Derv</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>d3<span class="token punctuation">;</span><span class="token comment">//d3 的类型是 Prot_Derv</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd1<span class="token punctuation">;</span><span class="token comment">//dd1 的类型是 Derived_from_Public</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd2<span class="token punctuation">;</span><span class="token comment">//dd2 的类型是 Derived_from_Private</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd3<span class="token punctuation">;</span><span class="token comment">//dd3 的类型是 Derived_from_Protected</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Base <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>d1<span class="token punctuation">;</span> 合法p <span class="token operator">=</span> <span class="token operator">&amp;</span>d2<span class="token punctuation">;</span> 不合法p <span class="token operator">=</span> <span class="token operator">&amp;</span>d3<span class="token punctuation">;</span> 不合法p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd1<span class="token punctuation">;</span> 合法p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd2<span class="token punctuation">;</span> 不合法p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd3<span class="token punctuation">;</span> 不合法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有在派生类是使用<code>public</code>的方式继承基类时，用户代码才可以使用派生类到基类（<code>derived-to-base</code>）的转换。</p><h2 id="练习15-19"><a href="#练习15-19" class="headerlink" title="练习15.19"></a>练习15.19</h2><blockquote><p>假设543页和544页的每个类都有如下形式的成员函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">memfcn</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于每个类，分别判断上面的函数是否合法。</p><p>解：</p><p>合法：</p><ul><li>Pub_Derv</li><li>Priv_Derv</li><li>Prot_Derv</li><li>Derived_from_Public</li><li>Derived_from_Protected<br>不合法：</li><li>Derived_from_Private</li></ul><p>这段代码是在成员函数中使用<code>Base</code>。<code>Priv_Drev</code>中的<code>Base</code>部分虽然是<code>private</code>的，但其成员函数依然可以访问；<code>Derived_from_Private</code>继承自<code>Priv_Drev</code>，不能访问<code>Priv_Drev</code>中的<code>private</code>成员，因此不合法。</p><h2 id="练习15-20"><a href="#练习15-20" class="headerlink" title="练习15.20"></a>练习15.20</h2><blockquote><p>编写代码检验你对前面两题的回答是否正确。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"exercise15_5.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"bulk_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"limit_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">pub_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// public member</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> prot_mem<span class="token punctuation">;</span>     <span class="token comment">// protected member</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">char</span> priv_mem<span class="token punctuation">;</span>    <span class="token comment">// private member</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Pub_Derv</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span>    <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">memfcn</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Priv_Derv</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span>   <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">memfcn</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Prot_Derv</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">Base</span></span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">memfcn</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived_from_Public</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Pub_Derv</span></span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">memfcn</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived_from_Private</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Priv_Derv</span></span><span class="token punctuation">&#123;</span><span class="token comment">//void memfcn(Base &amp;b) &#123; b = *this; &#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Derived_from_Protected</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Prot_Derv</span></span><span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">memfcn</span><span class="token punctuation">(</span>Base <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Pub_Derv d1<span class="token punctuation">;</span>Base <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>d1<span class="token punctuation">;</span>Priv_Derv d2<span class="token punctuation">;</span><span class="token comment">//p = &amp;d2;</span>Prot_Derv d3<span class="token punctuation">;</span><span class="token comment">//p = &amp;d3;</span>Derived_from_Public dd1<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>dd1<span class="token punctuation">;</span>Derived_from_Private dd2<span class="token punctuation">;</span><span class="token comment">//p =&amp; dd2;</span>Derived_from_Protected dd3<span class="token punctuation">;</span><span class="token comment">//p = &amp;dd3;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-21"><a href="#练习15-21" class="headerlink" title="练习15.21"></a>练习15.21</h2><blockquote><p>从下面这些一般性抽象概念中任选一个（或者选一个你自己的），将其对应的一组类型组织成一个继承体系：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> 图形文件格式（如gif、tiff、jpeg、bmp）<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 图形基元（如方格、圆、球、圆锥）<span class="token punctuation">(</span>c<span class="token punctuation">)</span> C<span class="token operator">++</span>语言中的类型（如类、函数、成员函数）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"bulk_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"limit_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token comment">// just for 2D shape</span><span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span>    Coordinate<span class="token punctuation">;</span>    <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token function">name</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> n<span class="token punctuation">,</span>              <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> a<span class="token punctuation">,</span>              <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> b<span class="token punctuation">,</span>              <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> c<span class="token punctuation">,</span>              <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token function">Shape</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">d</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    Coordinate  a<span class="token punctuation">;</span>    Coordinate  b<span class="token punctuation">;</span>    Coordinate  c<span class="token punctuation">;</span>    Coordinate  d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Rectangle</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Square</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> n<span class="token punctuation">,</span>           <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> a<span class="token punctuation">,</span>           <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> b<span class="token punctuation">,</span>           <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> c<span class="token punctuation">,</span>           <span class="token keyword">const</span> Coordinate<span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">:</span>        <span class="token function">Rectangle</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-22"><a href="#练习15-22" class="headerlink" title="练习15.22"></a>练习15.22</h2><blockquote><p>对于你在上一题中选择的类，为其添加函数的虚函数及公有成员和受保护的成员。</p></blockquote><p>解：</p><p>参考15.21。</p><h2 id="练习15-23"><a href="#练习15-23" class="headerlink" title="练习15.23"></a>练习15.23</h2><blockquote><p>假设第550页的 <code>D1</code> 类需要覆盖它继承而来的 <code>fcn</code> 函数，你应该如何对其进行修改？如果你修改之后 <code>fcn</code> 匹配了 <code>Base</code> 中的定义，则该节的那些调用语句将如何解析？</p></blockquote><p>解：</p><p>移除 <code>int</code> 参数。</p><h2 id="练习15-24"><a href="#练习15-24" class="headerlink" title="练习15.24"></a>练习15.24</h2><blockquote><p>哪种类需要虚析构函数？虚析构函数必须执行什么样的操作？</p></blockquote><p>解：</p><p>基类通常应该定义一个虚析构函数。</p><h2 id="练习15-25"><a href="#练习15-25" class="headerlink" title="练习15.25"></a>练习15.25</h2><blockquote><p>我们为什么为 <code>Disc_quote</code> 定义一个默认构造函数？如果去掉该构造函数的话会对 <code>Bulk_quote</code> 的行为产生什么影响？</p></blockquote><p>解：</p><p>因为<code>Disc_quote</code>的默认构造函数会运行<code>Quote</code>的默认构造函数，而<code>Quote</code>默认构造函数会完成成员的初始化工作。<br>如果去除掉该构造函数的话，<code>Bulk_quote</code>的默认构造函数而无法完成<code>Disc_quote</code>的初始化工作。</p><h2 id="练习15-26"><a href="#练习15-26" class="headerlink" title="练习15.26"></a>练习15.26</h2><blockquote><p>定义 <code>Quote</code> 和 <code>Bulk_quote</code> 的拷贝控制成员，令其与合成的版本行为一致。为这些成员以及其他构造函数添加打印状态的语句，使得我们能够知道正在运行哪个程序。使用这些类编写程序，预测程序将创建和销毁哪些对象。重复实验，不断比较你的预测和实际输出结果是否相同，直到预测完全准确再结束。</p></blockquote><p>解：</p><p><code>Quote</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Quote</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructing Quote\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">price</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Quote : constructor taking 2 parameters\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy constructor</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> q<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">price</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Quote: copy constructing\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move constructor</span><span class="token function">Quote</span><span class="token punctuation">(</span>Quote<span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Quote: move constructing\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// copy =</span>Quote<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">!=</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bookNo <span class="token operator">=</span> rhs<span class="token punctuation">.</span>bookNo<span class="token punctuation">;</span>price <span class="token operator">=</span> rhs<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Quote: copy =() \n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move =</span>Quote<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>Quote<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span>  <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">!=</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>bookNo <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span><span class="token punctuation">;</span>price <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Quote: move =!!!!!!!!! \n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string     <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">double</span>  <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> n <span class="token operator">*</span> price<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructing Quote\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">double</span>  price <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">inline</span><span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span>bookNo <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>bookNo<span class="token operator">&amp;&amp;</span>lhs<span class="token punctuation">.</span>price <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Bulk_quote</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Disc_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Disc_quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructing Bulk_quote\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t q<span class="token punctuation">,</span> <span class="token keyword">double</span> disc<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">Disc_quote</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> disc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : constructor taking 4 parameters\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy constructor</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> Bulk_quote<span class="token operator">&amp;</span> bq<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Disc_quote</span><span class="token punctuation">(</span>bq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : copy constructor\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move constructor</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span>Bulk_quote<span class="token operator">&amp;&amp;</span> bq<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Disc_quote</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>bq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : move constructor\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy =()</span>Bulk_quote<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Bulk_quote<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Disc_quote<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : copy =()\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move =()</span>Bulk_quote<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>Bulk_quote<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span>Disc_quote<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : move =()\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructing Bulk_quote\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序输出结果：</p><pre class="line-numbers language-none"><code class="language-none">default constructing Quotedefault constructing Disc_quotedefault constructing Bulk_quoteQuote : constructor taking 2 parametersDisc_quote : constructor taking 4 parameters.Bulk_quote : constructor taking 4 parametersQuote: copy constructingQuote: copy constructingdestructing Quotedestructing QuoteDisc_quote : move &#x3D;()Bulk_quote : move &#x3D;()destructing Bulk_quotedestructing Dis_quotedestructing Quotedestructing Bulk_quotedestructing Dis_quotedestructing Quote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-27"><a href="#练习15-27" class="headerlink" title="练习15.27"></a>练习15.27</h2><blockquote><p>重新定义你的 <code>Bulk_quote</code> 类，令其继承构造函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Bulk_quote</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Disc_quote</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"default constructing Bulk_quote\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// changed the below to the inherited constructor for ex15.27.</span><span class="token comment">// rules:  1. only inherit from the direct base class.</span><span class="token comment">//         2. default, copy and move constructors can not inherit.</span><span class="token comment">//         3. any data members of its own are default initialized.</span><span class="token comment">//         4. the rest details are in the section section 15.7.4.</span><span class="token comment">/*Bulk_quote(const std::string&amp; b, double p, std::size_t q, double disc) :Disc_quote(b, p, q, disc) &#123; std::cout &lt;&lt; "Bulk_quote : constructor taking 4 parameters\n"; &#125;*/</span><span class="token keyword">using</span> Disc_quote<span class="token double-colon punctuation">::</span>Disc_quote<span class="token punctuation">;</span><span class="token comment">// copy constructor</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token keyword">const</span> Bulk_quote<span class="token operator">&amp;</span> bq<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Disc_quote</span><span class="token punctuation">(</span>bq<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : copy constructor\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move constructor</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span>Bulk_quote<span class="token operator">&amp;&amp;</span> bq<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Disc_quote</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>bq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : move constructor\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy =()</span>Bulk_quote<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Bulk_quote<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Disc_quote<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : copy =()\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move =()</span>Bulk_quote<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>Bulk_quote<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Disc_quote<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bulk_quote : move =()\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">net_price</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructing Bulk_quote\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-28"><a href="#练习15-28" class="headerlink" title="练习15.28"></a>练习15.28</h2><blockquote><p>定义一个存放 <code>Quote</code> 对象的 <code>vector</code>，将 <code>Bulk_quote</code> 对象传入其中。计算 <code>vector</code> 中所有元素总的 <code>net_price</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"bulk_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"limit_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*** @brief ex15.28   outcome == 9090*/</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Quote<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">10.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> b <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>total <span class="token operator">+=</span> b<span class="token punctuation">.</span><span class="token function">net_price</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"======================\n\n"</span><span class="token punctuation">;</span><span class="token comment">/*** @brief ex15.29   outccome == 6363*/</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Quote<span class="token operator">>></span> pv<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>pv<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>Bulk_quote<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">10.1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> total_p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> pv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>total_p <span class="token operator">+=</span> p<span class="token operator">-></span><span class="token function">net_price</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> total_p <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-29"><a href="#练习15-29" class="headerlink" title="练习15.29"></a>练习15.29</h2><blockquote><p>再运行一次你的程序，这次传入 <code>Quote</code> 对象的 <code>shared_ptr</code> 。如果这次计算出的总额与之前的不一致，解释为什么;如果一直，也请说明原因。</p></blockquote><p>解：</p><p>因为智能指针导致了多态性的产生，所以这次计算的总额不一致。</p><h2 id="练习15-30"><a href="#练习15-30" class="headerlink" title="练习15.30"></a>练习15.30</h2><blockquote><p>编写你自己的 <code>Basket</code> 类，用它计算上一个练习中交易记录的总价格。</p></blockquote><p>解：</p><p><code>Basket h</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token comment">// 购物篮</span><span class="token comment">// a basket of objects from Quote hierachy, using smart pointers.</span><span class="token keyword">class</span> <span class="token class-name">Basket</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// Basket使用合成的默认构造函数和拷贝控制成员</span><span class="token comment">// copy verison</span><span class="token keyword">void</span> <span class="token function">add_item</span><span class="token punctuation">(</span><span class="token keyword">const</span> Quote<span class="token operator">&amp;</span> sale<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>items<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Quote<span class="token operator">></span></span></span><span class="token punctuation">(</span>sale<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move version</span><span class="token keyword">void</span> <span class="token function">add_item</span><span class="token punctuation">(</span>Quote<span class="token operator">&amp;&amp;</span> sale<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>items<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>Quote<span class="token operator">></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 打印每本书的总价和购物篮中所有书的总价</span><span class="token keyword">double</span> <span class="token function">total_receipt</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// function to compare needed by the multiset member</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Quote<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Quote<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token operator">-></span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rhs<span class="token operator">-></span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// hold multiple quotes, ordered by the compare member</span>std<span class="token double-colon punctuation">::</span>multiset<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Quote<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">></span>items<span class="token punctuation">&#123;</span> compare <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Basket cpp</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"basket.h"</span></span><span class="token keyword">double</span> <span class="token class-name">Basket</span><span class="token double-colon punctuation">::</span><span class="token function">total_receipt</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>  <span class="token comment">// 保存实时计算出的总价格</span><span class="token comment">// iter指向ISBN相同的一批元素中的第一个</span><span class="token comment">// upper_bound返回一个迭代器，该迭代器指向这批元素的尾后位置</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> iter <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter <span class="token operator">!=</span> items<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="token comment">// @note   this increment moves iter to the first element with key</span><span class="token comment">//         greater than  *iter.</span><span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> <span class="token function">print_total</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>iter<span class="token punctuation">,</span> items<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>                                   <span class="token comment">// ^^^^^^^^^^^^^ using count to fetch</span><span class="token comment">// the number of the same book.</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"Total Sale: "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>main</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"bulk_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"limit_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"disc_quote.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"basket.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Basket basket<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>basket<span class="token punctuation">.</span><span class="token function">add_item</span><span class="token punctuation">(</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token string">"Bible"</span><span class="token punctuation">,</span> <span class="token number">20.6</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>basket<span class="token punctuation">.</span><span class="token function">add_item</span><span class="token punctuation">(</span><span class="token function">Bulk_quote</span><span class="token punctuation">(</span><span class="token string">"C++Primer"</span><span class="token punctuation">,</span> <span class="token number">30.9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>basket<span class="token punctuation">.</span><span class="token function">add_item</span><span class="token punctuation">(</span><span class="token function">Quote</span><span class="token punctuation">(</span><span class="token string">"CLRS"</span><span class="token punctuation">,</span> <span class="token number">40.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"log.txt"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios_base<span class="token double-colon punctuation">::</span>app <span class="token operator">|</span> std<span class="token double-colon punctuation">::</span>ios_base<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>basket<span class="token punctuation">.</span><span class="token function">total_receipt</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-31"><a href="#练习15-31" class="headerlink" title="练习15.31"></a>练习15.31</h2><blockquote><p>已知 <code>s1</code>、<code>s2</code>、<code>s3</code> 和 <code>s4</code> 都是 <code>string</code>，判断下面的表达式分别创建了什么样的对象：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">Query</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token function">Query</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token function">Query</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token function">Query</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">Query</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token function">Query</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token function">Query</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">Query</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> OrQuery<span class="token punctuation">,</span> AndQuery<span class="token punctuation">,</span> NotQuery<span class="token punctuation">,</span> <span class="token function">WordQuery</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> OrQuery<span class="token punctuation">,</span> AndQuery<span class="token punctuation">,</span> NotQuery<span class="token punctuation">,</span> <span class="token function">WordQuery</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> OrQuery<span class="token punctuation">,</span> AndQuery<span class="token punctuation">,</span> WordQuery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习15-32"><a href="#练习15-32" class="headerlink" title="练习15.32"></a>练习15.32</h2><blockquote><p>当一个 <code>Query</code> 类型的对象被拷贝、移动、赋值或销毁时，将分别发生什么？</p></blockquote><p>解：</p><ul><li><strong>拷贝</strong>：当被拷贝时，合成的拷贝构造函数被调用。它将拷贝两个数据成员至新的对象。而在这种情况下，数据成员是一个智能指针，当拷贝时，相应的智能指针指向相同的地址，计数器增加1.</li><li><strong>移动</strong>：当移动时，合成的移动构造函数被调用。它将移动数据成员至新的对象。这时新对象的智能指针将会指向原对象的地址，而原对象的智能指针为 <code>nullptr</code>，新对象的智能指针的引用计数为 1。</li><li><strong>赋值</strong>：合成的赋值运算符被调用，结果和拷贝的相同的。</li><li><strong>销毁</strong>：合成的析构函数被调用。对象的智能指针的引用计数递减，当引用计数为 0 时，对象被销毁。</li></ul><h2 id="练习15-33"><a href="#练习15-33" class="headerlink" title="练习15.33"></a>练习15.33</h2><blockquote><p>当一个 <code>Query_base</code> 类型的对象被拷贝、移动赋值或销毁时，将分别发生什么？</p></blockquote><p>解：</p><p>由合成的版本来控制。然而 <code>Query_base</code> 是一个抽象类，它的对象实际上是它的派生类对象。</p><h2 id="练习15-34"><a href="#练习15-34" class="headerlink" title="练习15.34"></a>练习15.34</h2><blockquote><p>针对图15.3构建的表达式：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> 例举出在处理表达式的过程中执行的所有构造函数。<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 例举出 cout <span class="token operator">&lt;&lt;</span> q 所调用的 rep。<span class="token punctuation">(</span>c<span class="token punctuation">)</span> 例举出 q<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 所调用的 eval。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li><strong>a</strong>： <code>Query q = Query(&quot;fiery&quot;) &amp; Query(&quot;bird&quot;) | Query(&quot;wind&quot;);</code></li></ul><ol><li><code>Query::Query(const std::string&amp; s)</code> where s == “fiery”,”bird” and “wind”</li><li><code>WordQuery::WordQuery(const std::string&amp; s)</code> where s == “fiery”,”bird” and “wind”</li><li><code>AndQuery::AndQuery(const Query&amp; left, const Query&amp; right);</code></li><li><code>BinaryQuery(const Query&amp;l, const Query&amp; r, std::string s);</code></li><li><code>Query::Query(std::shared_ptr&lt;Query_base&gt; query)</code> 2times</li><li><code>OrQuery::OrQuery(const Query&amp; left, const Query&amp; right);</code></li><li><code>BinaryQuery(const Query&amp;l, const Query&amp; r, std::string s);</code></li><li><code>Query::Query(std::shared_ptr&lt;Query_base&gt; query)</code> 2times</li></ol><ul><li><strong>b</strong>：</li></ul><ol><li><code>query.rep()</code> inside the operator &lt;&lt;().</li><li><code>q-&gt;rep()</code> inside the member function rep().</li><li><code>OrQuery::rep()</code> which is inherited from <code>BinaryQuery</code>.</li><li><code>Query::rep()</code> for <code>lhs</code> and <code>rhs</code>:<br>for <code>rhs</code> which is a <code>WordQuery</code> : <code>WordQuery::rep()</code> where <code>query_word(&quot;wind&quot;)</code> is returned.For <code>lhs</code> which is an <code>AndQuery</code>.</li><li><code>AndQuery::rep()</code> which is inherited from <code>BinaryQuery</code>.</li><li><code>BinaryQuer::rep()</code>: for <code>rhs: WordQuery::rep()</code>   where query_word(“fiery”) is returned. For <code>lhs: WordQuery::rep()</code> where query_word(“bird” ) is returned.</li></ol><ul><li><strong>c</strong>：</li></ul><ol><li><code>q.eval()</code></li><li><code>q-&gt;rep()</code>: where q is a pointer to <code>OrQuary</code>.</li><li><code>QueryResult eval(const TextQuery&amp; )const override</code>: is called but this one has not been defined yet.</li></ol><h2 id="练习15-35"><a href="#练习15-35" class="headerlink" title="练习15.35"></a>练习15.35</h2><blockquote><p>实现 <code>Query</code> 类和 <code>Query_base</code> 类，其中需要定义<code>rep</code> 而无须定义 <code>eval</code>。</p></blockquote><p>解：</p><p><code>Query</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">QUERY_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUERY_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"query_base.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"queryresult.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"textquery.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"wordquery.h"</span></span><span class="token comment">/*** @brief interface class to manage the Query_base inheritance hierachy*/</span><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> Query <span class="token keyword">operator</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token keyword">const</span> Query<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> Query <span class="token keyword">operator</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token keyword">const</span> Query<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Query<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> Query <span class="token keyword">operator</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Query<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Query<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// build a new WordQuery</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">WordQuery</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Query::Query(const std::string&amp; s) where s="</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// interface functions: call the corresponding Query_base operatopns</span>QueryResult <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">const</span> TextQuery<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> q<span class="token operator">-></span><span class="token function">eval</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Query::rep() \n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> q<span class="token operator">-></span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// constructor only for friends</span><span class="token function">Query</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Query_base<span class="token operator">></span> query<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">q</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Query::Query(std::shared_ptr&lt;Query_base> query)\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Query_base<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Query<span class="token operator">&amp;</span> query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// make a virtual call through its Query_base pointer to rep();</span><span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> query<span class="token punctuation">.</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// QUERY_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Query_base</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">QUERY_BASE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUERY_BASE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"textquery.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"queryresult.h"</span></span><span class="token comment">/*** @brief abstract class acts as a base class for all concrete query types*        all members are private.*/</span><span class="token keyword">class</span> <span class="token class-name">Query_base</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">using</span> line_no <span class="token operator">=</span> TextQuery<span class="token double-colon punctuation">::</span>line_no<span class="token punctuation">;</span> <span class="token comment">//  used in the eval function</span><span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Query_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// returns QueryResult that matches this query</span><span class="token keyword">virtual</span> QueryResult <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">const</span> TextQuery<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// a string representation of this query</span><span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// QUERY_BASE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-36"><a href="#练习15-36" class="headerlink" title="练习15.36"></a>练习15.36</h2><blockquote><p>在构造函数和 <code>rep</code> 成员中添加打印语句，运行你的代码以检验你对本节第一个练习中(a)、(b)两小题的回答是否正确。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Query q <span class="token operator">=</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"fiery"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"bird"</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"wind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WordQuery</span><span class="token double-colon punctuation">::</span><span class="token function">WordQuery</span><span class="token punctuation">(</span>wind<span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> where s<span class="token operator">=</span>wind<span class="token class-name">WordQuery</span><span class="token double-colon punctuation">::</span><span class="token function">WordQuery</span><span class="token punctuation">(</span>bird<span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> where s<span class="token operator">=</span>bird<span class="token class-name">WordQuery</span><span class="token double-colon punctuation">::</span><span class="token function">WordQuery</span><span class="token punctuation">(</span>fiery<span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> where s<span class="token operator">=</span>fiery<span class="token class-name">BinaryQuery</span><span class="token double-colon punctuation">::</span><span class="token function">BinaryQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  where s<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token class-name">AndQuery</span><span class="token double-colon punctuation">::</span><span class="token function">AndQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">Query</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Query_base<span class="token operator">></span> query<span class="token punctuation">)</span><span class="token class-name">BinaryQuery</span><span class="token double-colon punctuation">::</span><span class="token function">BinaryQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  where s<span class="token operator">=</span><span class="token operator">|</span>OrQuery<span class="token double-colon punctuation">::</span>OrQuery<span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">Query</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>Query_base<span class="token operator">></span> query<span class="token punctuation">)</span>Press <span class="token operator">&lt;</span>RETURN<span class="token operator">></span> to close <span class="token keyword">this</span> window<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> q <span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">BinaryQuery</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">WodQuery</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">BinaryQuery</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">WodQuery</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Query</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">WodQuery</span><span class="token double-colon punctuation">::</span><span class="token function">rep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fiery <span class="token operator">&amp;</span> bird<span class="token punctuation">)</span> <span class="token operator">|</span> wind<span class="token punctuation">)</span>Press <span class="token operator">&lt;</span>RETURN<span class="token operator">></span> to close <span class="token keyword">this</span> window<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习15-37"><a href="#练习15-37" class="headerlink" title="练习15.37"></a>练习15.37</h2><blockquote><p>如果在派生类中含有 <code>shared_ptr&lt;Query_base&gt;</code> 类型的成员而非 <code>Query</code> 类型的成员，则你的类需要做出怎样的改变？</p></blockquote><p>解：</p><p>参考15.35。</p><h2 id="练习15-38"><a href="#练习15-38" class="headerlink" title="练习15.38"></a>练习15.38</h2><blockquote><p>下面的声明合法吗？如果不合法，请解释原因;如果合法，请指出该声明的含义。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">BinaryQuery a <span class="token operator">=</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"fiery"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"bird"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AndQuery b <span class="token operator">=</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"fiery"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"bird"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OrQuery c <span class="token operator">=</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"fiery"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"bird"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><ol><li>不合法。因为 <code>BinaryQuery</code> 是抽象类。</li><li>不合法。<code>&amp;</code> 操作返回的是一个 <code>Query</code> 对象。</li><li>不合法。<code>&amp;</code> 操作返回的是一个 <code>Query</code> 对象。</li></ol><h2 id="练习15-39"><a href="#练习15-39" class="headerlink" title="练习15.39"></a>练习15.39</h2><blockquote><p>实现 <code>Query</code> 类和　<code>Query_base</code> 类，求图15.3中表达式的值并打印相关信息，验证你的程序是否正确。</p></blockquote><h2 id="练习15-40"><a href="#练习15-40" class="headerlink" title="练习15.40"></a>练习15.40</h2><blockquote><p>在 <code>OrQuery</code> 的 <code>eval</code> 函数中，如果 <code>rhs</code> 成员返回的是空集将发生什么？</p></blockquote><p>解：</p><p>不会发生什么。代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>line_no<span class="token operator">>></span> ret_lines <span class="token operator">=</span>       std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>line_no<span class="token operator">>></span></span></span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果 <code>rhs</code> 成员返回的是空集，在 <code>set</code> 当中不会添加什么。</p><h2 id="练习15-41"><a href="#练习15-41" class="headerlink" title="练习15.41"></a>练习15.41</h2><blockquote><p>重新实现你的类，这次使用指向 <code>Query_base</code> 的内置指针而非 <code>shared_ptr</code>。请注意，做出上述改动后你的类将不能再使用合成的拷贝控制成员。</p></blockquote><p>解：</p><p>略</p><h2 id="练习15-42"><a href="#练习15-42" class="headerlink" title="练习15.42"></a>练习15.42</h2><blockquote><p>从下面的几种改进中选择一种，设计并实现它:</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> 按句子查询并打印单词，而不再是按行打印。<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 引入一个历史系统，用户可以按编号查阅之前的某个查询，并可以在其中添加内容或者将其余其他查询组合。<span class="token punctuation">(</span>c<span class="token punctuation">)</span> 允许用户对结果做出限制，比如从给定范围的行中跳出匹配的进行显示。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><p>略</p><h2 id="TextQuery最终项目"><a href="#TextQuery最终项目" class="headerlink" title="TextQuery最终项目"></a>TextQuery最终项目</h2><p>见 cpp_source/cha5/text_query</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案17</title>
      <link href="2021/04/10/excersize/ch17/"/>
      <url>2021/04/10/excersize/ch17/</url>
      
        <content type="html"><![CDATA[<h1 id="第十七章-标注库特殊设施"><a href="#第十七章-标注库特殊设施" class="headerlink" title="第十七章 标注库特殊设施"></a>第十七章 标注库特殊设施</h1><h2 id="练习17-1"><a href="#练习17-1" class="headerlink" title="练习17.1"></a>练习17.1</h2><blockquote><p>定义一个保存三个<code>int</code>值的 <code>tuple</code>，并将其成员分别初始化为10、20和30。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> t <span class="token operator">=</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习17-2"><a href="#练习17-2" class="headerlink" title="练习17.2"></a>练习17.2</h2><blockquote><p>定义一个 <code>tuple</code>，保存一个 <code>string</code>、一个<code>vector&lt;string&gt;</code> 和一个 <code>pair&lt;string, int&gt;</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> t <span class="token operator">=</span> tuple<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习17-3"><a href="#练习17-3" class="headerlink" title="练习17.3"></a>练习17.3</h2><blockquote><p>重写12.3节中的 <code>TextQuery</code> 程序，使用 <code>tuple</code> 代替 <code>QueryResult</code> 类。你认为哪种设计更好？为什么？</p></blockquote><p>解：</p><p>程序略。</p><p>我认为<code>tuple</code>更方便。</p><h2 id="练习17-4"><a href="#练习17-4" class="headerlink" title="练习17.4"></a>练习17.4</h2><blockquote><p>编写并测试你自己版本的 <code>findBook</code> 函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_17_4_SalesData.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// matches有三个成员：1.一个书店的索引。2.指向书店中元素的迭代器。3.指向书店中元素的迭代器。</span><span class="token keyword">typedef</span> tuple<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">,</span>              vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator<span class="token punctuation">,</span>              vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator<span class="token operator">></span>    matches<span class="token punctuation">;</span><span class="token comment">// files保存每家书店的销售记录</span><span class="token comment">// findBook返回一个vector，每家销售了给定书籍的书店在其中都有一项</span>vector<span class="token operator">&lt;</span>matches<span class="token operator">></span> <span class="token function">findBook</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">>></span> <span class="token operator">&amp;</span>files<span class="token punctuation">,</span>                         <span class="token keyword">const</span> string <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>matches<span class="token operator">></span> ret<span class="token punctuation">;</span> <span class="token comment">//初始化为空vector</span>    <span class="token comment">// 对每家书店，查找给定书籍匹配的记录范围</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> files<span class="token punctuation">.</span>cbegin<span class="token punctuation">;</span> it <span class="token operator">!=</span> files<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 查找具有相同ISBN的Sales_data范围，found是一个迭代器pair</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> <span class="token function">equal_range</span><span class="token punctuation">(</span>it<span class="token operator">-></span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token operator">-></span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">,</span> compareIsbn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>found<span class="token punctuation">.</span>first <span class="token operator">!=</span> found<span class="token punctuation">.</span>second<span class="token punctuation">)</span>  <span class="token comment">// 此书店销售了给定书籍</span>            <span class="token comment">// 记住此书店的索引及匹配的范围</span>            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>it <span class="token operator">-</span> files<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> found<span class="token punctuation">.</span>first<span class="token punctuation">,</span> found<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span> <span class="token comment">//如果未找到匹配记录，ret为空</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reportResults</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span>                       <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span> <span class="token operator">></span> <span class="token operator">&amp;</span>files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string s<span class="token punctuation">;</span>  <span class="token comment">//要查找的书</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>in <span class="token operator">>></span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> trans <span class="token operator">=</span> <span class="token function">findBook</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" not found in any stores"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 获得下一本要查找的书</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>store <span class="token operator">:</span> trans<span class="token punctuation">)</span>  <span class="token comment">// 对每家销售了给定书籍的书店</span>            <span class="token comment">// get&lt;n>返回store中tuple的指定的成员</span>            os <span class="token operator">&lt;&lt;</span> <span class="token string">"store "</span> <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>store<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" sales: "</span>               <span class="token operator">&lt;&lt;</span> <span class="token function">accumulate</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-5"><a href="#练习17-5" class="headerlink" title="练习17.5"></a>练习17.5</h2><blockquote><p>重写 <code>findBook</code>，令其返回一个 <code>pair</code>，包含一个索引和一个迭代器pair。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">,</span>                  std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator<span class="token punctuation">,</span>                            std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator<span class="token operator">>></span>                                                                      matches_pair<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>matches_pair<span class="token operator">></span><span class="token function">findBook_pair</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span> <span class="token operator">></span> <span class="token operator">&amp;</span>files<span class="token punctuation">,</span>              <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>matches_pair<span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> files<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">equal_range</span><span class="token punctuation">(</span>it<span class="token operator">-></span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token operator">-></span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">,</span> compareIsbn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found<span class="token punctuation">.</span>first <span class="token operator">!=</span> found<span class="token punctuation">.</span>second<span class="token punctuation">)</span>            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>it <span class="token operator">-</span> files<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span>found<span class="token punctuation">.</span>first<span class="token punctuation">,</span> found<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-6"><a href="#练习17-6" class="headerlink" title="练习17.6"></a>练习17.6</h2><blockquote><p>重写 <code>findBook</code>，不使用<code>tuple</code>和<code>pair</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">matches_struct</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type st<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator first<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator last<span class="token punctuation">;</span>    <span class="token function">matches_struct</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type s<span class="token punctuation">,</span>                   std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator f<span class="token punctuation">,</span>                   std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator l<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">st</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">first</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">last</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>matches_struct<span class="token operator">></span><span class="token function">findBook_struct</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Sales_data<span class="token operator">></span> <span class="token operator">></span> <span class="token operator">&amp;</span>files<span class="token punctuation">,</span>                <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>matches_struct<span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> files<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> found <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">equal_range</span><span class="token punctuation">(</span>it<span class="token operator">-></span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token operator">-></span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">,</span> compareIsbn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>found<span class="token punctuation">.</span>first <span class="token operator">!=</span> found<span class="token punctuation">.</span>second<span class="token punctuation">)</span>            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">matches_struct</span><span class="token punctuation">(</span>it <span class="token operator">-</span> files<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> found<span class="token punctuation">.</span>first<span class="token punctuation">,</span> found<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-7"><a href="#练习17-7" class="headerlink" title="练习17.7"></a>练习17.7</h2><blockquote><p>解释你更倾向于哪个版本的<code>findBook</code>，为什么。</p></blockquote><p>解：</p><p>使用<code>tuple</code>的版本。很明显更加灵活方便。</p><h2 id="练习17-8"><a href="#练习17-8" class="headerlink" title="练习17.8"></a>练习17.8</h2><blockquote><p>在本节最后一段代码中，如果我们将<code>Sales_data()</code>作为第三个参数传递给<code>accumulate</code>，会发生什么？</p></blockquote><p>解：</p><p>结果是0，以为<code>Sales_data</code>是默认初始化的。</p><h2 id="练习17-9"><a href="#练习17-9" class="headerlink" title="练习17.9"></a>练习17.9</h2><blockquote><p>解释下列每个<code>bitset</code> 对象所包含的位模式：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> bitset<span class="token operator">&lt;</span><span class="token number">64</span><span class="token operator">></span> <span class="token function">bitvec</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0000000000000000000000000000000000000000000000000000000000100000</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> bitset<span class="token operator">&lt;</span><span class="token number">32</span><span class="token operator">></span> <span class="token function">bv</span><span class="token punctuation">(</span><span class="token number">1010101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 00000000000011110110100110110101</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> string bstr<span class="token punctuation">;</span> cin <span class="token operator">>></span> bstr<span class="token punctuation">;</span> bitset<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">></span> <span class="token function">bv</span><span class="token punctuation">(</span>bstr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据输入的str转换成bitset</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-10"><a href="#练习17-10" class="headerlink" title="练习17.10"></a>练习17.10</h2><blockquote><p>使用序列1、2、3、5、8、13、21初始化一个<code>bitset</code>，将这些位置置位。对另一个<code>bitset</code>进行默认初始化，并编写一小段程序将其恰当的位置位。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>bitset<span class="token operator">&lt;</span><span class="token number">32</span><span class="token operator">></span> bset<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> v<span class="token punctuation">)</span>    bset<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>bitset<span class="token operator">&lt;</span><span class="token number">32</span><span class="token operator">></span> bset2<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        bset2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>bset <span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>bset2<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-11"><a href="#练习17-11" class="headerlink" title="练习17.11"></a>练习17.11</h2><blockquote><p>定义一个数据结构，包含一个整型对象，记录一个包含10个问题的真/假测验的解答。如果测验包含100道题，你需要对数据结构做出什么改变（如果需要的话）？</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment">//class Quiz</span><span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t N<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Quiz</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//constructors</span>    <span class="token function">Quiz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Quiz</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">bitquiz</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//generate grade</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t M<span class="token operator">></span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>size_t <span class="token function">grade</span><span class="token punctuation">(</span>Quiz<span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> Quiz<span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//print</span>    <span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t M<span class="token operator">></span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Quiz<span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//update bitset</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>bitset<span class="token operator">&lt;</span>N<span class="token operator">></span> bitquiz<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t N<span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Quiz</span><span class="token operator">&lt;</span>N<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">update</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> pair<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bitquiz<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>first<span class="token punctuation">,</span> pair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t M<span class="token operator">></span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> Quiz<span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> quiz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> quiz<span class="token punctuation">.</span>bitquiz<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t M<span class="token operator">></span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">grade</span><span class="token punctuation">(</span>Quiz<span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> corAns<span class="token punctuation">,</span> Quiz<span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> stuAns<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> result <span class="token operator">=</span> stuAns<span class="token punctuation">.</span>bitquiz <span class="token operator">^</span> corAns<span class="token punctuation">.</span>bitquiz<span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//Ex17_11</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"1010101"</span><span class="token punctuation">;</span>    Quiz<span class="token operator">&lt;</span><span class="token number">10</span><span class="token operator">></span> <span class="token function">quiz</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> quiz <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">//EX17_12</span>    quiz<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> quiz <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token comment">//Ex17_13</span>    std<span class="token double-colon punctuation">::</span>string answer <span class="token operator">=</span> <span class="token string">"10011"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string stu_answer <span class="token operator">=</span> <span class="token string">"11001"</span><span class="token punctuation">;</span>    Quiz<span class="token operator">&lt;</span><span class="token number">5</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">stu_ans</span><span class="token punctuation">(</span>stu_answer<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">grade</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> stu_ans<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-12"><a href="#练习17-12" class="headerlink" title="练习17.12"></a>练习17.12</h2><blockquote><p>使用前一题中的数据结构，编写一个函数，它接受一个问题编号和一个表示真/假解答的值，函数根据这两个参数更新测验的解答。</p></blockquote><p>解：</p><p>参考17.11。</p><h2 id="练习17-13"><a href="#练习17-13" class="headerlink" title="练习17.13"></a>练习17.13</h2><blockquote><p>编写一个整型对象，包含真/假测验的正确答案。使用它来为前两题中的数据结构生成测验成绩。</p></blockquote><p>解：</p><p>参考17.11。</p><h2 id="练习17-14"><a href="#练习17-14" class="headerlink" title="练习17.14"></a>练习17.14</h2><blockquote><p>编写几个正则表达式，分别触发不同错误。运行你的程序，观察编译器对每个错误的输出。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>regex_error<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// for ex17.14</span>    <span class="token comment">// error_brack</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        regex <span class="token function">r</span><span class="token punctuation">(</span><span class="token string">"[[:alnum:]+\\.(cpp|cxx|cc)$"</span><span class="token punctuation">,</span> regex<span class="token double-colon punctuation">::</span>icase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>regex_error e<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" code: "</span> <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// for ex17.15</span>    regex <span class="token function">r</span><span class="token punctuation">(</span><span class="token string">"[[:alpha:]]*[^c]ei[[:alpha:]]*"</span><span class="token punctuation">,</span> regex<span class="token double-colon punctuation">::</span>icase<span class="token punctuation">)</span><span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input a word! Input 'q' to quit!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">&amp;&amp;</span> s <span class="token operator">!=</span> <span class="token string">"q"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input word "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" is okay!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input word "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" is not okay!"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input a word! Input 'q' to quit!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// for ex17.16</span>    r<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"[^c]ei"</span><span class="token punctuation">,</span> regex<span class="token double-colon punctuation">::</span>icase<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input a word! Input 'q' to quit!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">&amp;&amp;</span> s <span class="token operator">!=</span> <span class="token string">"q"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">regex_match</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input word "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" is okay!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input word "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" is not okay!"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input a word! Input 'q' to quit!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-15"><a href="#练习17-15" class="headerlink" title="练习17.15"></a>练习17.15</h2><blockquote><p>编写程序，使用模式查找违反“i在e之前，除非在c之后”规则的单词。你的程序应该提示用户输入一个单词，然后指出此单词是否符号要求。用一些违反和未违反规则的单词测试你的程序。</p></blockquote><p>解：</p><p>参考17.14。</p><h2 id="练习17-16"><a href="#练习17-16" class="headerlink" title="练习17.16"></a>练习17.16</h2><blockquote><p>如果前一题程序中的<code>regex</code>对象用<code>&quot;[^c]ei&quot;</code>进行初始化，将会发生什么？用此模式测试你的程序，检查你的答案是否正确。</p></blockquote><p>解：</p><p>参考17.14。</p><h2 id="练习17-17"><a href="#练习17-17" class="headerlink" title="练习17.17"></a>练习17.17</h2><blockquote><p>更新你的程序，令它查找输入序列中所有违反”ei”语法规则的单词。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>sregex_iterator<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input a sequence of words:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Word(s) that violiate the \"ei\" grammar rule:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token string">"[^c]ei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pattern <span class="token operator">=</span> <span class="token string">"[[:alpha:]]*"</span> <span class="token operator">+</span> pattern <span class="token operator">+</span> <span class="token string">"[[:alpha:]]*"</span><span class="token punctuation">;</span>regex <span class="token function">r</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> regex<span class="token double-colon punctuation">::</span>icase<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>sregex_iterator <span class="token function">it</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">;</span> it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-18"><a href="#练习17-18" class="headerlink" title="练习17.18"></a>练习17.18</h2><blockquote><p>修改你的程序，忽略包含“ei`但并非拼写错误的单词，如“albeit”和“neighbor”。</p></blockquote><p>解：</p><p>参考17.17。</p><h2 id="练习17-19"><a href="#练习17-19" class="headerlink" title="练习17.19"></a>练习17.19</h2><blockquote><p>为什么可以不先检查<code>m[4]</code>是否匹配了就直接调用<code>m[4].str()</code>？</p></blockquote><p>解：</p><p>如果不匹配，则<code>m[4].str()</code>返回空字符串。</p><h2 id="练习17-20"><a href="#练习17-20" class="headerlink" title="练习17.20"></a>练习17.20</h2><blockquote><p>编写你自己版本的验证电话号码的程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>sregex_iterator<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>smatch<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> smatch<span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string phone <span class="token operator">=</span> <span class="token string">"(\\()?(\\d&#123; 3 &#125;)(\\))?([-. ])?(\\d&#123; 3 &#125;)([-. ]?)(\\d&#123; 4 &#125;)"</span><span class="token punctuation">;</span>regex <span class="token function">r</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>smatch m<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">bool</span> valid_record<span class="token punctuation">;</span><span class="token comment">// read each record from the input file</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>valid_record <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// for each matching phone number</span><span class="token keyword">for</span> <span class="token punctuation">(</span>sregex_iterator <span class="token function">it</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">;</span> it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>valid_record <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// check whether the number's formatting is valid</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"valid phone number: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"invalid phone number: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid_record<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"invalid record!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> smatch<span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// if there is an open parenthesis before the area code</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched<span class="token punctuation">)</span><span class="token comment">// the area code must be followed by a close parenthesis</span><span class="token comment">// and followed immediately by the rest of the number or a space</span><span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token comment">// then there can't be a close after the area code</span><span class="token comment">// the delimiters between the other two components must match</span><span class="token keyword">return</span> <span class="token operator">!</span>m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-21"><a href="#练习17-21" class="headerlink" title="练习17.21"></a>练习17.21</h2><blockquote><p>使用本节定义的<code>valid</code> 函数重写8.3.2节中的电话号码程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istream<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ofstream<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>istringstream<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ostringstream<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>sregex_iterator<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>smatch<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">PersonInfo</span><span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> phones<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> smatch<span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">read_record</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span><span class="token operator">&amp;</span> people<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">format_record</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span><span class="token operator">&amp;</span> people<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// fake function that makes the program compile</span>string <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span> people<span class="token punctuation">;</span>    string filename<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input a record file name: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> filename<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ifstream <span class="token function">fin</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_record</span><span class="token punctuation">(</span>fin<span class="token punctuation">,</span> people<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ofstream <span class="token function">fout</span><span class="token punctuation">(</span><span class="token string">"data\\result.txt"</span><span class="token punctuation">,</span> ofstream<span class="token double-colon punctuation">::</span>trunc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">format_record</span><span class="token punctuation">(</span>fout<span class="token punctuation">,</span> people<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Fail to open file "</span> <span class="token operator">&lt;&lt;</span> filename <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> smatch<span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// if there is an open parenthesis before the area code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched<span class="token punctuation">)</span>        <span class="token comment">// the area code must be followed by a close parenthesis</span>        <span class="token comment">// and followed immediately by the rest of the number or a space</span>        <span class="token keyword">return</span> m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// then there can't be a close after the area code</span>        <span class="token comment">// the delimiters between the other two components must match</span>        <span class="token keyword">return</span> <span class="token operator">!</span>m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> m<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">read_record</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span><span class="token operator">&amp;</span> people<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        string line<span class="token punctuation">,</span> word<span class="token punctuation">;</span> <span class="token comment">// will hold a line and word from input, respectively</span>                           <span class="token comment">// read the input a line at a time until cin hits end-of-file (or another error)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            PersonInfo info<span class="token punctuation">;</span> <span class="token comment">// create an object to hold this record's data</span>            istringstream <span class="token function">record</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bind record to the line we just read</span>            record <span class="token operator">>></span> info<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// read the name</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>record <span class="token operator">>></span> word<span class="token punctuation">)</span> <span class="token comment">// read the phone numbers</span>                info<span class="token punctuation">.</span>phones<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// and store them</span>            people<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// append this record to people</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">format_record</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>PersonInfo<span class="token operator">></span><span class="token operator">&amp;</span> people<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string phone <span class="token operator">=</span> <span class="token string">"(\\()?(\\d&#123; 3 &#125;)(\\))?([-. ])?(\\d&#123; 3 &#125;)([-. ]?)(\\d&#123; 4 &#125;)"</span><span class="token punctuation">;</span>    regex <span class="token function">r</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    smatch m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>entry <span class="token operator">:</span> people<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// for each entry in people</span>        ostringstream formatted<span class="token punctuation">,</span> badNums<span class="token punctuation">;</span> <span class="token comment">// objects created on each loop</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>nums <span class="token operator">:</span> entry<span class="token punctuation">.</span>phones<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>sregex_iterator <span class="token function">it</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">;</span> it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token comment">// for each number</span>                <span class="token comment">// check whether the number's formatting is valid</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">// string in badNums</span>                    badNums <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token comment">// "writes" to formatted's string</span>                    formatted <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// there were no bad numbers</span>            os <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token comment">// print the name</span>            <span class="token operator">&lt;&lt;</span> formatted<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// and reformatted numbers</span>        <span class="token keyword">else</span> <span class="token comment">// otherwise, print the name and bad numbers</span>            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"input error: "</span> <span class="token operator">&lt;&lt;</span> entry<span class="token punctuation">.</span>name            <span class="token operator">&lt;&lt;</span> <span class="token string">" invalid number(s) "</span> <span class="token operator">&lt;&lt;</span> badNums<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-22"><a href="#练习17-22" class="headerlink" title="练习17.22"></a>练习17.22</h2><blockquote><p>重写你的电话号码程序，使之允许在号码的三个部分之间放置任意多个空白符。</p></blockquote><p>解：</p><p>参考17.21。</p><h2 id="练习17-23"><a href="#练习17-23" class="headerlink" title="练习17.23"></a>练习17.23</h2><blockquote><p>编写查找邮政编码的正则表达式。一个美国邮政编码可以由五位或九位数字组成。前五位数字和后四位数字之间可以用一个短横线分隔。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>regex<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>sregex_iterator<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>smatch<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> smatch<span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string zipcode <span class="token operator">=</span><span class="token string">"(\\d&#123;5&#125;)([-])?(\\d&#123;4&#125;)?\\b"</span><span class="token punctuation">;</span>regex <span class="token function">r</span><span class="token punctuation">(</span>zipcode<span class="token punctuation">)</span><span class="token punctuation">;</span>smatch m<span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//! for each matching zipcode number</span><span class="token keyword">for</span> <span class="token punctuation">(</span>sregex_iterator <span class="token function">it</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">;</span>it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//! check whether the number's formatting is valid</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"valid zipcode number: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"invalid zipcode number: "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">const</span> smatch<span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>matched<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-24"><a href="#练习17-24" class="headerlink" title="练习17.24"></a>练习17.24</h2><blockquote><p>编写你自己版本的重拍电话号码格式的程序。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string pattern <span class="token operator">=</span> <span class="token string">"(\\()?(\\d&#123;3&#125;)(\\))?([-. ])?(\\d&#123;3&#125;)([-. ])?(\\d&#123;4&#125;)"</span><span class="token punctuation">;</span>string format <span class="token operator">=</span> <span class="token string">"$2.$5.$7"</span><span class="token punctuation">;</span>regex <span class="token function">r</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">regex_replace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>r<span class="token punctuation">,</span>format<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-25"><a href="#练习17-25" class="headerlink" title="练习17.25"></a>练习17.25</h2><blockquote><p>重写你的电话号码程序，使之只输出每个人的第一个电话号码。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string pattern <span class="token operator">=</span> <span class="token string">"(\\()?(\\d&#123;3&#125;)(\\))?([-. ])?(\\d&#123;3&#125;)([-. ])?(\\d&#123;4&#125;)"</span><span class="token punctuation">;</span>string fmt <span class="token operator">=</span> <span class="token string">"$2.$5.$7"</span><span class="token punctuation">;</span>regex <span class="token function">r</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        smatch result<span class="token punctuation">;</span>        <span class="token function">regex_search</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>result<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Sorry, No match."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-26"><a href="#练习17-26" class="headerlink" title="练习17.26"></a>练习17.26</h2><blockquote><p>重写你的电话号码程序，使之对多于一个电话号码的人只输出第二个和后续号码。</p></blockquote><p>解：</p><p>略</p><h2 id="练习17-27"><a href="#练习17-27" class="headerlink" title="练习17.27"></a>练习17.27</h2><blockquote><p>编写程序，将九位数字邮政编码的格式转换为 <code>ddddd-dddd</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;regex></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string pattern <span class="token operator">=</span> <span class="token string">"(\\d&#123;5&#125;)([.- ])?(\\d&#123;4&#125;)"</span><span class="token punctuation">;</span>string fmt <span class="token operator">=</span> <span class="token string">"$1-$3"</span><span class="token punctuation">;</span>regex <span class="token function">r</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>string s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        smatch result<span class="token punctuation">;</span>        <span class="token function">regex_search</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>result<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span>result<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Sorry, No match."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-28"><a href="#练习17-28" class="headerlink" title="练习17.28"></a>练习17.28</h2><blockquote><p>编写函数，每次调用生成并返回一个均匀分布的随机<code>unsigned int</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token comment">// default version</span><span class="token keyword">unsigned</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// with seed spicified</span><span class="token keyword">unsigned</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// with seed and range spicified</span><span class="token keyword">unsigned</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> seed<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> min<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> temp<span class="token punctuation">)</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>default_random_engine e<span class="token punctuation">;</span>    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> ud<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ud</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> seed<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>default_random_engine <span class="token function">e</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> ud<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ud</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token function">random_gen</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> seed<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> min<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>default_random_engine <span class="token function">e</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> <span class="token function">ud</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">ud</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-29"><a href="#练习17-29" class="headerlink" title="练习17.29"></a>练习17.29</h2><blockquote><p>修改上一题中编写的函数，允许用户提供一个种子作为可选参数。</p></blockquote><p>解：</p><p>参考17.28。</p><h2 id="练习17-30"><a href="#练习17-30" class="headerlink" title="练习17.30"></a>练习17.30</h2><blockquote><p>再次修改你的程序，此次增加两个参数，表示函数允许返回的最小值和最大值。</p></blockquote><p>解：</p><p>参考17.28。</p><h2 id="练习17-31"><a href="#练习17-31" class="headerlink" title="练习17.31"></a>练习17.31</h2><blockquote><p>对于本节中的游戏程序，如果在<code>do</code>循环内定义<code>b</code>和<code>e</code>，会发生什么？</p></blockquote><p>解：</p><p>由于引擎返回相同的随机数序列，因此眉不循环都会创建新的引擎，眉不循环都会生成相同的值。</p><h2 id="练习17-32"><a href="#练习17-32" class="headerlink" title="练习17.32"></a>练习17.32</h2><blockquote><p>如果我们在循环内定义<code>resp</code>，会发生什么？</p></blockquote><p>解：</p><p>会报错，<code>while</code>条件中用到了<code>resp</code>。</p><h2 id="练习17-33"><a href="#练习17-33" class="headerlink" title="练习17.33"></a>练习17.33</h2><blockquote><p>修改11.3.6节中的单词转换程序，允许对一个给定单词有多种转换方式，每次随机选择一种进行实际转换。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>default_random_engine<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>time<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>sort<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>find_if<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>pair<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> ps<span class="token punctuation">;</span>ifstream <span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"d.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>ps<span class="token operator">></span> dict<span class="token punctuation">;</span>string str1<span class="token punctuation">,</span> str2<span class="token punctuation">;</span><span class="token comment">// read wirds from dictionary</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>></span> str1 <span class="token operator">>></span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dict<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>i<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// sort words in vector</span><span class="token function">sort</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> ps <span class="token operator">&amp;</span>_ps1<span class="token punctuation">,</span> <span class="token keyword">const</span> ps <span class="token operator">&amp;</span>_ps2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ps1<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> _ps2<span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"i.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>default_random_engine <span class="token function">e</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// read words from text</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>></span> str1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// find word in dictionary</span>vector<span class="token operator">&lt;</span>ps<span class="token operator">></span><span class="token double-colon punctuation">::</span>const_iterator it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token operator">&amp;</span>str1<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> ps <span class="token operator">&amp;</span>_ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ps<span class="token punctuation">.</span>first <span class="token operator">==</span> str1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// if word doesn't exist in dictionary</span><span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> dict<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// write it itself</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// get random meaning of word </span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> <span class="token function">u</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">find_if</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>str1<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> ps <span class="token operator">&amp;</span>_ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> _ps<span class="token punctuation">.</span>first <span class="token operator">></span> str1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">-</span> it <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// write random meaning</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>it <span class="token operator">+</span> <span class="token function">u</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-34"><a href="#练习17-34" class="headerlink" title="练习17.34"></a>练习17.34</h2><blockquote><p>编写一个程序，展示如何使用表17.17和表17.18中的每个操作符。</p></blockquote><p>解：</p><p>略</p><h2 id="练习17-35"><a href="#练习17-35" class="headerlink" title="练习17.35"></a>练习17.35</h2><blockquote><p>修改第670页中的程序，打印2的平方根，但这次打印十六进制数字的大写形式。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"default format: "</span> <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"scientific: "</span> <span class="token operator">&lt;&lt;</span> scientific <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"fixed decimal: "</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"hexidecimal: "</span> <span class="token operator">&lt;&lt;</span> uppercase <span class="token operator">&lt;&lt;</span> hexfloat <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> <span class="token string">"use defaults: "</span> <span class="token operator">&lt;&lt;</span> defaultfloat <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//17.36</span><span class="token comment">//Modify the program from the previous exercise to print the various floating-point values so that they line up in a column.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span>left<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"default format:"</span> <span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> right<span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> left <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"scientific:"</span> <span class="token operator">&lt;&lt;</span> scientific <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> right <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> left <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"fixed decimal:"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> right <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> left <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"hexidecimal:"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> uppercase <span class="token operator">&lt;&lt;</span> hexfloat <span class="token operator">&lt;&lt;</span> right <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token operator">&lt;&lt;</span> left <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"use defaults:"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> defaultfloat <span class="token operator">&lt;&lt;</span> right <span class="token operator">&lt;&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-36"><a href="#练习17-36" class="headerlink" title="练习17.36"></a>练习17.36</h2><blockquote><p>修改上一题中的程序，打印不同的浮点数，使它们排成一列。</p></blockquote><p>解：</p><p>参考17.36。</p><h2 id="练习17-37"><a href="#练习17-37" class="headerlink" title="练习17.37"></a>练习17.37</h2><blockquote><p>用未格式化版本的<code>getline</code> 逐行读取一个文件。测试你的程序，给定一个文件，既包含空行又包含长度超过你传递给<code>geiline</code>的字符数组大小的行。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//17.37</span><span class="token comment">//Use the unformatted version of getline to read a file a line at a time.</span><span class="token comment">//Test your program by giving it a file that contains empty lines as well as lines that are</span><span class="token comment">//longer than the character array that you pass to getline.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//int main () &#123;</span><span class="token comment">//  ifstream myfile("F:\\Git\\Cpp-Primer\\ch17\\17_37_38\\test.txt");</span><span class="token comment">//  if (myfile) cout &lt;&lt; 1 &lt;&lt; endl;</span><span class="token comment">//  char sink [250];</span><span class="token comment">//</span><span class="token comment">//  while(myfile.getline(sink,250))</span><span class="token comment">//  &#123;</span><span class="token comment">//    cout &lt;&lt; sink &lt;&lt; endl;</span><span class="token comment">//  &#125;</span><span class="token comment">//  return 0;</span><span class="token comment">//&#125;</span><span class="token comment">//17.38</span><span class="token comment">//Extend your program from the previous exercise to print each word you read onto its own line.</span><span class="token comment">//#include &lt;iostream></span><span class="token comment">//#include &lt;fstream></span><span class="token comment">//#include &lt;iomanip></span><span class="token comment">//</span><span class="token comment">//using namespace std;</span><span class="token comment">//</span><span class="token comment">//int main () &#123;</span><span class="token comment">//  ifstream myfile ("F:\\Git\\Cpp-Primer\\ch17\\17_37_38\\test.txt");</span><span class="token comment">//  char sink [250];</span><span class="token comment">//</span><span class="token comment">//  while(myfile.getline(sink,250,' '))</span><span class="token comment">//  &#123;</span><span class="token comment">//    cout &lt;&lt; sink &lt;&lt; endl;</span><span class="token comment">//  &#125;</span><span class="token comment">//  return 0;</span><span class="token comment">//&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Standard Output!\n"</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Standard Error!\n"</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>clog <span class="token operator">&lt;&lt;</span> <span class="token string">"Standard Log??\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习17-38"><a href="#练习17-38" class="headerlink" title="练习17.38"></a>练习17.38</h2><blockquote><p>扩展上一题中你的程序，将读入的每个单词打印到它所在的行。</p></blockquote><p>解：</p><p>参考17.37。</p><h2 id="练习17-39"><a href="#练习17-39" class="headerlink" title="练习17.39"></a>练习17.39</h2><blockquote><p>对本节给出的 <code>seek</code>程序，编写你自己的版本。</p></blockquote><p>解：</p><p>略</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记9</title>
      <link href="2021/04/10/notes/ch09/"/>
      <url>2021/04/10/notes/ch09/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-顺序容器"><a href="#第九章-顺序容器" class="headerlink" title="第九章 顺序容器"></a>第九章 顺序容器</h1><h2 id="顺序容器概述"><a href="#顺序容器概述" class="headerlink" title="顺序容器概述"></a>顺序容器概述</h2><ul><li><strong>顺序容器</strong>（sequential container）：为程序员提供了控制元素存储和访问顺序的能力。这种顺序不依赖于元素的值，而是与元素加入容器时的位置相对应。</li></ul><h3 id="顺序容器类型"><a href="#顺序容器类型" class="headerlink" title="顺序容器类型"></a>顺序容器类型</h3><table><thead><tr><th>容器类型</th><th>介绍</th></tr></thead><tbody><tr><td><code>vector</code></td><td>可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。</td></tr><tr><td><code>deque</code></td><td>双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。</td></tr><tr><td><code>list</code></td><td>双向链表。只支持双向顺序访问。在<code>list</code>中任何位置进行插入/删除操作速度都很快。</td></tr><tr><td><code>forward_list</code></td><td>单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快。</td></tr><tr><td><code>array</code></td><td>固定大小数组。支持快速随机访问。不能添加或者删除元素。</td></tr><tr><td><code>string</code></td><td>与<code>vector</code>相似的容器，但专门用于保存字符。随机访问块。在尾部插入/删除速度快。</td></tr></tbody></table><ul><li>除了固定大小的<code>array</code>外，其他容器都提供高效、灵活的内存管理。</li><li><code>forward_list</code>和<code>array</code>是新C++标准增加的类型。</li><li>通常使用<code>vector</code>是最好的选择，除非你有很好的理由选择其他容器。</li><li>新标准库的容器比旧版的快得多。</li></ul><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>iterator</code></td><td>此容器类型的迭代器类型</td></tr><tr><td><code>const_iterator</code></td><td>可以读取元素但不能修改元素的迭代器类型</td></tr><tr><td><code>size_type</code></td><td>无符号整数类型，足够保存此种容器类型最大可能的大小</td></tr><tr><td><code>difference_type</code></td><td>带符号整数类型，足够保存两个迭代器之间的距离</td></tr><tr><td><code>value_type</code></td><td>元素类型</td></tr><tr><td><code>reference</code></td><td>元素的左值类型；和<code>value_type &amp;</code>含义相同</td></tr><tr><td><code>const_reference</code></td><td>元素的<code>const</code>左值类型，即<code>const value_type &amp;</code></td></tr></tbody></table><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>C c;</code></td><td>默认构造函数，构造空容器</td></tr><tr><td><code>C c1(c2);</code>或<code>C c1 = c2;</code></td><td>构造<code>c2</code>的拷贝<code>c1</code></td></tr><tr><td><code>C c(b, e)</code></td><td>构造<code>c</code>，将迭代器<code>b</code>和<code>e</code>指定范围内的所有元素拷贝到<code>c</code></td></tr><tr><td><code>C c(a, b, c...)</code></td><td>列表初始化<code>c</code></td></tr><tr><td><code>C c(n)</code></td><td>只支持顺序容器，且不包括<code>array</code>，包含<code>n</code>个元素，这些元素进行了值初始化</td></tr><tr><td><code>C c(n, t)</code></td><td>包含<code>n</code>个初始值为<code>t</code>的元素</td></tr></tbody></table><ul><li>只有顺序容器的构造函数才接受大小参数，关联容器并不支持。</li><li><code>array</code>具有固定大小。</li><li>和其他容器不同，默认构造的<code>array</code>是非空的。</li><li>直接复制：将一个容器复制给另一个容器时，类型必须匹配：容器类型和元素类型都必须相同。</li><li>使用迭代器复制：不要求容器类型相同，容器内的元素类型也可以不同。</li></ul><h3 id="赋值和swap"><a href="#赋值和swap" class="headerlink" title="赋值和swap"></a>赋值和<code>swap</code></h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c1 = c2;</code></td><td>将<code>c1</code>中的元素替换成<code>c2</code>中的元素</td></tr><tr><td><code>c1 = &#123;a, b, c...&#125;</code></td><td>将<code>c1</code>中的元素替换成列表中的元素（不适用于<code>array</code>）</td></tr><tr><td><code>c1.swap(c2)</code></td><td>交换<code>c1</code>和<code>c2</code>的元素</td></tr><tr><td><code>swap(c1, c2)</code></td><td>等价于<code>c1.swap(c2)</code></td></tr><tr><td><code>c.assign(b, e)</code></td><td>将<code>c</code>中的元素替换成迭代器<code>b</code>和<code>e</code>表示范围中的元素，<code>b</code>和<code>e</code>不能指向<code>c</code>中的元素</td></tr><tr><td><code>c.assign(il)</code></td><td>将<code>c</code>中的元素替换成初始化列表<code>il</code>中的元素</td></tr><tr><td><code>c.assign(n, r)</code></td><td>将<code>c</code>中的元素替换为<code>n</code>个值是<code>t</code>的元素</td></tr></tbody></table><ul><li>使用非成员版本的<code>swap</code>是一个好习惯。</li><li><code>assign</code>操作不适用于关联容器和<code>array</code></li></ul><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.size()</code></td><td><code>c</code>中元素的数目（不支持<code>forward_list</code>）</td></tr><tr><td><code>c.max_size()</code></td><td><code>c</code>中可保存的最大元素数目</td></tr><tr><td><code>c.empty()</code></td><td>若<code>c</code>中存储了元素，返回<code>false</code>，否则返回<code>true</code></td></tr></tbody></table><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.push_back(t)</code></td><td>在<code>c</code>尾部创建一个值为<code>t</code>的元素，返回<code>void</code></td></tr><tr><td><code>c.emplace_back(args)</code></td><td>同上</td></tr><tr><td><code>c.push_front(t)</code></td><td>在<code>c</code>头部创建一个值为<code>t</code>的元素，返回<code>void</code></td></tr><tr><td><code>c.emplace_front(args)</code></td><td>同上</td></tr><tr><td><code>c.insert(p, t)</code></td><td>在迭代器<code>p</code>指向的元素之前创建一个值是<code>t</code>的元素，返回指向新元素的迭代器</td></tr><tr><td><code>c.emplace(p, args)</code></td><td>同上</td></tr><tr><td><code>c.inset(p, n, t)</code></td><td>在迭代器<code>p</code>指向的元素之前插入<code>n</code>个值为<code>t</code>的元素，返回指向第一个新元素的迭代器；如果<code>n</code>是0，则返回<code>p</code></td></tr><tr><td><code>c.insert(p, b, e)</code></td><td>将迭代器<code>b</code>和<code>e</code>范围内的元素，插入到<code>p</code>指向的元素之前；如果范围为空，则返回<code>p</code></td></tr><tr><td><code>c.insert(p, il)</code></td><td><code>il</code>是一个花括号包围中的元素值列表，将其插入到<code>p</code>指向的元素之前；如果<code>il</code>是空，则返回<code>p</code></td></tr></tbody></table><ul><li>因为这些操作会改变大小，因此不适用于<code>array</code>。</li><li><code>forward_list</code>有自己专有版本的<code>insert</code>和<code>emplace</code>。</li><li><code>forward_list</code>不支持<code>push_back</code>和<code>emplace_back</code>。</li><li>当我们用一个对象去初始化容器或者将对象插入到容器时，实际上放入的是对象的拷贝。</li><li><code>emplace</code>开头的函数是新标准引入的，这些操作是构造而不是拷贝元素。</li><li>传递给<code>emplace</code>的参数必须和元素类型的构造函数相匹配。</li></ul><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.back()</code></td><td>返回<code>c</code>中尾元素的引用。若<code>c</code>为空，函数行为未定义</td></tr><tr><td><code>c.front()</code></td><td>返回<code>c</code>中头元素的引用。若<code>c</code>为空，函数行为未定义</td></tr><tr><td><code>c[n]</code></td><td>返回<code>c</code>中下标是<code>n</code>的元素的引用，<code>n</code>时候一个无符号证书。若<code>n&gt;=c.size()</code>，则函数行为未定义</td></tr><tr><td><code>c.at(n)</code></td><td>返回下标为<code>n</code>的元素引用。如果下标越界，则抛出<code>out_of_range</code>异常</td></tr></tbody></table><ul><li>访问成员函数返回的是引用。</li><li><code>at</code>和下标操作只适用于<code>string</code>、<code>vector</code>、<code>deque</code>、<code>array</code>。</li><li><code>back</code>不适用于<code>forward_list</code>。</li><li>如果希望下标是合法的，可以使用<code>at</code>函数。</li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.pop_back()</code></td><td>删除<code>c</code>中尾元素，若<code>c</code>为空，则函数行为未定义。函数返回<code>void</code></td></tr><tr><td><code>c.pop_front()</code></td><td>删除<code>c</code>中首元素，若<code>c</code>为空，则函数行为未定义。函数返回<code>void</code></td></tr><tr><td><code>c.erase(p)</code></td><td>删除迭代器<code>p</code>指向的元素，返回一个指向被删除元素之后的元素的迭代器，若<code>p</code>本身是尾后迭代器，则函数行为未定义</td></tr><tr><td><code>c.erase(b, e)</code></td><td>删除迭代器<code>b</code>和<code>e</code>范围内的元素，返回指向最后一个被删元素之后元素的迭代器，若<code>e</code>本身就是尾后迭代器，则返回尾后迭代器</td></tr><tr><td><code>c.clear()</code></td><td>删除<code>c</code>中所有元素，返回<code>void</code></td></tr></tbody></table><ul><li>会改变容器大小，不适用于<code>array</code>。</li><li><code>forward_list</code>有特殊版本的<code>erase</code></li><li><code>forward_list</code>不支持<code>pop_back</code></li><li><code>vector</code>和<code>string</code>不支持<code>pop_front</code></li></ul><h3 id="特殊的forwad-list操作"><a href="#特殊的forwad-list操作" class="headerlink" title="特殊的forwad_list操作"></a>特殊的forwad_list操作</h3><ul><li>链表在删除元素时需要修改前置节点的内容，双向链表会前驱的指针，但是单向链表没有保存，因此需要增加获取前置节点的方法。</li><li><code>forward_list</code>定义了<code>before_begin</code>，即首前（off-the-begining）迭代器，允许我们再在首元素之前添加或删除元素。</li></ul><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>lst.before_begin()</code></td><td>返回指向链表首元素之前不存在的元素的迭代器，此迭代器不能解引用。</td></tr><tr><td><code>lst.cbefore_begin()</code></td><td>同上，但是返回的是常量迭代器。</td></tr><tr><td><code>lst.insert_after(p, t)</code></td><td>在迭代器<code>p</code>之后插入元素。<code>t</code>是一个对象</td></tr><tr><td><code>lst.insert_after(p, n, t)</code></td><td>在迭代器<code>p</code>之后插入元素。<code>t</code>是一个对象，<code>n</code>是数量。若<code>n</code>是0则函数行为未定义</td></tr><tr><td><code>lst.insert_after(p, b, e)</code></td><td>在迭代器<code>p</code>之后插入元素。由迭代器<code>b</code>和<code>e</code>指定范围。</td></tr><tr><td><code>lst.insert_after(p, il)</code></td><td>在迭代器<code>p</code>之后插入元素。由<code>il</code>指定初始化列表。</td></tr><tr><td><code>emplace_after(p, args)</code></td><td>使用<code>args</code>在<code>p</code>之后的位置，创建一个元素，返回一个指向这个新元素的迭代器。若<code>p</code>为尾后迭代器，则函数行为未定义。</td></tr><tr><td><code>lst.erase_after(p)</code></td><td>删除<code>p</code>指向位置之后的元素，返回一个指向被删元素之后的元素的迭代器，若<code>p</code>指向<code>lst</code>的尾元素或者是一个尾后迭代器，则函数行为未定义。</td></tr><tr><td><code>lst.erase_after(b, e)</code></td><td>类似上面，删除对象换成从<code>b</code>到<code>e</code>指定的范围。</td></tr></tbody></table><h3 id="改变容器大小"><a href="#改变容器大小" class="headerlink" title="改变容器大小"></a>改变容器大小</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.resize(n)</code></td><td>调整<code>c</code>的大小为<code>n</code>个元素，若<code>n&lt;c.size()</code>，则多出的元素被丢弃。若必须添加新元素，对新元素进行值初始化</td></tr><tr><td><code>c.resize(n, t)</code></td><td>调整<code>c</code>的大小为<code>n</code>个元素，任何新添加的元素都初始化为值<code>t</code></td></tr></tbody></table><h3 id="获取迭代器"><a href="#获取迭代器" class="headerlink" title="获取迭代器"></a>获取迭代器</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.begin()</code>, <code>c.end()</code></td><td>返回指向<code>c</code>的首元素和尾元素之后位置的迭代器</td></tr><tr><td><code>c.cbegin()</code>, <code>c.cend()</code></td><td>返回<code>const_iterator</code></td></tr></tbody></table><ul><li>以<code>c</code>开头的版本是C++11新标准引入的</li><li>当不需要写访问时，应该使用<code>cbegin</code>和<code>cend</code>。</li></ul><h3 id="反向容器的额外成员"><a href="#反向容器的额外成员" class="headerlink" title="反向容器的额外成员"></a>反向容器的额外成员</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>reverse_iterator</code></td><td>按逆序寻址元素的迭代器</td></tr><tr><td><code>const_reverse_iterator</code></td><td>不能修改元素的逆序迭代器</td></tr><tr><td><code>c.rbegin()</code>, <code>c.rend()</code></td><td>返回指向<code>c</code>的尾元素和首元素之前位置的迭代器</td></tr><tr><td><code>c.crbegin()</code>, <code>c.crend()</code></td><td>返回<code>const_reverse_iterator</code></td></tr></tbody></table><ul><li>不支持<code>forward_list</code></li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li>迭代器范围：<code>begin</code>到<code>end</code>，即第一个元素到最后一个元素的后面一个位置。</li><li>左闭合区间：<code>[begin, end)</code></li><li>左闭合范围蕴含的编程设定：<ul><li>如果<code>begin</code>和<code>end</code>相等，则范围为空。</li><li>如果二者不等，则范围至少包含一个元素，且<code>begin</code>指向该范围中的第一个元素。</li><li>可以对<code>begin</code>递增若干次，使得<code>begin == end</code>。</li></ul></li></ul><h3 id="容器操作可能使迭代器失效"><a href="#容器操作可能使迭代器失效" class="headerlink" title="容器操作可能使迭代器失效"></a>容器操作可能使迭代器失效</h3><ul><li>在向容器添加元素后：<ul><li>如果容器是<code>vector</code>或<code>string</code>，且存储空间被重新分配，则指向容器的迭代器、指针、引用都会失效。</li><li>对于<code>deque</code>，插入到除首尾位置之外的任何位置都会导致指向容器的迭代器、指针、引用失效。如果在首尾位置添加元素，迭代器会失效，但指向存在元素的引用和指针不会失效。</li><li>对于<code>list</code>和<code>forward_list</code>，指向容器的迭代器、指针和引用依然有效。</li></ul></li><li>在从一个容器中删除元素后：<ul><li>对于<code>list</code>和<code>forward_list</code>，指向容器其他位置的迭代器、引用和指针仍然有效。</li><li>对于<code>deque</code>，如果在首尾之外的任何位置删除元素，那么指向被删除元素外其他元素的迭代器、指针、引用都会失效；如果是删除<code>deque</code>的尾元素，则尾后迭代器会失效，但其他不受影响；如果删除的是<code>deque</code>的头元素，这些也不会受影响。</li><li>对于<code>vector</code>和<code>string</code>，指向被删元素之前的迭代器、引用、指针仍然有效。</li><li>注意：当我们删除元素时，尾后迭代器总是会失效。</li><li>注意：使用失效的迭代器、指针、引用是严重的运行时错误！</li><li>建议：将要求迭代器必须保持有效的程序片段最小化。</li><li>建议：不要保存<code>end</code>返回的迭代器。</li></ul></li></ul><h3 id="容器内元素的类型约束"><a href="#容器内元素的类型约束" class="headerlink" title="容器内元素的类型约束"></a>容器内元素的类型约束</h3><ul><li>元素类型必须支持赋值运算；</li><li>元素类型的对象必须可以复制。</li><li>除了输入输出标准库类型外，其他所有标准库类型都是有效的容器元素类型。</li></ul><h2 id="vector对象是如何增长的"><a href="#vector对象是如何增长的" class="headerlink" title="vector对象是如何增长的"></a>vector对象是如何增长的</h2><p><code>vector</code>和<code>string</code>在内存中是连续保存的，如果原先分配的内存位置已经使用完，则需要重新分配新空间，将已有元素从就位置移动到新空间中，然后添加新元素。</p><h3 id="管理容量的成员函数"><a href="#管理容量的成员函数" class="headerlink" title="管理容量的成员函数"></a>管理容量的成员函数</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>c.shrink_to_fit()</code></td><td>将<code>capacity()</code>减少到和<code>size()</code>相同大小</td></tr><tr><td><code>c.capacity()</code></td><td>不重新分配内存空间的话，<code>c</code>可以保存多少个元素</td></tr><tr><td><code>c.reverse(n)</code></td><td>分配至少能容纳<code>n</code>个元素的内存空间</td></tr></tbody></table><ul><li><code>shrink_to_fit</code>只适用于<code>vector</code>、<code>string</code>和<code>deque</code></li><li><code>capacity</code>和<code>reverse</code>只适用于<code>vector</code>和<code>string</code>。</li></ul><h2 id="额外的string操作"><a href="#额外的string操作" class="headerlink" title="额外的string操作"></a>额外的string操作</h2><h3 id="构造string的其他方法"><a href="#构造string的其他方法" class="headerlink" title="构造string的其他方法"></a>构造string的其他方法</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>string s(cp, n)</code></td><td><code>s</code>是<code>cp</code>指向的数组中前<code>n</code>个字符的拷贝，此数组</td></tr><tr><td><code>string s(s2, pos2)</code></td><td><code>s</code>是<code>string s2</code>从下标<code>pos2</code>开始的字符的拷贝。若<code>pos2 &gt; s2.size()</code>，则构造函数的行为未定义。</td></tr><tr><td><code>string s(s2, pos2, len2)</code></td><td><code>s</code>是<code>string s2</code>从下标<code>pos2</code>开始的<code>len2</code>个字符的拷贝。</td></tr></tbody></table><ul><li><code>n</code>,<code>len2</code>,<code>pos2</code>都是无符号值。</li></ul><h3 id="substr操作"><a href="#substr操作" class="headerlink" title="substr操作"></a>substr操作</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>s.substr(pos, n)</code></td><td>返回一个<code>string</code>，包含<code>s</code>中从<code>pos</code>开始的<code>n</code>个字符的拷贝。<code>pos</code>的默认值是0，<code>n</code>的默认值是<code>s.size() - pos</code>，即拷贝从<code>pos</code>开始的所有字符。</td></tr></tbody></table><h3 id="改变string的其他方法"><a href="#改变string的其他方法" class="headerlink" title="改变string的其他方法"></a>改变string的其他方法</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>s.insert(pos, args)</code></td><td>在<code>pos</code>之前插入<code>args</code>指定的字符。<code>pos</code>可以使是下标或者迭代器。接受下标的版本返回指向<code>s</code>的引用；接受迭代器的版本返回指向第一个插入字符的迭代器。</td></tr><tr><td><code>s.erase(pos, len)</code></td><td>删除从<code>pos</code>开始的<code>len</code>个字符，如果<code>len</code>被省略，则删除后面所有字符，返回指向<code>s</code>的引用。</td></tr><tr><td><code>s.assign(args)</code></td><td>将<code>s</code>中的字符替换成<code>args</code>指定的字符。返回一个指向<code>s</code>的引用。</td></tr><tr><td><code>s.append(args)</code></td><td>将<code>args</code>指定的字符追加到<code>s</code>，返回一个指向<code>s</code>的引用。</td></tr><tr><td><code>s.replace(range, args)</code></td><td>删除<code>s</code>中范围<code>range</code>中的字符，替换成<code>args</code>指定的字符。返回一个指向<code>s</code>的引用。</td></tr></tbody></table><h3 id="string搜索操作"><a href="#string搜索操作" class="headerlink" title="string搜索操作"></a>string搜索操作</h3><ul><li><code>string</code>类提供了6个不同的搜索函数，每个函数都有4个重载版本。</li><li>每个搜索操作都返回一个<code>string::size_type</code>值，表示匹配发生位置的下标。如果搜索失败则返回一个名为<code>string::npos</code>的<code>static</code>成员（类型是<code>string::size_type</code>，初始化值是-1，也就是<code>string</code>最大的可能大小）。</li></ul><table><thead><tr><th>搜索操作</th><th>解释</th></tr></thead><tbody><tr><td><code>s.find(args)</code></td><td>查找<code>s</code>中<code>args</code>第一次出现的位置</td></tr><tr><td><code>s.rfind(args)</code></td><td>查找<code>s</code>中<code>args</code>最后一次出现的位置</td></tr><tr><td><code>s.find_first_of(args)</code></td><td>在<code>s</code>中查找<code>args</code>中任何一个字符第一次出现的位置</td></tr><tr><td><code>s.find_last_of(args)</code></td><td>在<code>s</code>中查找<code>args</code>中任何一个字符最后一次出现的位置</td></tr><tr><td><code>s.find_first_not_of(args)</code></td><td>在<code>s</code>中查找第一个不在<code>args</code>中的字符</td></tr><tr><td><code>s.find_first_not_of(args)</code></td><td>在<code>s</code>中查找最后一个不在<code>args</code>中的字符</td></tr></tbody></table><p>args必须是一下的形式之一：</p><table><thead><tr><th><code>args</code>形式</th><th>解释</th></tr></thead><tbody><tr><td><code>c, pos</code></td><td>从<code>s</code>中位置<code>pos</code>开始查找字符<code>c</code>。<code>pos</code>默认是0</td></tr><tr><td><code>s2, pos</code></td><td>从<code>s</code>中位置<code>pos</code>开始查找字符串<code>s</code>。<code>pos</code>默认是0</td></tr><tr><td><code>cp, pos</code></td><td>从<code>s</code>中位置<code>pos</code>开始查找指针<code>cp</code>指向的以空字符结尾的C风格字符串。<code>pos</code>默认是0</td></tr><tr><td><code>cp, pos, n</code></td><td>从<code>s</code>中位置<code>pos</code>开始查找指针<code>cp</code>指向的前<code>n</code>个字符。<code>pos</code>和<code>n</code>无默认值。</td></tr></tbody></table><h3 id="s-compare的几种参数形式"><a href="#s-compare的几种参数形式" class="headerlink" title="s.compare的几种参数形式"></a>s.compare的几种参数形式</h3><p>逻辑类似于C标准库的<code>strcmp</code>函数，根据<code>s</code>是等于、大于还是小于参数指定的字符串，<code>s.compare</code>返回0、正数或负数。</p><table><thead><tr><th>参数形式</th><th>解释</th></tr></thead><tbody><tr><td><code>s2</code></td><td>比较<code>s</code>和<code>s2</code></td></tr><tr><td><code>pos1, n1, s2</code></td><td>比较<code>s</code>从<code>pos1</code>开始的<code>n1</code>个字符和<code>s2</code></td></tr><tr><td><code>pos1, n1, s2, pos2, n2</code></td><td>比较<code>s</code>从<code>pos1</code>开始的<code>n1</code>个字符和<code>s2</code></td></tr><tr><td><code>cp</code></td><td>比较<code>s</code>和<code>cp</code>指向的以空字符结尾的字符数组</td></tr><tr><td><code>pos1, n1, cp</code></td><td>比较<code>s</code>从<code>pos1</code>开始的<code>n1</code>个字符和<code>cp</code>指向的以空字符结尾的字符数组</td></tr><tr><td><code>pos1, n1, cp, n2</code></td><td>比较<code>s</code>从<code>pos1</code>开始的<code>n1</code>个字符和<code>cp</code>指向的地址开始<code>n2</code>个字符</td></tr></tbody></table><h3 id="string和数值转换"><a href="#string和数值转换" class="headerlink" title="string和数值转换"></a>string和数值转换</h3><table><thead><tr><th>转换</th><th>解释</th></tr></thead><tbody><tr><td><code>to_string(val)</code></td><td>一组重载函数，返回数值<code>val</code>的<code>string</code>表示。<code>val</code>可以使任何算术类型。对每个浮点类型和<code>int</code>或更大的整型，都有相应版本的<code>to_string()</code>。和往常一样，小整型会被提升。</td></tr><tr><td><code>stoi(s, p, b)</code></td><td>返回<code>s</code>起始子串（表示整数内容）的数值，<code>p</code>是<code>s</code>中第一个非数值字符的下标，默认是0，<code>b</code>是转换所用的基数。返回<code>int</code></td></tr><tr><td><code>stol(s, p, b)</code></td><td>返回<code>long</code></td></tr><tr><td><code>stoul(s, p, b)</code></td><td>返回<code>unsigned long</code></td></tr><tr><td><code>stoll(s, p, b)</code></td><td>返回<code>long long</code></td></tr><tr><td><code>stoull(s, p, b)</code></td><td>返回<code>unsigned long long</code></td></tr><tr><td><code>stof(s, p)</code></td><td>返回<code>s</code>起始子串（表示浮点数内容）的数值，<code>p</code>是<code>s</code>中第一个非数值字符的下标，默认是0。返回<code>float</code></td></tr><tr><td><code>stod(s, p)</code></td><td>返回<code>double</code></td></tr><tr><td><code>stold(s, p)</code></td><td>返回<code>long double</code></td></tr></tbody></table><h2 id="容器适配器（adapter）"><a href="#容器适配器（adapter）" class="headerlink" title="容器适配器（adapter）"></a>容器适配器（adapter）</h2><ul><li>适配器是使一事物的行为类似于另一事物的行为的一种机制，例如<code>stack</code>可以使任何一种顺序容器以栈的方式工作。</li><li>初始化 <code>deque&lt;int&gt; deq; stack&lt;int&gt; stk(deq);</code> 从<code>deq</code>拷贝元素到<code>stk</code>。</li><li>创建适配器时，指定一个顺序容器，可以覆盖默认的基础容器： <code>stack&lt;string, vector&lt;string&gt; &gt; str_stk;</code>。</li></ul><h3 id="适配器的通用操作和类型"><a href="#适配器的通用操作和类型" class="headerlink" title="适配器的通用操作和类型"></a>适配器的通用操作和类型</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>size_type</code></td><td>一种类型，须以保存当前类型的最大对象的大小</td></tr><tr><td><code>value_type</code></td><td>元素类型</td></tr><tr><td><code>container_type</code></td><td>实现适配器的底层容器类型</td></tr><tr><td><code>A a;</code></td><td>创建一个名为<code>a</code>的空适配器</td></tr><tr><td><code>A a(c)</code></td><td>创建一个名为<code>a</code>的适配器，带有容器<code>c</code>的一个拷贝</td></tr><tr><td>关系运算符</td><td>每个适配器都支持所有关系运算符：<code>==</code>、<code>!=</code>、<code>&lt;</code>、 <code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>这些运算符返回底层容器的比较结果</td></tr><tr><td><code>a.empty()</code></td><td>若<code>a</code>包含任何元素，返回<code>false</code>;否则返回<code>true</code></td></tr><tr><td><code>a.size()</code></td><td>返回<code>a</code>中的元素数目</td></tr><tr><td><code>swap(a, b)</code></td><td>交换<code>a</code>和<code>b</code>的内容，<code>a</code>和<code>b</code>必须有相同类型，包括底层容器类型也必须相同</td></tr><tr><td><code>a.swap(b)</code></td><td>同上</td></tr></tbody></table><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>s.pop()</code></td><td>删除栈顶元素，不返回。</td></tr><tr><td><code>s.push(item)</code></td><td>创建一个新元素，压入栈顶，该元素通过拷贝或移动<code>item</code>而来</td></tr><tr><td><code>s.emplace(args)</code></td><td>同上，但元素由<code>args</code>来构造。</td></tr><tr><td><code>s.top()</code></td><td>返回栈顶元素，不删除。</td></tr></tbody></table><ul><li>定义在<code>stack</code>头文件中。</li><li><code>stack</code>默认基于<code>deque</code>实现，也可以在<code>list</code>或<code>vector</code>之上实现。</li></ul><h3 id="queue和priority-queue"><a href="#queue和priority-queue" class="headerlink" title="queue和priority_queue"></a>queue和priority_queue</h3><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>q.pop()</code></td><td>删除队首元素，但不返回。</td></tr><tr><td><code>q.front()</code></td><td>返回队首元素的值，不删除。</td></tr><tr><td><code>q.back()</code></td><td>返回队尾元素的值，不删除。只适用于<code>queue</code></td></tr><tr><td><code>q.top()</code></td><td>返回具有最高优先级的元素值，不删除。</td></tr><tr><td><code>q.push(item)</code></td><td>在队尾压入一个新元素。</td></tr><tr><td><code>q.emplace(args)</code></td><td></td></tr></tbody></table><ul><li>定义在<code>queue</code>头文件中。</li><li><code>queue</code>默认基于<code>deque</code>实现，<code>priority_queue</code>默认基于<code>vector</code>实现。</li><li><code>queue</code>可以在<code>list</code>或<code>vector</code>之上实现，<code>priority_queue</code>也可以用<code>deque</code>实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer笔记17</title>
      <link href="2021/04/10/notes/ch17/"/>
      <url>2021/04/10/notes/ch17/</url>
      
        <content type="html"><![CDATA[<h1 id="第十七章-标准库特殊设施"><a href="#第十七章-标准库特殊设施" class="headerlink" title="第十七章 标准库特殊设施"></a>第十七章 标准库特殊设施</h1><h2 id="tuple类型"><a href="#tuple类型" class="headerlink" title="tuple类型"></a>tuple类型</h2><ul><li><code>tuple</code>是类似<code>pair</code>的模板，每个成员类型都可以不同，但<code>tuple</code>可以有任意数量的成员。</li><li>但每个确定的<code>tuple</code>类型的成员数目是固定的。</li><li>我们可以将<code>tuple</code>看做一个“快速而随意”的数据结构。</li></ul><p><strong>tuple支持的操作</strong>：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>tuple&lt;T1, T2, ..., Tn&gt; t;</code></td><td><code>t</code>是一个<code>tuple</code>，成员数为<code>n</code>，第<code>i</code>个成员的类型是<code>Ti</code>所有成员都进行值初始化。</td></tr><tr><td><code>tuple&lt;T1, T2, ..., Tn&gt; t(v1, v2, ..., vn);</code></td><td>每个成员用对应的初始值<code>vi</code>进行初始化。此构造函数是<code>explicit</code>的。</td></tr><tr><td><code>make_tuple(v1, v2, ..., vn)</code></td><td>返回一个用给定初始值初始化的<code>tuple</code>。<code>tuple</code>的类型从初始值的类型<strong>推断</strong>。</td></tr><tr><td><code>t1 == t2</code></td><td>当两个<code>tuple</code>具有相同数量的成员且成员对应相等时，两个<code>tuple</code>相等。</td></tr><tr><td><code>t1 relop t2</code></td><td><code>tuple</code>的关系运算使用<strong>字典序</strong>。两个<code>tuple</code>必须具有相同数量的成员。</td></tr><tr><td><code>get&lt;i&gt;(t)</code></td><td>返回<code>t</code>的第<code>i</code>个数据成员的引用：如果<code>t</code>是一个左值，结果是一个左值引用；否则，结果是一个右值引用。<code>tuple</code>的所有成员都是<code>public</code>的。</td></tr><tr><td><code>tuple_size&lt;tupleType&gt;::value</code></td><td>一个类模板，可以通过一个<code>tuple</code>类型来初始化。它有一个名为<code>value</code>的<code>public constexpr static</code>数据成员，类型为<code>size_t</code>，表示给定<code>tuple</code>类型中成员的数量。</td></tr><tr><td><code>tuple_element&lt;i, tupleType&gt;::type</code></td><td>一个类模板，可以通过一个整型常量和一个<code>tuple</code>类型来初始化。它有一个名为<code>type</code>的<code>public</code>成员，表示给定<code>tuple</code>类型中指定成员的类型。</td></tr></tbody></table><h3 id="定义和初始化tuple"><a href="#定义和初始化tuple" class="headerlink" title="定义和初始化tuple"></a>定义和初始化tuple</h3><p>定义和初始化示例：</p><ul><li><code>tuple&lt;size_t, size_t, size_t&gt; threeD;</code></li><li><code>tuple&lt;size_t, size_t, size_t&gt; threeD&#123;1,2,3&#125;;</code></li><li><code>auto item = make_tuple(&quot;0-999-78345-X&quot;, 3, 2.00)；</code></li></ul><p>访问tuple成员：</p><ul><li><code>auto book = get&lt;0&gt;(item);</code></li><li><code>get&lt;2&gt;(item) *= 0.8;</code></li></ul><h3 id="使用tuple返回多个值"><a href="#使用tuple返回多个值" class="headerlink" title="使用tuple返回多个值"></a>使用tuple返回多个值</h3><ul><li><code>tuple</code>最常见的用途是从一个函数返回多个值。</li></ul><h2 id="bitset类型"><a href="#bitset类型" class="headerlink" title="bitset类型"></a>bitset类型</h2><ul><li>处理二进制位的有序集；</li><li><code>bitset</code>也是类模板，但尖括号中输入的是<code>bitset</code>的长度而不是元素类型，因为元素类型是固定的，都是一个二进制位。</li></ul><p>初始化<code>bitset</code>的方法：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>bitset&lt;n&gt; b;</code></td><td><code>b</code>有<code>n</code>位；每一位均是0.此构造函数是一个<code>constexpr</code>。</td></tr><tr><td><code>bitset&lt;n&gt; b(u);</code></td><td><code>b</code>是<code>unsigned long long</code>值<code>u</code>的低<code>n</code>位的拷贝。如果<code>n</code>大于<code>unsigned long long</code>的大小，则<code>b</code>中超出<code>unsigned long long</code>的高位被置为0。此构造函数是一个<code>constexpr</code>。</td></tr><tr><td><code>bitset&lt;n&gt; b(s, pos, m, zero, one);</code></td><td><code>b</code>是<code>string s</code>从位置<code>pos</code>开始<code>m</code>个字符的拷贝。<code>s</code>只能包含字符<code>zero</code>或<code>one</code>：如果<code>s</code>包含任何其他字符，构造函数会抛出<code>invalid_argument</code>异常。字符在<code>b</code>中分别保存为<code>zero</code>和<code>one</code>。<code>pos</code>默认为0，<code>m</code>默认为<code>string::npos</code>，<code>zero</code>默认为’0’，<code>one</code>默认为’1’。</td></tr><tr><td><code>bitset&lt;n&gt; b(cp, pos, m, zero, one);</code></td><td>和上一个构造函数相同，但从<code>cp</code>指向的字符数组中拷贝字符。如果未提供<code>m</code>，则<code>cp</code>必须指向一个<code>C</code>风格字符串。如果提供了<code>m</code>，则从<code>cp</code>开始必须至少有<code>m</code>个<code>zero</code>或<code>one</code>字符。</td></tr></tbody></table><p>初始化案例；</p><ul><li><code>bitset&lt;13&gt; bitvec1(0xbeef);</code></li><li><code>bitset&lt;32&gt; bitvec4(&quot;1100&quot;);</code></li></ul><p><code>bitset</code>操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>b.any()</code></td><td><code>b</code>中是否存在1。</td></tr><tr><td><code>b.all()</code></td><td><code>b</code>中都是1。</td></tr><tr><td><code>b.none()</code></td><td><code>b</code>中是否没有1。</td></tr><tr><td><code>b.count()</code></td><td><code>b</code>中1的个数。</td></tr><tr><td><code>b.size()</code></td><td></td></tr><tr><td><code>b.test(pos)</code></td><td><code>pos</code>下标是否是1</td></tr><tr><td><code>b.set(pos)</code></td><td><code>pos</code>置1</td></tr><tr><td><code>b.set()</code></td><td>所有都置1</td></tr><tr><td><code>b.reset(pos)</code></td><td>将位置<code>pos</code>处的位复位</td></tr><tr><td><code>b.reset()</code></td><td>将<code>b</code>中所有位复位</td></tr><tr><td><code>b.flip(pos)</code></td><td>将位置<code>pos</code>处的位取反</td></tr><tr><td><code>b.flip()</code></td><td>将<code>b</code>中所有位取反</td></tr><tr><td><code>b[pos]</code></td><td>访问<code>b</code>中位置<code>pos</code>处的位；如果<code>b</code>是<code>const</code>的，则当该位置位时，返回<code>true</code>；否则返回<code>false</code>。</td></tr><tr><td><code>b.to_ulong()</code></td><td>返回一个<code>unsigned long</code>值，其位模式和<code>b</code>相同。如果<code>b</code>中位模式不能放入指定的结果类型，则抛出一个<code>overflow_error</code>异常。</td></tr><tr><td><code>b.to_ullong()</code></td><td>类似上面，返回一个<code>unsigned long long</code>值。</td></tr><tr><td><code>b.to_string(zero, one)</code></td><td>返回一个<code>string</code>，表示<code>b</code>中位模式。<code>zero</code>和<code>one</code>默认为0和1。</td></tr><tr><td><code>os &lt;&lt; b</code></td><td>将<code>b</code>中二进制位打印为字符<code>1</code>或<code>0</code>，打印到流<code>os</code>。</td></tr><tr><td><code>is &gt;&gt; b</code></td><td>从<code>is</code>读取字符存入<code>b</code>。当下一个字符不是1或0时，或是已经读入<code>b.size()</code>个位时，读取过程停止。</td></tr></tbody></table><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>正则表达式（reqular expression）是一种描述字符序列的方法，是一种很强大的工具。</li></ul><p>正则表达式库组件：</p><table><thead><tr><th>组件</th><th>解释</th></tr></thead><tbody><tr><td><code>regex</code></td><td>表示一个正则表达式的类</td></tr><tr><td><code>regex_match</code></td><td>将一个字符序列与一个正则表达式匹配</td></tr><tr><td><code>regex_search</code></td><td>寻找第一个与正则表达式匹配的子序列</td></tr><tr><td><code>regex_replace</code></td><td>使用给定格式替换一个正则表达式</td></tr><tr><td><code>sregex_iterator</code></td><td>迭代器适配器，调用<code>regex_searcg</code>来遍历一个<code>string</code>中所有匹配的子串</td></tr><tr><td><code>smatch</code></td><td>容器类，保存在<code>string</code>中搜索的结果</td></tr><tr><td><code>ssub_match</code></td><td><code>string</code>中匹配的子表达式的结果</td></tr></tbody></table><p><code>regex_match</code>和<code>regex_search</code>的参数：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>(seq, m, r, mft)</code></td><td>在字符序列<code>seq</code>中查找<code>regex</code>对象<code>r</code>中的正则表达式。<code>seq</code>可以是一个<code>string</code>、标识范围的一对迭代器、一个指向空字符结尾的字符数组的指针。</td></tr><tr><td><code>(seq, r, mft)</code></td><td><code>m</code>是一个<code>match</code>对象，用来保存匹配结果的相关细节。<code>m</code>和<code>seq</code>必须具有兼容的类型。<code>mft</code>是一个可选的<code>regex_constants::match_flag_type</code>值。</td></tr></tbody></table><ul><li>这些操作会返回<code>bool</code>值，指出是否找到匹配。</li></ul><h3 id="使用正则表达式库"><a href="#使用正则表达式库" class="headerlink" title="使用正则表达式库"></a>使用正则表达式库</h3><ul><li><code>regex</code>使用的正则表达式语言是<code>ECMAScript</code>，模式<code>[[::alpha::]]</code>匹配任意字母。</li><li>由于反斜线是C++中的特殊字符，在模式中每次出现<code>\</code>的地方，必须用一个额外的反斜线<code>\\</code>告知C++我们需要一个反斜线字符。</li><li>简单案例：<ul><li><code>string pattern(&quot;[^c]ei&quot;); pattern = &quot;[[:alpha:]]*&quot; + pattern + &quot;[[:alpha:]]*&quot;</code> 查找不在字符c之后的字符串ei</li><li><code>regex r(pattern);</code> 构造一个用于查找模式的regex</li><li><code>smatch results;</code> 定义一个对象保存搜索结果</li><li><code>string test_str = &quot;receipt freind theif receive&quot;;</code></li><li><code>if (regex_search(test_str, results, r)) cout &lt;&lt; results.str() &lt;&lt; endl;</code> 如有匹配子串，打印匹配的单词。</li></ul></li></ul><p><code>regex</code>（和<code>wregex</code>）选项：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>regex r(re)</code> <code>regex r(re, f)</code></td><td><code>re</code>表示一个正则表达式，它可以是一个<code>string</code>、一对表示字符范围的迭代器、一个指向空字符结尾的字符数组的指针、一个字符指针和一个计数器、一个花括号包围的字符列表。<code>f</code>是指出对象如何处理的标志。<code>f</code>通过下面列出来的值来设置。如果未指定<code>f</code>，其默认值为<code>ECMAScript</code>。</td></tr><tr><td><code>r1 = re</code></td><td>将<code>r1</code>中的正则表达式替换Wie<code>re</code>。<code>re</code>表示一个正则表达式，它可以是另一个<code>regex</code>对象、一个<code>string</code>、一个指向空字符结尾的字符数组的指针或是一个花括号包围的字符列表。</td></tr><tr><td><code>r1.assign(re, f)</code></td><td>和使用赋值运算符（=）的效果相同：可选的标志<code>f</code>也和<code>regex</code>的构造函数中对应的参数含义相同。</td></tr><tr><td><code>r.mark_count()</code></td><td><code>r</code>中子表达式的数目</td></tr><tr><td><code>r.flags()</code></td><td>返回<code>r</code>的标志集</td></tr></tbody></table><p>定义<code>regex</code>时指定的标志：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>icase</code></td><td>在匹配过程中忽略大小写</td></tr><tr><td><code>nosubs</code></td><td>不保存匹配的子表达式</td></tr><tr><td><code>optimize</code></td><td>执行速度优先于构造速度</td></tr><tr><td><code>ECMAScript</code></td><td>使用<code>ECMA-262</code>指定的语法</td></tr><tr><td><code>basic</code></td><td>使用<code>POSIX</code>基本的正则表达式语法</td></tr><tr><td><code>extended</code></td><td>使用<code>POSIX</code>扩展的正则表达式语法</td></tr><tr><td><code>awk</code></td><td>使用<code>POSIX</code>版本的<code>awk</code>语言的语法</td></tr><tr><td><code>grep</code></td><td>使用<code>POSIX</code>版本的<code>grep</code>的语法</td></tr><tr><td><code>egrep</code></td><td>使用<code>POSIX</code>版本的<code>egrep</code>的语法</td></tr></tbody></table><ul><li>可以将正则表达式本身看做是一种简单程序语言设计的程序。在运行时，当一个<code>regex</code>对象被初始化或被赋予新模式时，才被“编译”。</li><li>如果编写的正则表达式存在错误，会在运行时抛出一个<code>regex_error</code>的异常。</li><li>避免创建不必要的正则表达式。构建一个<code>regex</code>对象可能比较耗时。</li></ul><h3 id="匹配与regex迭代器类型"><a href="#匹配与regex迭代器类型" class="headerlink" title="匹配与regex迭代器类型"></a>匹配与regex迭代器类型</h3><p><code>sregex_iterator</code>操作（用来获得所有匹配）：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>sregex_iterator it(b, e, r);</code></td><td>一个<code>sregex_iterator</code>，遍历迭代器<code>b</code>和<code>e</code>表示的<code>string</code>。它调用<code>sregex_search(b, e, r)</code>将<code>it</code>定位到输入中第一个匹配的位置。</td></tr><tr><td><code>sregex_iterator end;</code></td><td><code>sregex_iterator</code>的尾后迭代器</td></tr><tr><td><code>*it</code>， <code>it-&gt;</code></td><td>根据最后一个调用<code>regex_search</code>的结果，返回一个<code>smatch</code>对象的引用或一个指向<code>smatch</code>对象的指针。</td></tr><tr><td><code>++it</code> ， <code>it++</code></td><td>从输入序列当前匹配位置开始调用<code>regex_search</code>。前置版本返回递增后迭代器；后置版本返回旧值。</td></tr><tr><td><code>it1 == it2</code></td><td>如果两个<code>sregex_iterator</code>都是尾后迭代器，则它们相等。两个非尾后迭代器是从相同的输入序列和<code>regex</code>对象构造，则它们相等。</td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 将字符串file中所有匹配模式r的子串输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span>sregex_iterator <span class="token function">it</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> end_it<span class="token punctuation">;</span> it <span class="token operator">!=</span> end_it<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">-></span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>smatch</code>操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>m.ready()</code></td><td>如果已经通过调用<code>regex_search</code>或<code>regex_match</code>设置了<code>m</code>，则返回<code>true</code>；否则返回<code>false</code>。如果<code>ready</code>返回<code>false</code>，则对<code>m</code>进行操作是未定义的。</td></tr><tr><td><code>m.size()</code></td><td>如果匹配失败，则返回0，；否则返回最近一次匹配的正则表达式中子表达式的数目。</td></tr><tr><td><code>m.empty()</code></td><td>等价于<code>m.size() == 0</code></td></tr><tr><td><code>m.prefix()</code></td><td>一个<code>ssub_match</code>对象，标识当前匹配之前的序列</td></tr><tr><td><code>m.suffix()</code></td><td>一个<code>ssub_match</code>对象，标识当前匹配之后的部分</td></tr><tr><td><code>m.format(...)</code></td><td></td></tr><tr><td><code>m.length(n)</code></td><td>第<code>n</code>个匹配的子表达式的大小</td></tr><tr><td><code>m.position(n)</code></td><td>第<code>n</code>个子表达式距离序列开始的长度</td></tr><tr><td><code>m.str(n)</code></td><td>第<code>n</code>个子表达式匹配的<code>string</code></td></tr><tr><td><code>m[n]</code></td><td>对应第<code>n</code>个子表达式的<code>ssub_match</code>对象</td></tr><tr><td><code>m.begin(), m.end()</code></td><td>表示<code>m</code>中<code>ssub_match</code>元素范围的迭代器。</td></tr><tr><td><code>m.cbegin(), m.cend()</code></td><td>常量迭代器</td></tr></tbody></table><h3 id="使用子表达式"><a href="#使用子表达式" class="headerlink" title="使用子表达式"></a>使用子表达式</h3><ul><li>正则表达式语法通常用括号表示子表达式。</li><li>子表达式的索引从1开始。</li><li>在<code>fmt</code>中用<code>$</code>后跟子表达式的索引号来标识一个特定的子表达式。</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">regex_search</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> results<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> results<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// .str(1)获取第一个子表达式匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ssub_match</code>子匹配操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>matched</code></td><td>一个<code>public bool</code>数据成员，指出<code>ssub_match</code>是否匹配了</td></tr><tr><td><code>first</code>， <code>second</code></td><td><code>public</code>数据成员，指向匹配序列首元素和尾后位置的迭代器。如果未匹配，则<code>first</code>和<code>second</code>是相等的。</td></tr><tr><td><code>length()</code></td><td>匹配的大小，如果<code>matched</code>为<code>false</code>，则返回0。</td></tr><tr><td><code>str()</code></td><td>返回一个包含输入中匹配部分的<code>string</code>。如果<code>matched</code>为<code>false</code>，则返回空<code>string</code>。</td></tr><tr><td><code>s = ssub</code></td><td>将<code>ssub_match</code>对象<code>ssub</code>转化为<code>string</code>对象<code>s</code>。等价于<code>s=ssub.str()</code>，转换运算符不是<code>explicit</code>的。</td></tr></tbody></table><h3 id="使用regex-replace"><a href="#使用regex-replace" class="headerlink" title="使用regex_replace"></a>使用regex_replace</h3><p>正则表达式替换操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>m.format(dest, fmt, mft)</code>, <code>m.format(fmt, mft)</code></td><td>使用格式字符串<code>fmt</code>生成格式化输出，匹配在<code>m</code>中，可选的<code>match_flag_type</code>标志在<code>mft</code>中。第一个版本写入迭代器<code>dest</code>指向的目的为止，并接受<code>fmt</code>参数，可以是一个<code>string</code>，也可以是一个指向空字符结尾的字符数组的指针。<code>mft</code>的默认值是<code>format_default</code>。</td></tr><tr><td><code>rege_replace(dest, seq, r, fmt, mft)</code>，  <code>regex_replace(seq, r, fmt, mft)</code></td><td>遍历<code>seq</code>，用<code>regex_search</code>查找与<code>regex</code>对象<code>r</code>相匹配的子串，使用格式字符串<code>fmt</code>和可选的<code>match_flag_type</code>标志来生成输出。<code>mft</code>的默认值是<code>match_default</code></td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string phone <span class="token operator">=</span> <span class="token string">"(\\()?(\\d&#123;3&#125;)(\\))?([-. ])?(\\d&#123;3&#125;)([-. ]?)(\\d&#123;4&#125;)"</span>string fmt <span class="token operator">=</span> <span class="token string">"$2.$5.$7"</span><span class="token punctuation">;</span>  <span class="token comment">// 将号码格式改为ddd.ddd.dddd</span>regex <span class="token function">r</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 用来寻找模式的regex对象</span>string number <span class="token operator">=</span> <span class="token string">"(908) 555-1800"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">regex_replace</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> r<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匹配标志：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>match_default</code></td><td>等价于<code>format_default</code></td></tr><tr><td><code>match_not_bol</code></td><td>不将首字符作为行首处理</td></tr><tr><td><code>match_not_eol</code></td><td>不将尾字符作为行尾处理</td></tr><tr><td><code>match_not_bow</code></td><td>不将首字符作为单词首处理</td></tr><tr><td><code>match_not_eow</code></td><td>不将尾字符作为单词尾处理</td></tr><tr><td><code>match_any</code></td><td>如果存在多于一个匹配，则可以返回任意一个匹配</td></tr><tr><td><code>match_not_null</code></td><td>不匹配任何空序列</td></tr><tr><td><code>match_continuous</code></td><td>匹配必须从输入的首字符开始</td></tr><tr><td><code>match_prev_avail</code></td><td>输入序列包含第一个匹配之前的内容</td></tr><tr><td><code>format_default</code></td><td>用<code>ECMAScript</code>规则替换字符串</td></tr><tr><td><code>format_sed</code></td><td>用<code>POSIX sed</code>规则替换字符串</td></tr><tr><td><code>format_no_copy</code></td><td>不输出输入序列中未匹配的部分</td></tr><tr><td><code>format_first_only</code></td><td>只替换子表达式的第一次出现</td></tr></tbody></table><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><ul><li>新标准之前，C和C++都依赖一个简单的C库函数<code>rand</code>来生成随机数，且只符合均匀分布。</li><li>新标准：<strong>随机数引擎</strong> + <strong>随机数分布类</strong>， 定义在   <code>random</code>头文件中。</li><li>C++程序应该使用<code>default_random_engine</code>类和恰当的分布类对象。</li></ul><h3 id="随机数引擎和分布"><a href="#随机数引擎和分布" class="headerlink" title="随机数引擎和分布"></a>随机数引擎和分布</h3><p>随机数引擎操作</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>Engine e;</code></td><td>默认构造函数；使用该引擎类型默认的种子</td></tr><tr><td><code>Engine e(s);</code></td><td>使用整型值<code>s</code>作为种子</td></tr><tr><td><code>e.seed(s)</code></td><td>使用种子<code>s</code>重置引擎的状态</td></tr><tr><td><code>e.min()</code>，<code>e.max()</code></td><td>此引擎可生成的最小值和最大值</td></tr><tr><td><code>Engine::result_type</code></td><td>此引擎生成的<code>unsigned</code>整型类型</td></tr><tr><td><code>e.discard(u)</code></td><td>将引擎推进<code>u</code>步；<code>u</code>的类型为<code>unsigned long long</code></td></tr></tbody></table><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 初始化分布类型</span>uniform_int_distribution<span class="token operator">&lt;</span><span class="token keyword">unsigned</span><span class="token operator">></span> <span class="token function">u</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化引擎</span>default_random_engine e<span class="token punctuation">;</span><span class="token comment">// 随机生成0-9的无符号整数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">u</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置随机数发生器种子</strong>：</p><ul><li>种子就是一个数值，引擎可以利用它从序列中一个新位置重新开始生成随机数。</li><li>种子可以使用系统函数<code>time(0)</code>。</li></ul><h3 id="其他随机数分布"><a href="#其他随机数分布" class="headerlink" title="其他随机数分布"></a>其他随机数分布</h3><p>分布类型的操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>Dist d;</code></td><td>默认够赞函数；使<code>d</code>准备好被使用。其他构造函数依赖于<code>Dist</code>的类型；分布类型的构造函数是<code>explicit</code>的。</td></tr><tr><td><code>d(e)</code></td><td>用相同的<code>e</code>连续调用<code>d</code>的话，会根据<code>d</code>的分布式类型生成一个随机数序列；<code>e</code>是一个随机数引擎对象。</td></tr><tr><td><code>d.min()</code>,<code>d.max()</code></td><td>返回<code>d(e)</code>能生成的最小值和最大值。</td></tr><tr><td><code>d.reset()</code></td><td>重建<code>d</code>的状态，是的随后对<code>d</code>的使用不依赖于<code>d</code>已经生成的值。</td></tr></tbody></table><h2 id="IO库再探"><a href="#IO库再探" class="headerlink" title="IO库再探"></a>IO库再探</h2><h3 id="格式化输入与输出"><a href="#格式化输入与输出" class="headerlink" title="格式化输入与输出"></a>格式化输入与输出</h3><ul><li>使用操纵符改变格式状态。</li><li>控制布尔值的格式： <code>cout &lt;&lt; boolalpha &lt;&lt; true &lt;&lt; endl;</code></li><li>指定整型的进制：<code>cout &lt;&lt; dec &lt;&lt; 20 &lt;&lt; endl;</code></li></ul><p>定义在<code>iostream</code>中的操纵符：</p><table><thead><tr><th>操纵符</th><th>解释</th></tr></thead><tbody><tr><td><code>boolalpha</code></td><td>将<code>true</code>和<code>false</code>输出为字符串</td></tr><tr><td><code>* noboolalpha</code></td><td>将<code>true</code>和<code>false</code>输出为1,0</td></tr><tr><td><code>showbase</code></td><td>对整型值输出表示进制的前缀</td></tr><tr><td><code>* noshowbase</code></td><td>不生成表示进制的前缀</td></tr><tr><td><code>showpoint</code></td><td>对浮点值总是显示小数点</td></tr><tr><td><code>* noshowpoint</code></td><td>只有当浮点值包含小数部分时才显示小数点</td></tr><tr><td><code>showpos</code></td><td>对非负数显示<code>+</code></td></tr><tr><td><code>* noshowpos</code></td><td>对非负数不显示<code>+</code></td></tr><tr><td><code>uppercase</code></td><td>在十六进制中打印<code>0X</code>，在科学计数法中打印<code>E</code></td></tr><tr><td><code>* nouppercase</code></td><td>在十六进制中打印<code>0x</code>，在科学计数法中打印<code>e</code></td></tr><tr><td><code>* dec</code></td><td>整型值显示为十进制</td></tr><tr><td><code>hex</code></td><td>整型值显示为十六进制</td></tr><tr><td><code>oct</code></td><td>整型值显示为八进制</td></tr><tr><td><code>left</code></td><td>在值的右侧添加填充字符</td></tr><tr><td><code>right</code></td><td>在值的左侧添加填充字符</td></tr><tr><td><code>internal</code></td><td>在符号和值之间添加填充字符</td></tr><tr><td><code>fixed</code></td><td>浮点值显示为定点十进制</td></tr><tr><td><code>scientific</code></td><td>浮点值显示为科学计数法</td></tr><tr><td><code>hexfloat</code></td><td>浮点值显示为十六进制（C++11）</td></tr><tr><td><code>defaultfloat</code></td><td>充值浮点数格式为十进制（C++11）</td></tr><tr><td><code>unitbuf</code></td><td>每次输出操作后都刷新缓冲区</td></tr><tr><td>1</td><td><code>* nounitbuf</code></td></tr><tr><td><code>* skipws</code></td><td>输入运算符跳过空白符</td></tr><tr><td><code>noskipws</code></td><td>输入运算符不跳过空白符</td></tr><tr><td><code>flush</code></td><td>刷新<code>ostream</code>缓冲区</td></tr><tr><td><code>ends</code></td><td>插入空字符，然后刷新<code>ostream</code>缓冲区</td></tr><tr><td><code>endl</code></td><td>插入换行，然后刷新<code>ostream</code>缓冲区</td></tr></tbody></table><p>其中<code>*</code>表示默认的流状态。</p><h3 id="未格式化的输入-输出操作"><a href="#未格式化的输入-输出操作" class="headerlink" title="未格式化的输入/输出操作"></a>未格式化的输入/输出操作</h3><p>单字节低层IO操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>is.get(ch)</code></td><td>从<code>istream is</code>读取下一个字节存入字符<code>cn</code>中。返回<code>is</code>。</td></tr><tr><td><code>os.put(ch)</code></td><td>将字符<code>ch</code>输出到<code>ostream os</code>。返回<code>os</code>。</td></tr><tr><td><code>is.get()</code></td><td>将<code>is</code>的下一个字节作为<code>int</code>返回</td></tr><tr><td><code>is.putback(ch)</code></td><td>将字符<code>ch</code>放回<code>is</code>。返回<code>is</code>。</td></tr><tr><td><code>is.unget()</code></td><td>将<code>is</code>向后移动一个字节。返回<code>is</code>。</td></tr><tr><td><code>is.peek()</code></td><td>将下一个字节作为<code>int</code>返回，但不从流中删除它。</td></tr></tbody></table><p>多字节低层IO操作：</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>is.get(sink, size, delim)</code></td><td>从<code>is</code>中读取最多<code>size</code>个字节，并保存在字符数组中，字符数组的起始地址由<code>sink</code>给出。读取过程直到遇到字符<code>delim</code>或读取了<code>size</code>个字节或遇到文件尾时停止。如果遇到了<code>delim</code>，则将其留在输入流中，不读取出来存入<code>sink</code>。</td></tr><tr><td><code>is.getline(sink, size, delim)</code></td><td>与接收三个参数的<code>get</code>版本类似，但会读取并丢弃<code>delim</code>。</td></tr><tr><td><code>is.read(sink, size)</code></td><td>读取最多<code>size</code>个字节，存入字符数组<code>sink</code>中。返回<code>is</code>。</td></tr><tr><td><code>is.gcount()</code></td><td>返回上一个未格式化读取从<code>is</code>读取的字节数</td></tr><tr><td><code>os.write(source, size)</code></td><td>将字符数组<code>source</code>中的<code>size</code>个字节写入<code>os</code>。返回<code>os</code>。</td></tr><tr><td><code>is.ignore(size, delim)</code></td><td>读取并忽略最多<code>size</code>个字符，包括<code>delim</code>。与其他未格式化函数不同，<code>ignore</code>有默认参数：<code>size</code>默认值是1，<code>delim</code>的默认值为文件尾。</td></tr></tbody></table><ul><li>注意：一般情况下，主张使用标准库提供的高层抽象，低层函数容易出错。</li></ul><h3 id="流随机访问"><a href="#流随机访问" class="headerlink" title="流随机访问"></a>流随机访问</h3><ul><li>只适用于<code>fstream</code>和<code>sstream</code>。</li><li>通过将标记<code>seek</code>到一个给定位置来重定位它。</li><li><code>tell</code>告诉我们标记的当前位置。</li></ul><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td><code>tellg()</code>，<code>tellp</code></td><td>返回一个输入流中（<code>tellg</code>）或输出流中（<code>tellp</code>）标记的当前位置。</td></tr><tr><td><code>seekg(pos)</code>，<code>seekp(pos)</code></td><td>在一个输入流或输出流中将标记重定位到给定的绝对地址。<code>pos</code>通常是一个当前<code>teelg</code>或<code>tellp</code>返回的值。</td></tr><tr><td><code>seekp(off, from)</code>，<code>seekg(off, from)</code></td><td>在一个输入流或输出流中将标记定位到<code>from</code>之前或之后<code>off</code>个字符，<code>from</code>可以是下列值之一：<code>beg</code>，偏移量相对于流开始位置；<code>cur</code>，偏移量相对于流当前位置；<code>end</code>，偏移量相对于流结尾位置。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案7</title>
      <link href="2021/04/10/excersize/ch07/"/>
      <url>2021/04/10/excersize/ch07/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-类"><a href="#第七章-类" class="headerlink" title="第七章 类"></a>第七章 类</h1><h2 id="练习7-1"><a href="#练习7-1" class="headerlink" title="练习7.1"></a>练习7.1</h2><p>使用2.6.1节定义的<code>Sales_data</code>类为1.6节的交易处理程序编写一个新版本。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span><span class="token punctuation">&#123;</span>    string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> total<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> total<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> total<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Sales_data trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> trans<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> trans<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span>bookNo <span class="token operator">==</span> trans<span class="token punctuation">.</span>bookNo<span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                total<span class="token punctuation">.</span>units_sold <span class="token operator">+=</span> trans<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>                total<span class="token punctuation">.</span>revenue <span class="token operator">+=</span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-2"><a href="#练习7-2" class="headerlink" title="练习7.2"></a>练习7.2</h2><p>曾在2.6.2节的练习中编写了一个<code>Sales_data</code>类，请向这个类添加<code>combine</code>函数和<code>isbn</code>成员。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-3"><a href="#练习7-3" class="headerlink" title="练习7.3"></a>练习7.3</h2><p>修改7.1.1节的交易处理程序，令其使用这些成员。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> total<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> total<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> total<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Sales_data trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> trans<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> trans<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> trans<span class="token punctuation">.</span>revenue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cout <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>bookNo <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-4"><a href="#练习7-4" class="headerlink" title="练习7.4"></a>练习7.4</h2><p>编写一个名为<code>Person</code>的类，使其表示人员的姓名和地址。使用<code>string</code>对象存放这些元素，接下来的练习将不断充实这个类的其他特征。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-5"><a href="#练习7-5" class="headerlink" title="练习7.5"></a>练习7.5</h2><p>在你的<code>Person</code>类中提供一些操作使其能够返回姓名和地址。<br>这些函数是否应该是<code>const</code>的呢？解释原因。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">auto</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-></span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">auto</span> <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-></span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是<code>const</code>的。因为常量的<code>Person</code>对象也需要使用这些函数操作。</p><h2 id="练习7-6"><a href="#练习7-6" class="headerlink" title="练习7.6"></a>练习7.6</h2><p>对于函数<code>add</code>、<code>read</code>和<code>print</code>，定义你自己的版本。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// member functions.</span>Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// nonmember functions</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-7"><a href="#练习7-7" class="headerlink" title="练习7.7"></a>练习7.7</h2><p>使用这些新函数重写7.1.2节练习中的程序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data total<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Sales_data trans<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> trans<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-8"><a href="#练习7-8" class="headerlink" title="练习7.8"></a>练习7.8</h2><p>为什么<code>read</code>函数将其<code>Sales_data</code>参数定义成普通的引用，而<code>print</code>函数将其参数定义成常量引用？</p><p>解：</p><p>因为<code>read</code>函数会改变对象的内容，而<code>print</code>函数不会。</p><h2 id="练习7-9"><a href="#练习7-9" class="headerlink" title="练习7.9"></a>练习7.9</h2><p>对于7.1.2节练习中代码，添加读取和打印<code>Person</code>对象的操作。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> is <span class="token operator">>></span> person<span class="token punctuation">.</span>name <span class="token operator">>></span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-10"><a href="#练习7-10" class="headerlink" title="练习7.10"></a>练习7.10</h2><p>在下面这条<code>if</code>语句中，条件部分的作用是什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//等价read(std::cin, data1);read(std::cin, data2);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p><code>read</code>函数的返回值是<code>istream</code>对象，<br><code>if</code>语句中条件部分的作用是从输入流中读取数据给两个<code>data</code>对象。</p><h2 id="练习7-11"><a href="#练习7-11" class="headerlink" title="练习7.11 :"></a>练习7.11 :</h2><p>在你的<code>Sales_data</code>类中添加构造函数，<br>然后编写一段程序令其用到每个构造函数。</p><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// nonmember functions</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// member functions.</span><span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data item1<span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        Sales_data <span class="token function">item2</span><span class="token punctuation">(</span><span class="token string">"0-201-78345-X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        Sales_data <span class="token function">item3</span><span class="token punctuation">(</span><span class="token string">"0-201-78345-X"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        Sales_data <span class="token function">item4</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> item4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-12"><a href="#练习7-12" class="headerlink" title="练习7.12"></a>练习7.12</h2><p>把只接受一个<code>istream</code>作为参数的构造函数移到类的内部。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// member functions.</span>Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// nonmember functions</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-13"><a href="#练习7-13" class="headerlink" title="练习7.13"></a>练习7.13</h2><p>使用<code>istream</code>构造函数重写第229页的程序。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data <span class="token function">total</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Sales_data <span class="token function">trans</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>total<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> trans<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                total<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>                total <span class="token operator">=</span> trans<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"No data?!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-14"><a href="#练习7-14" class="headerlink" title="练习7.14"></a>练习7.14</h2><p>编写一个构造函数，令其用我们提供的类内初始值显式地初始化成员。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">units_sold</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习7-15"><a href="#练习7-15" class="headerlink" title="练习7.15"></a>练习7.15</h2><p>为你的<code>Person</code>类添加正确的构造函数。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Person<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> sname<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> saddr<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">address</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>is <span class="token operator">>></span> person<span class="token punctuation">.</span>name <span class="token operator">>></span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-16"><a href="#练习7-16" class="headerlink" title="练习7.16"></a>练习7.16</h2><p>在类的定义中对于访问说明符出现的位置和次数有限定吗？<br>如果有，是什么？什么样的成员应该定义在<code>public</code>说明符之后？<br>什么样的成员应该定义在<code>private</code>说明符之后？</p><p>解：</p><p>在类的定义中对于访问说明符出现的位置和次数<strong>没有限定</strong>。</p><p>每个访问说明符指定了接下来的成员的访问级别，其有效范围直到出现下一个访问说明符或者达到类的结尾处为止。</p><p>如果某个成员能够在整个程序内都被访问，那么它应该定义为<code>public</code>;<br>如果某个成员只能在类内部访问，那么它应该定义为<code>private</code>。</p><h2 id="练习7-17"><a href="#练习7-17" class="headerlink" title="练习7.17"></a>练习7.17</h2><p>使用<code>class</code>和<code>struct</code>时有区别吗？如果有，是什么？</p><p>解：</p><p><code>class</code>和<code>struct</code>的唯一区别是默认的访问级别不同。</p><h2 id="练习7-18"><a href="#练习7-18" class="headerlink" title="练习7.18"></a>练习7.18</h2><p>封装是何含义？它有什么用处？</p><p>解：</p><p>将类内部分成员设置为外部不可见，而提供部分接口给外面，这样的行为叫做封装。</p><p>用处：</p><ul><li>1.确保用户的代码不会无意间破坏封装对象的状态。</li><li>2.被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。</li></ul><h2 id="练习7-19"><a href="#练习7-19" class="headerlink" title="练习7.19"></a>练习7.19</h2><p>在你的<code>Person</code>类中，你将把哪些成员声明成<code>public</code>的？<br>哪些声明成<code>private</code>的？<br>解释你这样做的原因。</p><p>构造函数、<code>getName()</code>、<code>getAddress()</code>函数将设为<code>public</code>。<br><code>name</code>和 <code>address</code> 将设为<code>private</code>。<br>函数是暴露给外部的接口，因此要设为<code>public</code>；<br>而数据则应该隐藏让外部不可见。</p><h2 id="练习7-20"><a href="#练习7-20" class="headerlink" title="练习7.20"></a>练习7.20</h2><p>友元在什么时候有用？请分别举出使用友元的利弊。</p><p>解：</p><p>当其他类或者函数想要访问当前类的私有变量时，这个时候应该用友元。</p><p>利：</p><p>与当前类有关的接口函数能直接访问类的私有变量。</p><p>弊：</p><p>牺牲了封装性与可维护性。</p><h2 id="练习7-21"><a href="#练习7-21" class="headerlink" title="练习7.21"></a>练习7.21</h2><p>修改你的<code>Sales_data</code>类使其隐藏实现的细节。<br>你之前编写的关于<code>Sales_data</code>操作的程序应该继续使用，借助类的新定义重新编译该程序，确保其正常工作。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// member functions.</span>Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// friend functions</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-22"><a href="#练习7-22" class="headerlink" title="练习7.22"></a>练习7.22</h2><p>修改你的<code>Person</code>类使其隐藏实现的细节。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string sname<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string saddr<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>sname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">address</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> address<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span><span class="token function">read</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    is <span class="token operator">>></span> person<span class="token punctuation">.</span>name <span class="token operator">>></span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span><span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>address<span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-23"><a href="#练习7-23" class="headerlink" title="练习7.23"></a>练习7.23</h2><p>编写你自己的<code>Screen</code>类型。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>        <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>        <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width<span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="练习7-24"><a href="#练习7-24" class="headerlink" title="练习7.24"></a>练习7.24</h1><p>给你的<code>Screen</code>类添加三个构造函数：一个默认构造函数；另一个构造函数接受宽和高的值，然后将<code>contents</code>初始化成给定数量的空白；第三个构造函数接受宽和高的值以及一个字符，该字符作为初始化后屏幕的内容。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>        <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>        <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 2</span>        <span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 3</span>        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width<span class="token operator">+</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-25"><a href="#练习7-25" class="headerlink" title="练习7.25"></a>练习7.25</h2><p><code>Screen</code>能安全地依赖于拷贝和赋值操作的默认版本吗？<br>如果能，为什么？如果不能？为什么？</p><p>解：</p><p>能。 <code>Screen</code>的成员只有内置类型和<code>string</code>，因此能安全地依赖于拷贝和赋值操作的默认版本。</p><p>管理动态内存的类则不能依赖于拷贝和赋值操作的默认版本，而且也应该尽量使用<code>string</code>和<code>vector</code>来避免动态管理内存的复杂性。</p><h2 id="练习7-26"><a href="#练习7-26" class="headerlink" title="练习7.26"></a>练习7.26</h2><p>将<code>Sales_data::avg_price</code>定义成内联函数。</p><p>解：</p><p>在头文件中加入：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> units_sold <span class="token operator">?</span> revenue<span class="token operator">/</span>units_sold <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-27"><a href="#练习7-27" class="headerlink" title="练习7.27"></a>练习7.27</h2><p>给你自己的<code>Screen</code>类添加<code>move</code>、<code>set</code> 和<code>display</code>函数，通过执行下面的代码检验你的类是否正确。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>增加代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cursor <span class="token operator">=</span> r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width<span class="token operator">+</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myScreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-28"><a href="#练习7-28" class="headerlink" title="练习7.28"></a>练习7.28</h2><p>如果<code>move</code>、<code>set</code>和<code>display</code>函数的返回类型不是<code>Screen&amp;</code> 而是<code>Screen</code>，则在上一个练习中将会发生什么？</p><p>解：</p><p>如果返回类型是<code>Screen</code>，那么<code>move</code>返回的是<code>*this</code>的一个副本，因此<code>set</code>函数只能改变临时副本而不能改变<code>myScreen</code>的值。</p><h2 id="练习7-29"><a href="#练习7-29" class="headerlink" title="练习7.29"></a>练习7.29</h2><p>修改你的<code>Screen</code>类，令<code>move</code>、<code>set</code>和<code>display</code>函数返回<code>Screen</code>并检查程序的运行结果，在上一个练习中你的推测正确吗？</p><p>解：</p><p>推测正确。</p><pre class="line-numbers language-none"><code class="language-none">#with &#39;&amp;&#39;XXXXXXXXXXXXXXXXXXXX#XXXXXXXXXXXXXXXXXXXXXXXX#XXXX                    ^# without &#39;&amp;&#39;XXXXXXXXXXXXXXXXXXXX#XXXXXXXXXXXXXXXXXXXXXXXXXXXXX                    ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-30"><a href="#练习7-30" class="headerlink" title="练习7.30"></a>练习7.30</h2><p>通过<code>this</code>指针使用成员的做法虽然合法，但是有点多余。讨论显示使用指针访问成员的优缺点。</p><p>解：</p><p>优点：</p><p>程序的意图更明确</p><p>函数的参数可以与成员同名，如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">setAddr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token operator">-></span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺点：</p><p>有时候显得有点多余，如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>addr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习7-31"><a href="#练习7-31" class="headerlink" title="练习7.31"></a>练习7.31</h2><p>定义一对类<code>X</code>和<code>Y</code>，其中<code>X</code>包含一个指向<code>Y</code>的指针，而<code>Y</code>包含一个类型为<code>X</code>的对象。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span>    Y<span class="token operator">*</span> y <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">&#123;</span>    X x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-32"><a href="#练习7-32" class="headerlink" title="练习7.32"></a>练习7.32</h2><p>定义你自己的<code>Screen</code>和<code>Window_mgr</code>，其中<code>clear</code>是<code>Window_mgr</code>的成员，是<code>Screen</code>的友元。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">using</span> ScreenIndex <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span> screens<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">using</span> pos <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Screen</span><span class="token punctuation">(</span>pos ht<span class="token punctuation">,</span> pos wd<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">height</span><span class="token punctuation">(</span>ht<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>ht<span class="token operator">*</span>wd<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pos width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token double-colon punctuation">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Screen<span class="token operator">&amp;</span> s <span class="token operator">=</span> screens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>contents <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>height<span class="token operator">*</span>s<span class="token punctuation">.</span>width<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cursor <span class="token operator">=</span> r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>contents<span class="token punctuation">[</span>r<span class="token operator">*</span>width <span class="token operator">+</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-33"><a href="#练习7-33" class="headerlink" title="练习7.33"></a>练习7.33</h2><p>如果我们给<code>Screen</code>添加一个如下所示的<code>size</code>成员将发生什么情况？如果出现了问题，请尝试修改它。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pos <span class="token class-name">Screen</span><span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> height <span class="token operator">*</span> width<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>纠正：错误为 error: extra qualification ‘Screen::’ on member ‘size’ [-fpermissive]<br>则应该去掉Screen::,改为<br> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pos <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> height <span class="token operator">*</span> width<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="练习7-34"><a href="#练习7-34" class="headerlink" title="练习7.34"></a>练习7.34</h2><p>如果我们把第256页<code>Screen</code>类的<code>pos</code>的<code>typedef</code>放在类的最后一行会发生什么情况？</p><p>解：</p><p>在 dummy_fcn(pos height) 函数中会出现 未定义的标识符pos。</p><p>类型名的定义通常出现在类的开始处，这样就能确保所有使用该类型的成员都出现在类名的定义之后。</p><h2 id="练习7-35"><a href="#练习7-35" class="headerlink" title="练习7.35"></a>练习7.35</h2><p>解释下面代码的含义，说明其中的<code>Type</code>和<code>initVal</code>分别使用了哪个定义。如果代码存在错误，尝试修改它。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> string Type<span class="token punctuation">;</span>Type <span class="token function">initVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Exercise</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> <span class="token keyword">double</span> Type<span class="token punctuation">;</span>    Type <span class="token function">setVal</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span>    Type <span class="token function">initVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Type <span class="token class-name">Exercise</span><span class="token double-colon punctuation">::</span><span class="token function">setVal</span><span class="token punctuation">(</span>Type parm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     val <span class="token operator">=</span> parm <span class="token operator">+</span> <span class="token function">initVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>书上255页中说：</p><pre class="line-numbers language-none"><code class="language-none">然而在类中，如果成员使用了外层作用域中的某个名字，而该名字代表一种类型，则类不能在之后重新定义该名字。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此重复定义<code>Type</code>是错误的行为。</p><p>虽然重复定义类型名字是错误的行为，但是编译器并不为此负责。所以我们要人为地遵守一些原则，在这里有一些讨论。</p><h2 id="练习7-36"><a href="#练习7-36" class="headerlink" title="练习7.36"></a>练习7.36</h2><p>下面的初始值是错误的，请找出问题所在并尝试修改它。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span><span class="token function">X</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rem</span><span class="token punctuation">(</span>base <span class="token operator">%</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> rem<span class="token punctuation">,</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>应该改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span><span class="token function">X</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">base</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rem</span><span class="token punctuation">(</span>base <span class="token operator">%</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> base<span class="token punctuation">,</span> rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-37"><a href="#练习7-37" class="headerlink" title="练习7.37"></a>练习7.37</h2><p>使用本节提供的<code>Sales_data</code>类，确定初始化下面的变量时分别使用了哪个构造函数，然后罗列出每个对象所有的数据成员的值。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data <span class="token function">first_item</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 Sales_data(std::istream &amp;is) ; 各成员值从输入流中读取</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用默认构造函数  bookNo = "", cnt = 0, revenue = 0.0</span>    Sales_data next<span class="token punctuation">;</span>    <span class="token comment">// 使用 Sales_data(std::string s = "");   bookNo = "9-999-99999-9", cnt = 0, revenue = 0.0</span>    Sales_data <span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"9-999-99999-9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-38"><a href="#练习7-38" class="headerlink" title="练习7.38"></a>练习7.38</h2><p>有些情况下我们希望提供<code>cin</code>作为接受<code>istream&amp;</code>参数的构造函数的默认实参，请声明这样的构造函数。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习7-39"><a href="#练习7-39" class="headerlink" title="练习7.39"></a>练习7.39</h2><p>如果接受<code>string</code>的构造函数和接受<code>istream&amp;</code>的构造函数都使用默认实参，这种行为合法吗？如果不，为什么？</p><p>解：</p><p>不合法。当你调用<code>Sales_data()</code>构造函数时，无法区分是哪个重载。</p><h2 id="练习7-40"><a href="#练习7-40" class="headerlink" title="练习7.40"></a>练习7.40</h2><p>从下面的抽象概念中选择一个（或者你自己指定一个），思考这样的类需要哪些数据成员，提供一组合理的构造函数并阐明这样做的原因。</p><pre class="line-numbers language-none"><code class="language-none">(a) Book(b) Data(c) Employee(d) Vehicle(e) Object(f) Tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>(a) Book.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> isbn<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> author<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> pubdate<span class="token punctuation">)</span>        <span class="token operator">:</span><span class="token function">isbn_</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">author_</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pubdate_</span><span class="token punctuation">(</span>pubdate<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span> <span class="token function">Book</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         in <span class="token operator">>></span> isbn_ <span class="token operator">>></span> name_ <span class="token operator">>></span> author_ <span class="token operator">>></span> pubdate_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">unsigned</span> isbn_<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string name_<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string author_<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string pubdate_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-41"><a href="#练习7-41" class="headerlink" title="练习7.41"></a>练习7.41</h2><p>使用委托构造函数重新编写你的<code>Sales_data</code>类，给每个构造函数体添加一条语句，令其一旦执行就打印一条信息。用各种可能的方式分别创建<code>Sales_data</code>对象，认真研究每次输出的信息直到你确实理解了委托构造函数的执行顺序。</p><p>解：</p><ul><li><a href="https://github.com/jinbaotang/Cpp_Primer_Practice/tree/master/cpp_source/ch07/ex_7_41.h">头文件</a></li><li><a href="https://github.com/jinbaotang/Cpp_Primer_Practice/tree/master/cpp_source/ch07/ex_7_41.cpp">源文件</a></li><li><a href="https://github.com/jinbaotang/Cpp_Primer_Practice/tree/master/cpp_source/ch07/ex_7_41_main.cpp">主函数</a></li></ul><p>总结：使用委托构造函数，调用顺序是：</p><ul><li>1.实际的构造函数的函数体。</li><li>2.委托构造函数的函数体。</li></ul><h2 id="练习7-42"><a href="#练习7-42" class="headerlink" title="练习7.42"></a>练习7.42</h2><p>对于你在练习7.40中编写的类，确定哪些构造函数可以使用委托。如果可以的话，编写委托构造函数。如果不可以，从抽象概念列表中重新选择一个你认为可以使用委托构造函数的，为挑选出的这个概念编写类定义。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> isbn<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> author<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> pubdate<span class="token punctuation">)</span>        <span class="token operator">:</span><span class="token function">isbn_</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">author_</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pubdate_</span><span class="token punctuation">(</span>pubdate<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> isbn<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Book</span><span class="token punctuation">(</span>isbn<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span> <span class="token function">Book</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         in <span class="token operator">>></span> isbn_ <span class="token operator">>></span> name_ <span class="token operator">>></span> author_ <span class="token operator">>></span> pubdate_<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">unsigned</span> isbn_<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string name_<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string author_<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string pubdate_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-43"><a href="#练习7-43" class="headerlink" title="练习7.43"></a>练习7.43</h2><p>假定有一个名为<code>NoDefault</code>的类，它有一个接受<code>int</code>的构造函数，但是没有默认构造函数。定义类<code>C</code>，<code>C</code>有一个 <code>NoDefault</code>类型的成员，定义<code>C</code>的默认构造函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">NoDefault</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">NoDefault</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">private</span><span class="token operator">:</span>    NoDefault def<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-44"><a href="#练习7-44" class="headerlink" title="练习7.44"></a>练习7.44</h2><p>下面这条声明合法吗？如果不，为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>NoDefault<span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vec初始化有10个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>不合法。因为<code>NoDefault</code>没有默认构造函数。</p><h2 id="练习7-45"><a href="#练习7-45" class="headerlink" title="练习7.45"></a>练习7.45</h2><p>如果在上一个练习中定义的vector的元素类型是C，则声明合法吗？为什么？</p><p>合法。因为<code>C</code>有默认构造函数。</p><h2 id="练习7-46"><a href="#练习7-46" class="headerlink" title="练习7.46"></a>练习7.46</h2><p>下面哪些论断是不正确的？为什么？</p><ul><li>(a) 一个类必须至少提供一个构造函数。</li><li>(b) 默认构造函数是参数列表为空的构造函数。</li><li>(c) 如果对于类来说不存在有意义的默认值，则类不应该提供默认构造函数。</li><li>(d) 如果类没有定义默认构造函数，则编译器将为其生成一个并把每个数据成员初始化成相应类型的默认值。</li></ul><p>解：</p><ul><li>(a) 不正确。如果我们的类没有显式地定义构造函数，那么编译器就会为我们隐式地定义一个默认构造函数，并称之为合成的默认构造函数。</li><li>(b) 不完全正确。为每个参数都提供了默认值的构造函数也是默认构造函数。</li><li>(c) 不正确。哪怕没有意义的值也需要初始化。</li><li>(d) 不正确。只有当一个类没有定义<strong>任何构造函数</strong>的时候，编译器才会生成一个默认构造函数。</li></ul><h2 id="练习7-47"><a href="#练习7-47" class="headerlink" title="练习7.47"></a>练习7.47</h2><p>说明接受一个<code>string</code>参数的<code>Sales_data</code>构造函数是否应该是<code>explicit</code>的，并解释这样做的优缺点。</p><p>解：</p><p>是否需要从<code>string</code>到<code>Sales_data</code>的转换依赖于我们对用户使用该转换的看法。在此例中，这种转换可能是对的。<code>null_book</code>中的<code>string</code>可能表示了一个不存在的<code>ISBN</code>编号。</p><p>优点：</p><p>可以抑制构造函数定义的隐式转换</p><p>缺点：</p><p>为了转换要显式地使用构造函数</p><h2 id="练习7-48"><a href="#练习7-48" class="headerlink" title="练习7.48"></a>练习7.48</h2><p>假定<code>Sales_data</code>的构造函数不是<code>explicit</code>的，则下述定义将执行什么样的操作？</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">null_isbn</span><span class="token punctuation">(</span><span class="token string">"9-999-9999-9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data <span class="token function">item1</span><span class="token punctuation">(</span>null_isbn<span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data <span class="token function">item2</span><span class="token punctuation">(</span><span class="token string">"9-999-99999-9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这些定义和是不是<code>explicit</code>的无关。</p><h2 id="练习7-49"><a href="#练习7-49" class="headerlink" title="练习7.49"></a>练习7.49</h2><p>对于<code>combine</code>函数的三种不同声明，当我们调用<code>i.combine(s)</code>时分别发生什么情况？其中<code>i</code>是一个<code>Sales_data</code>，而<code> s</code>是一个<code>string</code>对象。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> Sales_data <span class="token operator">&amp;</span><span class="token function">combine</span><span class="token punctuation">(</span>Sales_data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> Sales_data <span class="token operator">&amp;</span><span class="token function">combine</span><span class="token punctuation">(</span>Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error C2664: 无法将参数 1 从“std::string”转换为“Sales_data &amp;”因为隐式转换只有一次</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> Sales_data <span class="token operator">&amp;</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 该成员函数是const 的，意味着不能改变对象。而 combine函数的本意就是要改变对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习7-50"><a href="#练习7-50" class="headerlink" title="练习7.50"></a>练习7.50</h2><p>确定在你的<code>Person</code>类中是否有一些构造函数应该是<code>explicit</code> 的。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token function">Person</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习7-51"><a href="#练习7-51" class="headerlink" title="练习7.51"></a>练习7.51</h2><p><code>vector</code>将其单参数的构造函数定义成<code>explicit</code>的，而<code>string</code>则不是，你觉得原因何在？</p><p>假如我们有一个这样的函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果<code>vector</code>没有将单参数构造函数定义成<code>explicit</code>的，我们就可以这样调用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很明显这样调用会让人困惑，函数实际上会初始化一个拥有34个元素的<code>vecto</code>r的临时量，然后返回34。但是这样没有任何意义。而<code>string</code>则不同，<code>string</code>的单参数构造函数的参数是<code>const char *</code>，因此凡是在需要用到<code>string</code>的地方都可以用<code> const char *</code>来代替（字面值就是<code>const char *</code>）。如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习7-52"><a href="#练习7-52" class="headerlink" title="练习7.52"></a>练习7.52</h2><p>使用2.6.1节的 <code>Sales_data</code> 类，解释下面的初始化过程。如果存在问题，尝试修改它。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data item <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"987-0590353403"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">15.99</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p><code>Sales_data</code> 类不是聚合类，应该修改成如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold<span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-53"><a href="#练习7-53" class="headerlink" title="练习7.53"></a>练习7.53</h2><p>定义你自己的<code>Debug</code>。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Debug</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">constexpr</span> <span class="token function">Debug</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">hw</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">io</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">other</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">constexpr</span> <span class="token function">Debug</span><span class="token punctuation">(</span><span class="token keyword">bool</span> h<span class="token punctuation">,</span> <span class="token keyword">bool</span> i<span class="token punctuation">,</span> <span class="token keyword">bool</span> o<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">hw</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">io</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">constexpr</span> <span class="token keyword">bool</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> hw <span class="token operator">||</span> io <span class="token operator">||</span> other<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">set_hw</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> hw <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">set_io</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> io <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">set_other</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> other <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> hw<span class="token punctuation">;</span>        <span class="token comment">// runtime error</span>    <span class="token keyword">bool</span> io<span class="token punctuation">;</span>        <span class="token comment">// I/O error</span>    <span class="token keyword">bool</span> other<span class="token punctuation">;</span>     <span class="token comment">// the others</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-54"><a href="#练习7-54" class="headerlink" title="练习7.54"></a>练习7.54</h2><p><code>Debug</code>中以 <code>set_</code> 开头的成员应该被声明成<code>constexpr</code> 吗？如果不，为什么？</p><p>解：</p><p>不能。<code>constexpr</code>函数必须包含一个返回语句。</p><h2 id="练习7-55"><a href="#练习7-55" class="headerlink" title="练习7.55"></a>练习7.55</h2><p>7.5.5节的<code>Data</code>类是字面值常量类吗？请解释原因。</p><p>解：</p><p>不是。因为<code>std::string</code>不是字面值类型。</p><h2 id="练习7-56"><a href="#练习7-56" class="headerlink" title="练习7.56"></a>练习7.56</h2><p>什么是类的静态成员？它有何优点？静态成员与普通成员有何区别？</p><p>解：</p><p>与类本身相关，而不是与类的各个对象相关的成员是静态成员。静态成员能用于某些场景，而普通成员不能。</p><h2 id="练习7-57"><a href="#练习7-57" class="headerlink" title="练习7.57"></a>练习7.57</h2><p>编写你自己的<code>Account</code>类。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> amount <span class="token operator">+=</span> amount <span class="token operator">*</span> interestRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> interestRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rate</span><span class="token punctuation">(</span><span class="token keyword">double</span> newRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> interestRate <span class="token operator">=</span> newRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string owner<span class="token punctuation">;</span>    <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> interestRate<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">double</span> todayRate <span class="token operator">=</span> <span class="token number">42.42</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">initRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> todayRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> Account<span class="token double-colon punctuation">::</span>interestRate <span class="token operator">=</span> <span class="token function">initRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习7-58"><a href="#练习7-58" class="headerlink" title="练习7.58"></a>练习7.58</h2><p>下面的静态数据成员的声明和定义有错误吗？请解释原因。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//example.h</span><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">double</span> rate <span class="token operator">=</span> <span class="token number">6.5</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">static</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>vecSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//example.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"example.h"</span></span><span class="token keyword">double</span> Example<span class="token double-colon punctuation">::</span>rate<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> Example<span class="token double-colon punctuation">::</span>vec<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>rate</code>应该是一个<strong>常量表达式</strong>。而类内只能初始化整型类型的静态常量，所以不能在类内初始化<code>vec</code>。修改后如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// example.h</span><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">double</span> rate <span class="token operator">=</span> <span class="token number">6.5</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> vecSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> vec<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// example.C</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"example.h"</span></span><span class="token keyword">constexpr</span> <span class="token keyword">double</span> Example<span class="token double-colon punctuation">::</span>rate<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token class-name">Example</span><span class="token double-colon punctuation">::</span><span class="token function">vec</span><span class="token punctuation">(</span>Example<span class="token double-colon punctuation">::</span>vecSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案13</title>
      <link href="2021/04/10/excersize/ch13/"/>
      <url>2021/04/10/excersize/ch13/</url>
      
        <content type="html"><![CDATA[<h1 id="第十三章-拷贝控制"><a href="#第十三章-拷贝控制" class="headerlink" title="第十三章 拷贝控制"></a>第十三章 拷贝控制</h1><h2 id="练习13-1"><a href="#练习13-1" class="headerlink" title="练习13.1"></a>练习13.1</h2><blockquote><p>拷贝构造函数是什么？什么时候使用它？</p></blockquote><p>解：</p><p>如果一个构造函数的第一个参数是自身类类型的引用，且任何额外参数都有默认值，则此构造函数是拷贝构造函数。当使用<strong>拷贝初始化</strong>时，我们会用到拷贝构造函数。</p><h2 id="练习13-2"><a href="#练习13-2" class="headerlink" title="练习13.2"></a>练习13.2</h2><blockquote><p>解释为什么下面的声明是非法的：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>Sales_data rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>参数类型应该是引用类型。</p><h2 id="练习13-3"><a href="#练习13-3" class="headerlink" title="练习13.3"></a>练习13.3</h2><blockquote><p>当我们拷贝一个<code>StrBlob</code>时，会发生什么？拷贝一个<code>StrBlobPtr</code>呢？</p></blockquote><p>解：</p><p>当我们拷贝<code>StrBlob</code>时，会使 <code>shared_ptr</code> 的引用计数加1。当我们拷贝 <code>StrBlobPtr</code> 时，引用计数不会变化。</p><h2 id="练习13-4"><a href="#练习13-4" class="headerlink" title="练习13.4"></a>练习13.4</h2><blockquote><p>假定 <code>Point</code> 是一个类类型，它有一个<code>public</code>的拷贝构造函数，指出下面程序片段中哪些地方使用了拷贝构造函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Point global<span class="token punctuation">;</span>Point <span class="token function">foo_bar</span><span class="token punctuation">(</span>Point arg<span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token punctuation">&#123;</span>Point local <span class="token operator">=</span> arg<span class="token punctuation">,</span> <span class="token operator">*</span>heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Point</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2: Point local = arg,  3: Point *heap = new Point(global) </span><span class="token operator">*</span>heap <span class="token operator">=</span> local<span class="token punctuation">;</span> Point pa<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> local<span class="token punctuation">,</span> <span class="token operator">*</span>heap <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 4, 5</span><span class="token keyword">return</span> <span class="token operator">*</span>heap<span class="token punctuation">;</span>  <span class="token comment">// 6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>上面有6处地方使用了拷贝构造函数。</p><h2 id="练习13-5"><a href="#练习13-5" class="headerlink" title="练习13.5"></a>练习13.5</h2><blockquote><p>给定下面的类框架，编写一个拷贝构造函数，拷贝所有成员。你的构造函数应该动态分配一个新的<code>string</code>，并将对象拷贝到<code>ps</code>所指向的位置，而不是拷贝ps本身：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr<span class="token operator">&amp;</span> hp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-6"><a href="#练习13-6" class="headerlink" title="练习13.6"></a>练习13.6</h2><blockquote><p>拷贝赋值运算符是什么？什么时候使用它？合成拷贝赋值运算符完成什么工作？什么时候会生成合成拷贝赋值运算符？</p></blockquote><p>解：</p><p>拷贝赋值运算符是一个名为 <code>operator=</code> 的函数。当赋值运算发生时就会用到它。合成拷贝赋值运算符可以用来禁止该类型对象的赋值。如果一个类未定义自己的拷贝赋值运算符，编译器会为它生成一个合成拷贝赋值运算符。</p><h2 id="练习13-7"><a href="#练习13-7" class="headerlink" title="练习13.7"></a>练习13.7</h2><blockquote><p>当我们将一个 <code>StrBlob</code> 赋值给另一个 <code>StrBlob</code> 时，会发生什么？赋值 <code>StrBlobPtr</code> 呢？</p></blockquote><p>解：</p><p>会发生浅层复制。</p><h2 id="练习13-8"><a href="#练习13-8" class="headerlink" title="练习13.8"></a>练习13.8</h2><blockquote><p>为13.1.1节练习13.5中的 <code>HasPtr</code> 类编写赋值运算符。类似拷贝构造函数，你的赋值运算符应该将对象拷贝到<code>ps</code>指向的位置。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    HasPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>rhs_hp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs_hp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>temp_ps <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>rhs_hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>            ps <span class="token operator">=</span> temp_ps<span class="token punctuation">;</span>            i <span class="token operator">=</span> rhs_hp<span class="token punctuation">.</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-9"><a href="#练习13-9" class="headerlink" title="练习13.9"></a>练习13.9</h2><blockquote><p>析构函数是什么？合成析构函数完成什么工作？什么时候会生成合成析构函数？</p></blockquote><p>解：</p><p>析构函数是类的一个成员函数，名字由波浪号接类名构成。它没有返回值，也不接受参数。合成析构函数可被用来阻止该类型的对象被销毁。当一个类未定义自己的析构函数时，编译器会为它生成一个合成析构函数。</p><h2 id="练习13-10"><a href="#练习13-10" class="headerlink" title="练习13.10"></a>练习13.10</h2><blockquote><p>当一个 <code>StrBlob</code> 对象销毁时会发生什么？一个 <code>StrBlobPtr</code> 对象销毁时呢？</p></blockquote><p>解：</p><p>当一个 <code>StrBlob</code> 对象被销毁时，<code>shared_ptr</code> 的引用计数会减少。当 <code>StrBlobPtr</code> 对象被销毁时，不影响引用计数。</p><h2 id="练习13-11"><a href="#练习13-11" class="headerlink" title="练习13.11"></a>练习13.11</h2><blockquote><p>为前面练习中的 <code>HasPtr</code> 类添加一个析构函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    HasPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>new_ps <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>        ps <span class="token operator">=</span> new_ps<span class="token punctuation">;</span>        i <span class="token operator">=</span> hp<span class="token punctuation">.</span>i<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-12"><a href="#练习13-12" class="headerlink" title="练习13.12"></a>练习13.12</h2><blockquote><p>在下面的代码片段中会发生几次析构函数调用？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">fcn</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">*</span>trans<span class="token punctuation">,</span> Sales_data accum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Sales_data <span class="token function">item1</span><span class="token punctuation">(</span><span class="token operator">*</span>trans<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">item2</span><span class="token punctuation">(</span>accum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> item1<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> item2<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>三次，分别是 <code>accum</code>、<code>item1</code>和<code>item2</code>。</p><h2 id="练习13-13"><a href="#练习13-13" class="headerlink" title="练习13.13"></a>练习13.13</h2><blockquote><p>理解拷贝控制成员和构造函数的一个好方法的定义一个简单的类，为该类定义这些成员，每个成员都打印出自己的名字：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X(const X&amp;)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给 <code>X</code> 添加拷贝赋值运算符和析构函数，并编写一个程序以不同的方式使用 <code>X</code> 的对象：将它们作为非引用参数传递；动态分配它们；将它们存放于容器中；诸如此类。观察程序的输出，直到你确认理解了什么时候会使用拷贝控制成员，以及为什么会使用它们。当你观察程序输出时，记住编译器可以略过对拷贝构造函数的调用。</p><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token keyword">struct</span> <span class="token class-name">X</span> <span class="token punctuation">&#123;</span>    <span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X(const X&amp;)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    X<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> X<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X&amp; operator=(const X&amp;)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"~X()"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> X <span class="token operator">&amp;</span>rx<span class="token punctuation">,</span> X x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>X<span class="token operator">></span> vec<span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span><span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    X <span class="token operator">*</span>px <span class="token operator">=</span> <span class="token keyword">new</span> X<span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">*</span>px<span class="token punctuation">,</span> <span class="token operator">*</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> px<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-14"><a href="#练习13-14" class="headerlink" title="练习13.14"></a>练习13.14</h2><blockquote><p>假定 <code>numbered</code> 是一个类，它有一个默认构造函数，能为每个对象生成一个唯一的序号，保存在名为 <code>mysn</code> 的数据成员中。假定 <code>numbered</code> 使用合成的拷贝控制成员，并给定如下函数：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f</span> <span class="token punctuation">(</span>numbered s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>mysn <span class="token operator">&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则下面代码输出什么内容？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">numbered a<span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>输出3个完全一样的数。</p><h2 id="练习13-15"><a href="#练习13-15" class="headerlink" title="练习13.15"></a>练习13.15</h2><blockquote><p>假定<code>numbered</code> 定义了一个拷贝构造函数，能生成一个新的序列号。这会改变上一题中调用的输出结果吗？如果会改变，为什么？新的输出结果是什么？</p></blockquote><p>解：</p><p>会输出3个不同的数。并且这3个数并不是a、b、c当中的数。</p><h2 id="练习13-16"><a href="#练习13-16" class="headerlink" title="练习13.16"></a>练习13.16</h2><blockquote><p>如果 <code>f</code> 中的参数是 <code>const numbered&amp;</code>，将会怎样？这会改变输出结果吗？如果会改变，为什么？新的输出结果是什么？</p></blockquote><p>解：</p><p>会输出 a、b、c的数。</p><h2 id="练习13-17"><a href="#练习13-17" class="headerlink" title="练习13.17"></a>练习13.17</h2><blockquote><p>分别编写前三题中所描述的 <code>numbered</code> 和 <code>f</code>，验证你是否正确预测了输出结果。</p></blockquote><p>解：</p><p>13.14：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">numbered</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">numbered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mysn <span class="token operator">=</span> unique<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> mysn<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> unique<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> numbered<span class="token double-colon punctuation">::</span>unique <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>numbered s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>mysn <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>numbered a<span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.15：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">numbered</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">numbered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mysn <span class="token operator">=</span> unique<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">numbered</span><span class="token punctuation">(</span><span class="token keyword">const</span> numbered<span class="token operator">&amp;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mysn <span class="token operator">=</span> unique<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mysn<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> unique<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> numbered<span class="token double-colon punctuation">::</span>unique <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>numbered s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>mysn <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    numbered a<span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>13.16：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">numbered</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">numbered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mysn <span class="token operator">=</span> unique<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">numbered</span><span class="token punctuation">(</span><span class="token keyword">const</span> numbered<span class="token operator">&amp;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mysn <span class="token operator">=</span> unique<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> mysn<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> unique<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> numbered<span class="token double-colon punctuation">::</span>unique <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> numbered<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>mysn <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>numbered a<span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-18"><a href="#练习13-18" class="headerlink" title="练习13.18"></a>练习13.18</h2><blockquote><p>定义一个 <code>Employee</code> 类，它包含雇员的姓名和唯一的雇员证号。为这个类定义默认构造函数，以及接受一个表示雇员姓名的 <code>string</code> 的构造函数。每个构造函数应该通过递增一个 <code>static</code> 数据成员来生成一个唯一的证号。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> id_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>string name_<span class="token punctuation">;</span><span class="token keyword">int</span> id_<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_increment<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Employee<span class="token double-colon punctuation">::</span>s_increment <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">Employee</span><span class="token double-colon punctuation">::</span><span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>id_ <span class="token operator">=</span> s_increment<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Employee</span><span class="token double-colon punctuation">::</span><span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>id_ <span class="token operator">=</span> s_increment<span class="token operator">++</span><span class="token punctuation">;</span>name_ <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-19"><a href="#练习13-19" class="headerlink" title="练习13.19"></a>练习13.19</h2><blockquote><p>你的 <code>Employee</code> 类需要定义它自己的拷贝控制成员吗？如果需要，为什么？如果不需要，为什么？实现你认为 <code>Employee</code> 需要的拷贝控制成员。</p></blockquote><p>解：</p><p>可以显式地阻止拷贝。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token keyword">const</span> Employee<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    Employee<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Employee<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> id_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name_<span class="token punctuation">;</span>    <span class="token keyword">int</span> id_<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> s_increment<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-20"><a href="#练习13-20" class="headerlink" title="练习13.20"></a>练习13.20</h2><blockquote><p>解释当我们拷贝、赋值或销毁 <code>TextQuery</code> 和 <code>QueryResult</code> 类对象时会发生什么？</p></blockquote><p>解：</p><p>成员会被复制。</p><h2 id="练习13-21"><a href="#练习13-21" class="headerlink" title="练习13.21"></a>练习13.21</h2><blockquote><p>你认为 <code>TextQuery</code> 和 <code>QueryResult</code> 类需要定义它们自己版本的拷贝控制成员吗？如果需要，为什么？实现你认为这两个类需要的拷贝控制操作。</p></blockquote><p>解：</p><p>合成的版本满足所有的需求。因此不需要自定义拷贝控制成员。</p><h2 id="练习13-22"><a href="#练习13-22" class="headerlink" title="练习13.22"></a>练习13.22</h2><blockquote><p>假定我们希望 <code>HasPtr</code> 的行为像一个值。即，对于对象所指向的 <code>string</code> 成员，每个对象都有一份自己的拷贝。我们将在下一节介绍拷贝控制成员的定义。但是，你已经学习了定义这些成员所需的所有知识。在继续学习下一节之前，为 <code>HasPtr</code> 编写拷贝构造函数和拷贝赋值运算符。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    HasPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> new_p <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>        ps <span class="token operator">=</span> new_p<span class="token punctuation">;</span>        i <span class="token operator">=</span> hp<span class="token punctuation">.</span>i<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-23"><a href="#练习13-23" class="headerlink" title="练习13.23"></a>练习13.23</h2><blockquote><p>比较上一节练习中你编写的拷贝控制成员和这一节中的代码。确定你理解了你的代码和我们的代码之间的差异。</p></blockquote><p>解：<br><br>查看13.22代码。</p><h2 id="练习13-24"><a href="#练习13-24" class="headerlink" title="练习13.24"></a>练习13.24</h2><blockquote><p>如果本节的 <code>HasPtr</code> 版本未定义析构函数，将会发生什么？如果未定义拷贝构造函数，将会发生什么？</p></blockquote><p>解：</p><p>如果未定义析构函数，将会发生内存泄漏。如果未定义拷贝构造函数，将会拷贝指针的值，指向同一个地址。</p><h2 id="练习13-25"><a href="#练习13-25" class="headerlink" title="练习13.25"></a>练习13.25</h2><blockquote><p>假定希望定义 <code>StrBlob</code> 的类值版本，而且希望继续使用 <code>shared_ptr</code>，这样我们的 <code>StrBlobPtr</code> 类就仍能使用指向<code>vector</code>的 <code>weak_ptr</code> 了。你修改后的类将需要一个拷贝的构造函数和一个拷贝赋值运算符，但不需要析构函数。解释拷贝构造函数和拷贝赋值运算符必须要做什么。解释为什么不需要析构函数。</p></blockquote><p>解：</p><p>拷贝构造函数和拷贝赋值运算符要重新动态分配内存。因为 <code>StrBlob</code> 使用的是智能指针，当引用计数为0时会自动释放对象，因此不需要析构函数。</p><h2 id="练习13-26"><a href="#练习13-26" class="headerlink" title="练习13.26"></a>练习13.26</h2><blockquote><p>对上一题中描述的 <code>strBlob</code> 类，编写你自己的版本。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;exception></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConstStrBlobPtr</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StrBlob</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> size_type <span class="token operator">=</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">ConstStrBlobPtr</span><span class="token punctuation">;</span>    ConstStrBlobPtr <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    ConstStrBlobPtr <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token function">StrBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">StrBlob</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>string<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// copy constructor</span>    <span class="token function">StrBlob</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrBlob<span class="token operator">&amp;</span> sb<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token operator">*</span>sb<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// copy-assignment operators</span>    StrBlob<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrBlob<span class="token operator">&amp;</span> sb<span class="token punctuation">)</span><span class="token punctuation">;</span>    size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"pop_back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token operator">-></span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"front on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    string<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"front on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConstStrBlobPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ConstStrBlobPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">curr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">ConstStrBlobPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrBlob <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size_t sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">wptr</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">curr</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// should add const</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span>ConstStrBlobPtr<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> p<span class="token punctuation">.</span>curr <span class="token operator">!=</span> curr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> <span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token comment">// return value should add const</span>        <span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"dereference past end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ConstStrBlobPtr<span class="token operator">&amp;</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>curr<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">check</span><span class="token punctuation">(</span>size_t i<span class="token punctuation">,</span> <span class="token keyword">const</span> string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> ret <span class="token operator">=</span> wptr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"unbound StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> ret<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> wptr<span class="token punctuation">;</span>    size_t curr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_13_26.h"</span></span>ConstStrBlobPtr <span class="token class-name">StrBlob</span><span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">// should add const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">ConstStrBlobPtr</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ConstStrBlobPtr <span class="token class-name">StrBlob</span><span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">// should add const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">ConstStrBlobPtr</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrBlob<span class="token operator">&amp;</span> StrBlob<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrBlob<span class="token operator">&amp;</span> sb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    data <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token operator">*</span>sb<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-27"><a href="#练习13-27" class="headerlink" title="练习13.27"></a>练习13.27</h2><blockquote><p>定义你自己的使用引用计数版本的 <code>HasPtr</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">use</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>use<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">++</span><span class="token operator">*</span>use<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    HasPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">++</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>use<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>use <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>            <span class="token keyword">delete</span> use<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ps <span class="token operator">=</span> rhs<span class="token punctuation">.</span>ps<span class="token punctuation">;</span>        i <span class="token operator">=</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">;</span>        use <span class="token operator">=</span> rhs<span class="token punctuation">.</span>use<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>use <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>            <span class="token keyword">delete</span> use<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    size_t <span class="token operator">*</span>use<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-28"><a href="#练习13-28" class="headerlink" title="练习13.28"></a>练习13.28</h2><blockquote><p>给定下面的类，为其实现一个默认构造函数和必要的拷贝控制成员。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>pravite<span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string value<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">;</span>TreeNode <span class="token operator">*</span>left<span class="token punctuation">;</span>TreeNode <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BinStrTree</span><span class="token punctuation">&#123;</span>pravite<span class="token operator">:</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">const</span> TreeNode <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">left</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">right</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">++</span><span class="token operator">*</span>count<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> TreeNode <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span> left<span class="token punctuation">;</span>            <span class="token keyword">delete</span> right<span class="token punctuation">;</span>            <span class="token keyword">delete</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string value<span class="token punctuation">;</span>    <span class="token keyword">int</span>         <span class="token operator">*</span>count<span class="token punctuation">;</span>    TreeNode    <span class="token operator">*</span>left<span class="token punctuation">;</span>    TreeNode    <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BinStrTree</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BinStrTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">BinStrTree</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinStrTree <span class="token operator">&amp;</span>bst<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token operator">*</span>bst<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    BinStrTree<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinStrTree <span class="token operator">&amp;</span>bst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">BinStrTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">delete</span> root<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    TreeNode <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现和主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_13_28.h"</span></span>TreeNode<span class="token operator">&amp;</span> TreeNode<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> TreeNode <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">++</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> left<span class="token punctuation">;</span>        <span class="token keyword">delete</span> right<span class="token punctuation">;</span>        <span class="token keyword">delete</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    value <span class="token operator">=</span> rhs<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    left <span class="token operator">=</span> rhs<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    right <span class="token operator">=</span> rhs<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    count <span class="token operator">=</span> rhs<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BinStrTree<span class="token operator">&amp;</span> BinStrTree<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> BinStrTree <span class="token operator">&amp;</span>bst<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TreeNode <span class="token operator">*</span>new_root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token operator">*</span>bst<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> root<span class="token punctuation">;</span>    root <span class="token operator">=</span> new_root<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-29"><a href="#练习13-29" class="headerlink" title="练习13.29"></a>练习13.29</h2><blockquote><p>解释 <code>swap(HasPtr&amp;, HasPtr&amp;)</code>中对 <code>swap</code> 的调用不会导致递归循环。</p></blockquote><p>解：</p><p>这其实是3个不同的函数，参数类型不一样，所以不会导致递归循环。</p><h2 id="练习13-30"><a href="#练习13-30" class="headerlink" title="练习13.30"></a>练习13.30</h2><blockquote><p>为你的类值版本的 <code>HasPtr</code> 编写 <code>swap</code> 函数，并测试它。为你的 <code>swap</code> 函数添加一个打印语句，指出函数什么时候执行。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr<span class="token operator">&amp;</span><span class="token punctuation">,</span> HasPtr<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    HasPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> new_p <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>        ps <span class="token operator">=</span> new_p<span class="token punctuation">;</span>        i <span class="token operator">=</span> hp<span class="token punctuation">.</span>i<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ps <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> HasPtr<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ps<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>i<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call swap(HasPtr&amp; lhs, HasPtr&amp; rhs)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-31"><a href="#练习13-31" class="headerlink" title="练习13.31"></a>练习13.31</h2><blockquote><p>为你的 <code>HasPtr</code> 类定义一个 <code>&lt;</code> 运算符，并定义一个 <code>HasPtr</code> 的 <code>vector</code>。为这个 <code>vector</code> 添加一些元素，并对它执行 <code>sort</code>。注意何时会调用 <code>swap</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">HasPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr<span class="token operator">&amp;</span><span class="token punctuation">,</span> HasPtr<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>hp<span class="token punctuation">)</span>         <span class="token operator">:</span> <span class="token function">ps</span><span class="token punctuation">(</span><span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>hp<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>hp<span class="token punctuation">.</span>i<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    HasPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>HasPtr tmp<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">swap</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">HasPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> ps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"call swap(HasPtr &amp;rhs)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>         std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ps <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>ps<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>HasPtr<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> HasPtr<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    lhs<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> HasPtr <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>lhs<span class="token punctuation">.</span>ps <span class="token operator">&lt;</span> <span class="token operator">*</span>rhs<span class="token punctuation">.</span>ps<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-32"><a href="#练习13-32" class="headerlink" title="练习13.32"></a>练习13.32</h2><blockquote><p>类指针的 <code>HasPtr</code> 版本会从 <code>swap</code> 函数收益吗？如果会，得到了什么益处？如果不是，为什么？</p></blockquote><p>解：</p><p>不会。类值的版本利用<code>swap</code>交换指针不用进行内存分配，因此得到了性能上的提升。类指针的版本本来就不用进行内存分配，所以不会得到性能提升。</p><h2 id="练习13-33"><a href="#练习13-33" class="headerlink" title="练习13.33"></a>练习13.33</h2><blockquote><p>为什么<code>Message</code>的成员<code>save</code>和<code>remove</code>的参数是一个 <code>Folder&amp;</code>？为什么我们不能将参数定义为 <code>Folder</code> 或是 <code>const Folder</code>？</p></blockquote><p>解：</p><p>因为 <code>save</code> 和 <code>remove</code> 操作需要更新指定 <code>Folder</code>。</p><h2 id="练习13-34"><a href="#练习13-34" class="headerlink" title="练习13.34"></a>练习13.34</h2><blockquote><p>编写本节所描述的 <code>Message</code>。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">class</span> <span class="token class-name">Folder</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Message <span class="token operator">&amp;</span><span class="token punctuation">,</span> Message <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Folder</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">contents</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>Folder<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Folder<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print_debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>Folder<span class="token operator">*</span><span class="token operator">></span> folders<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add_to_Folders</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove_from_Folders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addFldr</span><span class="token punctuation">(</span>Folder <span class="token operator">*</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> folders<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">remFldr</span><span class="token punctuation">(</span>Folder <span class="token operator">*</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> folders<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Message<span class="token operator">&amp;</span><span class="token punctuation">,</span> Message<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Folder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Folder <span class="token operator">&amp;</span><span class="token punctuation">,</span> Folder <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Folder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Folder</span><span class="token punctuation">(</span><span class="token keyword">const</span> Folder <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Folder<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Folder <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Folder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print_debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>Message<span class="token operator">*</span><span class="token operator">></span> msgs<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add_to_Message</span><span class="token punctuation">(</span><span class="token keyword">const</span> Folder<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove_from_Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addMsg</span><span class="token punctuation">(</span>Message <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> msgs<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">remMsg</span><span class="token punctuation">(</span>Message <span class="token operator">*</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> msgs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Folder <span class="token operator">&amp;</span><span class="token punctuation">,</span> Folder <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现和主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex13_34_36_37.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Message <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> Message <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span>    lhs<span class="token punctuation">.</span><span class="token function">remove_from_Folders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use existing member function to avoid duplicate code.</span>    rhs<span class="token punctuation">.</span><span class="token function">remove_from_Folders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use existing member function to avoid duplicate code.</span>        <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>folders<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>folders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>contents<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>        lhs<span class="token punctuation">.</span><span class="token function">add_to_Folders</span><span class="token punctuation">(</span>lhs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use existing member function to avoid duplicate code.</span>    rhs<span class="token punctuation">.</span><span class="token function">add_to_Folders</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use existing member function to avoid duplicate code.</span><span class="token punctuation">&#125;</span><span class="token comment">// Message Implementation</span><span class="token keyword">void</span> <span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token function">save</span><span class="token punctuation">(</span>Folder <span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">addFldr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use existing member function to avoid duplicate code.</span>    f<span class="token punctuation">.</span><span class="token function">addMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token function">remove</span><span class="token punctuation">(</span>Folder <span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">remFldr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Use existing member function to avoid duplicate code.</span>    f<span class="token punctuation">.</span><span class="token function">remMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token function">add_to_Folders</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> f <span class="token operator">:</span> m<span class="token punctuation">.</span>folders<span class="token punctuation">)</span>        f<span class="token operator">-></span><span class="token function">addMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message <span class="token operator">&amp;</span>m<span class="token punctuation">)</span>     <span class="token operator">:</span> <span class="token function">contents</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">folders</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>folders<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">add_to_Folders</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token function">remove_from_Folders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> f <span class="token operator">:</span> folders<span class="token punctuation">)</span>        f<span class="token operator">-></span><span class="token function">remMsg</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// The book added one line here: folders.clear(); but I think it is redundant and more importantly, it will cause a bug:</span>    <span class="token comment">// - In Message::operator=, in the case of self-assignment, it first calls remove_from_Folders() and its folders.clear() </span>    <span class="token comment">//   clears the data member of lhs(rhs), and there is no way we can assign it back to lhs.</span>    <span class="token comment">//   Refer to: http://stackoverflow.com/questions/29308115/protection-again-self-assignment</span>    <span class="token comment">// - Why is it redundant? As its analogous function Message::add_to_Folders(), Message::remove_from_Folders() should ONLY</span>    <span class="token comment">//   take care of the bookkeeping in Folders but not touch the Message's own data members - makes it much clearer and easier</span>    <span class="token comment">//   to use. As you can see in the 2 places where we call Message::remove_from_Folders(): in Message::operator=, folders.clear()</span>    <span class="token comment">//   introduces a bug as illustrated above; in the destructor ~Message(), the member "folders" will be destroyed anyways, why do</span>    <span class="token comment">//   we need to clear it first?</span><span class="token punctuation">&#125;</span><span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">remove_from_Folders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>Message <span class="token operator">&amp;</span>Message<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Message <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">remove_from_Folders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    contents <span class="token operator">=</span> rhs<span class="token punctuation">.</span>contents<span class="token punctuation">;</span>    folders <span class="token operator">=</span> rhs<span class="token punctuation">.</span>folders<span class="token punctuation">;</span>    <span class="token function">add_to_Folders</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Message</span><span class="token double-colon punctuation">::</span><span class="token function">print_debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> contents <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// Folder Implementation</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Folder <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> Folder <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span>    lhs<span class="token punctuation">.</span><span class="token function">remove_from_Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rhs<span class="token punctuation">.</span><span class="token function">remove_from_Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>msgs<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        lhs<span class="token punctuation">.</span><span class="token function">add_to_Message</span><span class="token punctuation">(</span>lhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    rhs<span class="token punctuation">.</span><span class="token function">add_to_Message</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Folder</span><span class="token double-colon punctuation">::</span><span class="token function">add_to_Message</span><span class="token punctuation">(</span><span class="token keyword">const</span> Folder <span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> f<span class="token punctuation">.</span>msgs<span class="token punctuation">)</span>        m<span class="token operator">-></span><span class="token function">addFldr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Folder</span><span class="token double-colon punctuation">::</span><span class="token function">Folder</span><span class="token punctuation">(</span><span class="token keyword">const</span> Folder <span class="token operator">&amp;</span>f<span class="token punctuation">)</span>     <span class="token operator">:</span> <span class="token function">msgs</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>msgs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">add_to_Message</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Folder</span><span class="token double-colon punctuation">::</span><span class="token function">remove_from_Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> msgs<span class="token punctuation">)</span>        m<span class="token operator">-></span><span class="token function">remFldr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Folder</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Folder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">remove_from_Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>Folder <span class="token operator">&amp;</span>Folder<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Folder <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">remove_from_Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    msgs <span class="token operator">=</span> rhs<span class="token punctuation">.</span>msgs<span class="token punctuation">;</span>    <span class="token function">add_to_Message</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Folder</span><span class="token double-colon punctuation">::</span><span class="token function">print_debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> msgs<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token operator">-></span>contents <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-35"><a href="#练习13-35" class="headerlink" title="练习13.35"></a>练习13.35</h2><blockquote><p>如果<code>Message</code> 使用合成的拷贝控制成员，将会发生什么？</p></blockquote><p>在赋值后一些已存在的 <code>Folders</code> 将会与 <code>Message</code> 不同步。</p><h2 id="练习13-36"><a href="#练习13-36" class="headerlink" title="练习13.36"></a>练习13.36</h2><blockquote><p>设计并实现对应的 <code>Folder</code> 类。此类应该保存一个指向 <code>Folder</code> 中包含  <code>Message</code> 的 <code>set</code>。</p></blockquote><p>解：</p><p>参考13.34。</p><h2 id="练习13-37"><a href="#练习13-37" class="headerlink" title="练习13.37"></a>练习13.37</h2><blockquote><p>为 <code>Message</code> 类添加成员，实现向 <code>folders</code> 添加和删除一个给定的 <code>Folder*</code>。这两个成员类似<code>Folder</code> 类的 <code>addMsg</code> 和 <code>remMsg</code> 操作。</p></blockquote><p>解：</p><p>参考13.34。</p><h2 id="练习13-38"><a href="#练习13-38" class="headerlink" title="练习13.38"></a>练习13.38</h2><blockquote><p>我们并未使用拷贝交换方式来设计 <code>Message</code> 的赋值运算符。你认为其原因是什么？</p></blockquote><p>对于动态分配内存的例子来说，拷贝交换方式是一种简洁的设计。而这里的 <code>Message</code> 类并不需要动态分配内存，用拷贝交换方式只会增加实现的复杂度。</p><h2 id="练习13-39"><a href="#练习13-39" class="headerlink" title="练习13.39"></a>练习13.39</h2><blockquote><p>编写你自己版本的 <code>StrVec</code>，包括自己版本的 <code>reserve</code>、<code>capacity</code> 和<code>resize</code>。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">// 类vector类内存分配策略的简化实现</span><span class="token keyword">class</span> <span class="token class-name">StrVec</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">elements</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">first_free</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 拷贝构造函数</span>    StrVec<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 拷贝赋值运算符</span>    <span class="token operator">~</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 析构函数</span>    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 添加元素时拷贝元素</span>    size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> first_free <span class="token operator">-</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    size_t <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> cap <span class="token operator">-</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> first_free<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment">// 工具函数，被拷贝构造函数、赋值运算符和析构函数所使用</span>    std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token operator">></span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 销毁元素并释放内存</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 工具函数，被添加元素的函数使用</span>    <span class="token keyword">void</span> <span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//获得更多内存并拷贝已有元素</span>    <span class="token keyword">void</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">alloc_n_move</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>elements<span class="token punctuation">;</span>  <span class="token comment">// 指向数组首元素的指针</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>first_free<span class="token punctuation">;</span>  <span class="token comment">// 指向数组第一个空闲元素的指针</span>    std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>cap<span class="token punctuation">;</span>  <span class="token comment">// 指向数组第一个空闲元素的指针</span>    std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> alloc<span class="token punctuation">;</span>  <span class="token comment">// 分配元素</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现和主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_13_39.h"</span></span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>first_free<span class="token operator">++</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 分配足够的内存来保存给定范围的元素，并将这些元素拷贝到新分配的内存中</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token operator">></span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 分配空间保存给定范围中的元素</span><span class="token keyword">auto</span> data <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化并返回一个pair，该pair由data和uninitialized_copy的返回值构成</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 不能传递给deallocate一个空指针，如果elements为0，函数什么也不做</span><span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 逆序销毁元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> first_free<span class="token punctuation">;</span> p <span class="token operator">!=</span> elements<span class="token punctuation">;</span><span class="token punctuation">)</span>            alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> cap <span class="token operator">-</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 调用alloc_n_copy分配空间以容纳与rhs中一样多的元素</span><span class="token keyword">auto</span> newdata <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elements <span class="token operator">=</span> newdata<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    first_free <span class="token operator">=</span> cap <span class="token operator">=</span> newdata<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrVec<span class="token operator">&amp;</span> StrVec<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 调用alloc_n_copy分配空间以容纳与rhs中一样多的元素</span><span class="token keyword">auto</span> data <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elements <span class="token operator">=</span> data<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    first_free <span class="token operator">=</span> cap <span class="token operator">=</span> data<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_move</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> newdata <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> dest <span class="token operator">=</span> newdata<span class="token punctuation">;</span>    <span class="token keyword">auto</span> elem <span class="token operator">=</span> elements<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>dest<span class="token operator">++</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token operator">*</span>elem<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elements <span class="token operator">=</span> newdata<span class="token punctuation">;</span>    first_free <span class="token operator">=</span> dest<span class="token punctuation">;</span>    cap <span class="token operator">=</span> elements <span class="token operator">+</span> new_cap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> newcapacity <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">alloc_n_move</span><span class="token punctuation">(</span>newcapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">reserve</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_cap <span class="token operator">&lt;=</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">alloc_n_move</span><span class="token punctuation">(</span>new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">resize</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">reserve</span><span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>first_free<span class="token operator">++</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>first_free <span class="token operator">!=</span> elements <span class="token operator">+</span> count<span class="token punctuation">)</span>            alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">--</span>first_free<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-40"><a href="#练习13-40" class="headerlink" title="练习13.40"></a>练习13.40</h2><blockquote><p>为你的 <code>StrVec</code> 类添加一个构造函数，它接受一个 <code>initializer_list&lt;string&gt;</code> 参数。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">StrVec</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">range_initialize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> newdata <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    elements <span class="token operator">=</span> newdata<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    first_free <span class="token operator">=</span> cap <span class="token operator">=</span> newdata<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">StrVec</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">range_initialize</span><span class="token punctuation">(</span>il<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> il<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-41"><a href="#练习13-41" class="headerlink" title="练习13.41"></a>练习13.41</h2><blockquote><p>在 <code>push_back</code> 中，我们为什么在 <code>construct</code> 调用中使用后置递增运算？如果使用前置递增运算的话，会发生什么？</p></blockquote><p>解：</p><p>会出现 <code>unconstructed</code>。</p><h2 id="练习13-42"><a href="#练习13-42" class="headerlink" title="练习13.42"></a>练习13.42</h2><blockquote><p>在你的 <code>TextQuery</code> 和 <code>QueryResult</code> 类中用你的 <code>StrVec</code> 类代替<code>vector&lt;string&gt;</code>，以此来测试你的 <code>StrVec</code> 类。</p></blockquote><p>解：</p><p>略</p><h2 id="练习13-43"><a href="#练习13-43" class="headerlink" title="练习13.43"></a>练习13.43</h2><blockquote><p>重写 <code>free</code> 成员，用 <code>for_each</code> 和 <code>lambda</code> 来代替 <code>for</code> 循环 <code>destroy</code> 元素。你更倾向于哪种实现，为什么？</p></blockquote><p>解：</p><p><strong>重写</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">for_each</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> first_free<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更倾向于函数式写法。</p><h2 id="练习13-44"><a href="#练习13-44" class="headerlink" title="练习13.44"></a>练习13.44</h2><blockquote><p>编写标准库 <code>string</code> 类的简化版本，命名为 <code>String</code>。你的类应该至少有一个默认构造函数和一个接受 C 风格字符串指针参数的构造函数。使用 <code>allocator</code> 为你的 <code>String</code>类分配所需内存。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> end <span class="token operator">-</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    size_t <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> end <span class="token operator">-</span> elements <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">range_initializer</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span> <span class="token operator">*</span>elements<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> alloc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_13_44_47.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> str <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span> str<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">range_initializer</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> newstr <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    elements <span class="token operator">=</span> newstr<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    end <span class="token operator">=</span> newstr<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>sl <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>sl<span class="token punctuation">)</span>        <span class="token operator">++</span>sl<span class="token punctuation">;</span>    <span class="token function">range_initializer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">++</span>sl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">range_initializer</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>elements<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> end <span class="token operator">-</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>String<span class="token operator">&amp;</span> String<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> newstr <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>elements<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elements <span class="token operator">=</span> newstr<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    end <span class="token operator">=</span> newstr<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy-assignment"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex13_44_47.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment">// Test reference to http://coolshell.cn/articles/10478.html</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>String <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    String <span class="token function">ret</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    String s0<span class="token punctuation">;</span>    String <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">s2</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">;</span>    String s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    String <span class="token function">s4</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bar</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"temporary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">"temporary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s5 <span class="token operator">=</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>String<span class="token operator">></span> svec<span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"good job"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> svec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://github.com/chenshuo/recipes/blob/fcf9486f5155117fb8c36b6b0944c5486c71c421/string/StringTrivial.h">A trivial String class that designed for write-on-paper in an interview</a></p><h2 id="练习13-45"><a href="#练习13-45" class="headerlink" title="练习13.45"></a>练习13.45</h2><blockquote><p>解释左值引用和右值引用的区别？</p></blockquote><p>解：</p><p>定义：</p><ul><li>常规引用被称为左值引用</li><li>绑定到右值的引用被称为右值引用。</li></ul><h2 id="练习13-46"><a href="#练习13-46" class="headerlink" title="练习13.46"></a>练习13.46</h2><blockquote><p>什么类型的引用可以绑定到下面的初始化器上？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vi</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">?</span> r1 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">?</span> r2 <span class="token operator">=</span> vi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">?</span> r3 <span class="token operator">=</span> r1<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">?</span> r4 <span class="token operator">=</span> vi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vi</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> r1 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> r2 <span class="token operator">=</span> vi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> r3 <span class="token operator">=</span> r1<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;&amp;</span> r4 <span class="token operator">=</span> vi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-47"><a href="#练习13-47" class="headerlink" title="练习13.47"></a>练习13.47</h2><blockquote><p>对你在练习13.44中定义的 <code>String</code>类，为它的拷贝构造函数和拷贝赋值运算符添加一条语句，在每次函数执行时打印一条信息。</p></blockquote><p>解：</p><p>参考13.44。</p><h2 id="练习13-48"><a href="#练习13-48" class="headerlink" title="练习13.48"></a>练习13.48</h2><blockquote><p>定义一个<code>vector&lt;String&gt;</code> 并在其上多次调用 <code>push_back</code>。运行你的程序，并观察 <code>String</code> 被拷贝了多少次。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_13_44_47.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment">// Test reference to http://coolshell.cn/articles/10478.html</span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>String <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    String <span class="token function">ret</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> text<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    String s0<span class="token punctuation">;</span>    String <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">s2</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">;</span>    String s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    String <span class="token function">s4</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bar</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"temporary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">"temporary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s5 <span class="token operator">=</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>String<span class="token operator">></span> svec<span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    svec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"good job"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>s <span class="token operator">:</span> svec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-49"><a href="#练习13-49" class="headerlink" title="练习13.49"></a>练习13.49</h2><blockquote><p>为你的 <code>StrVec</code>、<code>String</code> 和 <code>Message</code> 类添加一个移动构造函数和一个移动赋值运算符。</p></blockquote><p>解：</p><p>略</p><h2 id="练习13-50"><a href="#练习13-50" class="headerlink" title="练习13.50"></a>练习13.50</h2><blockquote><p>在你的 <code>String</code> 类的移动操作中添加打印语句，并重新运行13.6.1节的练习13.48中的程序，它使用了一个<code>vector&lt;String&gt;</code>，观察什么时候会避免拷贝。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">String <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    String <span class="token function">ret</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span> <span class="token comment">// first avoided</span><span class="token punctuation">&#125;</span>String s5 <span class="token operator">=</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// second avoided</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习13-51"><a href="#练习13-51" class="headerlink" title="练习13.51"></a>练习13.51</h2><blockquote><p>虽然 <code>unique_ptr</code> 不能拷贝，但我们在12.1.5节中编写了一个 <code>clone</code> 函数，它以值的方式返回一个 <code>unique_ptr</code>。解释为什么函数是合法的，以及为什么它能正确工作。</p></blockquote><p>解：</p><p>在这里是移动的操作而不是拷贝操作，因此是合法的。</p><h2 id="练习13-52"><a href="#练习13-52" class="headerlink" title="练习13.52"></a>练习13.52</h2><blockquote><p>详细解释第478页中的 <code>HasPtr</code> 对象的赋值发生了什么？特别是，一步一步描述 <code>hp</code>、<code>hp2</code> 以及 <code>HasPtr</code> 的赋值运算符中的参数 <code>rhs</code> 的值发生了什么变化。</p></blockquote><p>解：</p><p>左值被拷贝，右值被移动。</p><h2 id="练习13-53"><a href="#练习13-53" class="headerlink" title="练习13.53"></a>练习13.53</h2><blockquote><p>从底层效率的角度看，<code>HasPtr</code> 的赋值运算符并不理想，解释为什么？为 <code>HasPtr</code> 实现一个拷贝赋值运算符和一个移动赋值运算符，并比较你的新的移动赋值运算符中执行的操作和拷贝并交换版本中的执行的操作。</p></blockquote><p>解：</p><p>参考：<a href="https://stackoverflow.com/questions/21010371/why-is-it-not-efficient-to-use-a-single-assignment-operator-handling-both-copy-a">https://stackoverflow.com/questions/21010371/why-is-it-not-efficient-to-use-a-single-assignment-operator-handling-both-copy-a</a></p><h2 id="练习13-54"><a href="#练习13-54" class="headerlink" title="练习13.54"></a>练习13.54</h2><blockquote><p>如果我们为 <code>HasPtr</code> 定义了移动赋值运算符，但未改变拷贝并交换运算符，会发生什么？编写代码验证你的答案。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">error<span class="token operator">:</span> ambiguous overload <span class="token keyword">for</span> <span class="token string">'operator='</span> <span class="token punctuation">(</span>operand types are <span class="token string">'HasPtr'</span> <span class="token operator">and</span> <span class="token string">'std::remove_reference&lt;HasPtr&amp;>::type &#123; aka HasPtr &#125;'</span><span class="token punctuation">)</span>hp1 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token operator">*</span>pH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习13-55"><a href="#练习13-55" class="headerlink" title="练习13.55"></a>练习13.55</h2><blockquote><p>为你的 <code>StrBlob</code> 添加一个右值引用版本的 <code>push_back</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>string <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习13-56"><a href="#练习13-56" class="headerlink" title="练习13.56"></a>练习13.56</h2><blockquote><p>如果 <code>sorted</code> 定义如下，会发生什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Foo <span class="token class-name">Foo</span><span class="token double-colon punctuation">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span>Foo <span class="token function">ret</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>会产生递归并且最终溢出。</p><h2 id="练习13-57"><a href="#练习13-57" class="headerlink" title="练习13.57"></a>练习13.57</h2><blockquote><p>如果 <code>sorted</code>定义如下，会发生什么：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Foo <span class="token class-name">Foo</span><span class="token double-colon punctuation">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>没问题。会调用移动版本。</p><h2 id="练习13-58"><a href="#练习13-58" class="headerlink" title="练习13.58"></a>练习13.58</h2><blockquote><p>编写新版本的 <code>Foo</code> 类，其 <code>sorted</code> 函数中有打印语句，测试这个类，来验证你对前两题的答案是否正确。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>vector<span class="token punctuation">;</span> <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>sort<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Foo <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">;</span>    Foo <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Foo <span class="token class-name">Foo</span><span class="token double-colon punctuation">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&amp;&amp;"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// debug</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Foo <span class="token class-name">Foo</span><span class="token double-colon punctuation">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span><span class="token comment">//    Foo ret(*this);</span><span class="token comment">//    sort(ret.data.begin(), ret.data.end());</span><span class="token comment">//    return ret;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"const &amp;"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// debug</span><span class="token comment">//    Foo ret(*this);</span><span class="token comment">//    ret.sorted();     // Exercise 13.56</span><span class="token comment">//    return ret;</span>    <span class="token keyword">return</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Exercise 13.57</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call "&amp;&amp;"</span>    Foo f<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call "const &amp;"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案14</title>
      <link href="2021/04/10/excersize/ch14/"/>
      <url>2021/04/10/excersize/ch14/</url>
      
        <content type="html"><![CDATA[<h1 id="第十四章-重载运算与类型转换"><a href="#第十四章-重载运算与类型转换" class="headerlink" title="第十四章 重载运算与类型转换"></a>第十四章 重载运算与类型转换</h1><h2 id="练习14-1"><a href="#练习14-1" class="headerlink" title="练习14.1"></a>练习14.1</h2><blockquote><p>在什么情况下重载的运算符与内置运算符有所区别？在什么情况下重载的运算符又与内置运算符一样？</p></blockquote><p>解：</p><p>我们可以直接调用重载运算符函数。重置运算符与内置运算符有一样的优先级与结合性。</p><h2 id="练习14-2"><a href="#练习14-2" class="headerlink" title="练习14.2"></a>练习14.2</h2><blockquote><p>为 <code>Sales_data</code> 编写重载的输入、输出、加法和复合赋值运算符。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// input</span>    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output</span>    <span class="token keyword">friend</span> Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// addition</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// compound-assignment</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> units_sold <span class="token operator">?</span> revenue<span class="token operator">/</span>units_sold <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_02.h"</span></span><span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    is <span class="token operator">>></span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data<span class="token operator">&amp;</span> Sales_data<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span>        item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    <span class="token keyword">else</span>        item <span class="token operator">=</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum <span class="token operator">+=</span> rhs<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-3"><a href="#练习14-3" class="headerlink" title="练习14.3"></a>练习14.3</h2><blockquote><p><code>string</code> 和 <code>vector</code> 都定义了重载的<code>==</code>以比较各自的对象，假设 <code>svec1</code> 和 <code>svec2</code> 是存放 <code>string</code> 的 <code>vector</code>，确定在下面的表达式中分别使用了哪个版本的<code>==</code>？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token string">"cobble"</span> <span class="token operator">==</span> <span class="token string">"stone"</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> svec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> svec2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> svec1 <span class="token operator">==</span> <span class="token function">svec2</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> svec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"stone"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 都不是。</li><li>(b) <code>string</code> </li><li>(c) <code>vector</code> </li><li>(d) <code>string</code></li></ul><h2 id="练习14-4"><a href="#练习14-4" class="headerlink" title="练习14.4"></a>练习14.4</h2><blockquote><p>如何确定下列运算符是否应该是类的成员？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">%=</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">++</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 不需要是成员。</li><li>(b) 是成员。</li><li>(c) 是成员。</li><li>(d) 必须是成员。</li><li>(e) 不需要是成员。</li><li>(f) 不需要是成员。</li><li>(g) 不需要是成员。</li><li>(h) 必须是成员。</li></ul><h2 id="练习14-5"><a href="#练习14-5" class="headerlink" title="练习14.5"></a>练习14.5</h2><blockquote><p>在7.5.1节中的练习7.40中，编写了下列类中某一个的框架，请问在这个类中应该定义重载的运算符吗？如果是，请写出来。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">Book</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">Date</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">Employee</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token function">Object</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> Tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>Book</code>，应该重载。</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> no<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string author<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string pubdate<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">no_</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">author_</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pubdate_</span><span class="token punctuation">(</span>pubdate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Book</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> in <span class="token operator">>></span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">unsigned</span> no_<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string name_<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string author_<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string pubdate_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_5.h"</span></span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> Book <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>in <span class="token operator">>></span> book<span class="token punctuation">.</span>no_ <span class="token operator">>></span> book<span class="token punctuation">.</span>name_ <span class="token operator">>></span> book<span class="token punctuation">.</span>author_ <span class="token operator">>></span> book<span class="token punctuation">.</span>pubdate_<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">)</span>book <span class="token operator">=</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>out <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>no_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>name_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>author_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>pubdate_<span class="token punctuation">;</span><span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span>no_ <span class="token operator">==</span> rhs<span class="token punctuation">.</span>no_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_5.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Book <span class="token function">book1</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"CP5"</span><span class="token punctuation">,</span> <span class="token string">"Lippman"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Book <span class="token function">book2</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"CP5"</span><span class="token punctuation">,</span> <span class="token string">"Lippman"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>book1 <span class="token operator">==</span> book2<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> book1 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-6"><a href="#练习14-6" class="headerlink" title="练习14.6"></a>练习14.6</h2><blockquote><p>为你的 <code>Sales_data</code> 类定义输出运算符。</p></blockquote><p>解：</p><p>参考14.2。</p><h2 id="练习14-7"><a href="#练习14-7" class="headerlink" title="练习14.7"></a>练习14.7</h2><blockquote><p>你在13.5节的练习中曾经编写了一个<code>String</code>类，为它定义一个输出运算符。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> end <span class="token operator">-</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>size_t <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> end <span class="token operator">-</span> elements <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">range_initializer</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">char</span> <span class="token operator">*</span>elements<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> alloc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_7.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> str <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">&#123;</span> str<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">range_initializer</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> newstr <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>elements <span class="token operator">=</span> newstr<span class="token punctuation">.</span>first<span class="token punctuation">;</span>end <span class="token operator">=</span> newstr<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>sl <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>sl<span class="token punctuation">)</span><span class="token operator">++</span>sl<span class="token punctuation">;</span><span class="token function">range_initializer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">++</span>sl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">range_initializer</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>elements<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> end <span class="token operator">-</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>String<span class="token operator">&amp;</span> String<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> newstr <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span>elements<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elements <span class="token operator">=</span> newstr<span class="token punctuation">.</span>first<span class="token punctuation">;</span>end <span class="token operator">=</span> newstr<span class="token punctuation">.</span>second<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy-assignment"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> String <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>c<span class="token punctuation">)</span>os <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>c<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_7.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>String <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-8"><a href="#练习14-8" class="headerlink" title="练习14.8"></a>练习14.8</h2><blockquote><p>你在7.5.1节中的练习中曾经选择并编写了一个类，为它定义一个输出运算符。</p></blockquote><p>解：</p><p>参考14.5。</p><h2 id="练习14-9"><a href="#练习14-9" class="headerlink" title="练习14.9"></a>练习14.9</h2><blockquote><p>为你的 <code>Sales_data</code> 类定义输入运算符。</p></blockquote><p>解：</p><p>参考14.2。</p><h2 id="练习14-10"><a href="#练习14-10" class="headerlink" title="练习14.10"></a>练习14.10</h2><blockquote><p>对于 <code>Sales_data</code> 的输入运算符来说如果给定了下面的输入将发生什么情况？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">201</span><span class="token operator">-</span><span class="token number">99999</span><span class="token operator">-</span><span class="token number">9</span> <span class="token number">10</span> <span class="token number">24.95</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token number">10</span> <span class="token number">24.95</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">210</span><span class="token operator">-</span><span class="token number">99999</span><span class="token operator">-</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 格式正确。</li><li>(b) 不合法的输入。因为程序试图将 <code>0-210-99999-9</code> 转换为 <code>float</code>。</li></ul><h2 id="练习14-11"><a href="#练习14-11" class="headerlink" title="练习14.11"></a>练习14.11</h2><blockquote><p>下面的 <code>Sales_data</code> 输入运算符存在错误吗？如果有，请指出来。对于这个输入运算符如果仍然给定上个练习的输入将会发生什么情况？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> price<span class="token punctuation">;</span>in <span class="token operator">>></span> s<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> s<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>s<span class="token punctuation">.</span>revence <span class="token operator">=</span> s<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span><span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>没有输入检查，什么也不会发生。</p><h2 id="练习14-12"><a href="#练习14-12" class="headerlink" title="练习14.12"></a>练习14.12</h2><blockquote><p>你在7.5.1节的练习中曾经选择并编写了一个类，为它定义一个输入运算符并确保该运算符可以处理输入错误。</p></blockquote><p>解：</p><p>参考14.5。</p><h2 id="练习14-13"><a href="#练习14-13" class="headerlink" title="练习14.13"></a>练习14.13</h2><blockquote><p>你认为 <code>Sales_data</code> 类还应该支持哪些其他算术运算符？如果有的话，请给出它们的定义。</p></blockquote><p>解：</p><p>没有其他了。</p><h2 id="练习14-14"><a href="#练习14-14" class="headerlink" title="练习14.14"></a>练习14.14</h2><blockquote><p>你觉得为什么调用 <code>operator+=</code> 来定义<code>operator+</code> 比其他方法更有效？</p></blockquote><p>解：</p><p>因为用 <code>operator+=</code> 会避免使用一个临时对象，而使得更有效。</p><h2 id="练习14-15"><a href="#练习14-15" class="headerlink" title="练习14.15"></a>练习14.15</h2><blockquote><p>你在7.5.1节的练习7.40中曾经选择并编写了一个类，你认为它应该含有其他算术运算符吗？如果是，请实现它们；如果不是，解释原因。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">operator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> Book <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> no<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string author<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string pubdate<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> number<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">no_</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">name_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">author_</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pubdate_</span><span class="token punctuation">(</span>pubdate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">number_</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Book</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> in <span class="token operator">>></span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>Book<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">unsigned</span> no_<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string name_<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string author_<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string pubdate_<span class="token punctuation">;</span><span class="token keyword">unsigned</span> number_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">operator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Book <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Book<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_15.h"</span></span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span> Book <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>in <span class="token operator">>></span> book<span class="token punctuation">.</span>no_ <span class="token operator">>></span> book<span class="token punctuation">.</span>name_ <span class="token operator">>></span> book<span class="token punctuation">.</span>author_ <span class="token operator">>></span> book<span class="token punctuation">.</span>pubdate_ <span class="token operator">>></span> book<span class="token punctuation">.</span>number_<span class="token punctuation">;</span><span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>out <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>no_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>name_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>author_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>pubdate_ <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">.</span>number_ <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span>no_ <span class="token operator">==</span> rhs<span class="token punctuation">.</span>no_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">no_</span> <span class="token generic class-name"><span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>no_<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> rhs <span class="token operator">&lt;</span> lhs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Book<span class="token operator">&amp;</span> Book<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rhs <span class="token operator">==</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token operator">-></span>number_ <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>number_<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Book <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Book <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Book <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Book book <span class="token operator">=</span> lhs<span class="token punctuation">;</span>book <span class="token operator">+=</span> rhs<span class="token punctuation">;</span><span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_15.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Book <span class="token function">cp5_1</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token string">"CP5"</span><span class="token punctuation">,</span> <span class="token string">"Lippmen"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Book <span class="token function">cp5_2</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">,</span> <span class="token string">"CP5"</span><span class="token punctuation">,</span> <span class="token string">"Lippmen"</span><span class="token punctuation">,</span> <span class="token string">"2012"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cp5_1 <span class="token operator">+</span> cp5_2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-16"><a href="#练习14-16" class="headerlink" title="练习14.16"></a>练习14.16</h2><blockquote><p>为你的 <code>StrBlob</code> 类、<code>StrBlobPtr</code> 类、<code>StrVec</code> 类和 <code>String</code> 类分别定义相等运算符和不相等运算符。</p></blockquote><p>解：</p><p>略</p><h2 id="练习14-17"><a href="#练习14-17" class="headerlink" title="练习14.17"></a>练习14.17</h2><blockquote><p>你在7.5.1节中的练习7.40中曾经选择并编写了一个类，你认为它应该含有相等运算符吗？如果是，请实现它；如果不是，解释原因。</p></blockquote><p>解：</p><p>参考14.15。</p><h2 id="练习14-18"><a href="#练习14-18" class="headerlink" title="练习14.18"></a>练习14.18</h2><blockquote><p>为你的 <code>StrBlob</code> 类、<code>StrBlobPtr</code> 类、<code>StrVec</code> 类和 <code>String</code> 类分别定义关系运算符。</p></blockquote><p>解：</p><p>略</p><h2 id="练习14-19"><a href="#练习14-19" class="headerlink" title="练习14.19"></a>练习14.19</h2><blockquote><p>你在7.5.1节的练习7.40中曾经选择并编写了一个类，你认为它应该含有关系运算符吗？如果是，请实现它；如果不是，解释原因。</p></blockquote><p>解：</p><p>参考14.15。</p><h2 id="练习14-20"><a href="#练习14-20" class="headerlink" title="练习14.20"></a>练习14.20</h2><blockquote><p>为你的 <code>Sales_data</code> 类定义加法和复合赋值运算符。</p></blockquote><p>解：</p><p>参考14.2。</p><h2 id="练习14-21"><a href="#练习14-21" class="headerlink" title="练习14.21"></a>练习14.21</h2><blockquote><p>编写 <code>Sales_data</code> 类的<code>+</code> 和<code>+=</code> 运算符，使得 <code>+</code> 执行实际的加法操作而 <code>+=</code> 调用<code>+</code>。相比14.3节和14.4节对这两个运算符的定义，本题的定义有何缺点？试讨论之。</p></blockquote><p>解：</p><p>缺点：使用了一个 <code>Sales_data</code> 的临时对象，但它并不是必须的。</p><h2 id="练习14-22"><a href="#练习14-22" class="headerlink" title="练习14.22"></a>练习14.22</h2><blockquote><p>定义赋值运算符的一个新版本，使得我们能把一个表示 <code>ISBN</code> 的 <code>string</code> 赋给一个 <code>Sales_data</code> 对象。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Sales_data</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span><span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> units_sold <span class="token operator">?</span> revenue <span class="token operator">/</span> units_sold <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_22.h"</span></span><span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>is <span class="token operator">>></span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data<span class="token operator">&amp;</span> Sales_data<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span>item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span><span class="token keyword">else</span>item <span class="token operator">=</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>sum <span class="token operator">+=</span> rhs<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Sales_data<span class="token operator">&amp;</span> Sales_data<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>isbn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>isbn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_4_22.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">strCp5</span><span class="token punctuation">(</span><span class="token string">"cpp-primer 5th"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data cp5 <span class="token operator">=</span> strCp5<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> cp5 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-23"><a href="#练习14-23" class="headerlink" title="练习14.23"></a>练习14.23</h2><blockquote><p>为你的<code>StrVec</code> 类定义一个 <code>initializer_list</code> 赋值运算符。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;initializer_list></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MSC_VER</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOEXCEPT</span> <span class="token expression"><span class="token keyword">noexcept</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOEXCEPT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">class</span> <span class="token class-name">StrVec</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">operator</span><span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">></span></span></span> <span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">elements</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">first_free</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">StrVec</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StrVec<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">StrVec</span><span class="token punctuation">(</span>StrVec<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> NOEXCEPT<span class="token punctuation">;</span>StrVec<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>StrVec<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span>NOEXCEPT<span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StrVec<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> first_free <span class="token operator">-</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>size_t <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> cap <span class="token operator">-</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> elements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> first_free<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">at</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>elements <span class="token operator">+</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> <span class="token function">at</span><span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>elements <span class="token operator">+</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token operator">></span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">alloc_n_move</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">range_initialize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>elements<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>first_free<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>cap<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> alloc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">operator</span><span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">></span></span></span> <span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_23.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>first_free<span class="token operator">++</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span><span class="token operator">></span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_copy</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> data <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">for_each</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> first_free<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> cap <span class="token operator">-</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">range_initialize</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">*</span>last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> newdata <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>elements <span class="token operator">=</span> newdata<span class="token punctuation">.</span>first<span class="token punctuation">;</span>first_free <span class="token operator">=</span> cap <span class="token operator">=</span> newdata<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">range_initialize</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">StrVec</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">range_initialize</span><span class="token punctuation">(</span>il<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> il<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">StrVec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrVec<span class="token operator">&amp;</span> StrVec<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> data <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elements <span class="token operator">=</span> data<span class="token punctuation">.</span>first<span class="token punctuation">;</span>first_free <span class="token operator">=</span> cap <span class="token operator">=</span> data<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_move</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> newdata <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> dest <span class="token operator">=</span> newdata<span class="token punctuation">;</span><span class="token keyword">auto</span> elem <span class="token operator">=</span> elements<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>dest<span class="token operator">++</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token operator">*</span>elem<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elements <span class="token operator">=</span> newdata<span class="token punctuation">;</span>first_free <span class="token operator">=</span> dest<span class="token punctuation">;</span>cap <span class="token operator">=</span> elements <span class="token operator">+</span> new_cap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> newcapacity <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">alloc_n_move</span><span class="token punctuation">(</span>newcapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">reserve</span><span class="token punctuation">(</span>size_t new_cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>new_cap <span class="token operator">&lt;=</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token function">alloc_n_move</span><span class="token punctuation">(</span>new_cap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">resize</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>size_t count<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">reserve</span><span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>first_free<span class="token operator">++</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>first_free <span class="token operator">!=</span> elements <span class="token operator">+</span> count<span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">--</span>first_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">StrVec</span><span class="token double-colon punctuation">::</span><span class="token function">StrVec</span><span class="token punctuation">(</span>StrVec <span class="token operator">&amp;&amp;</span>s<span class="token punctuation">)</span> NOEXCEPT <span class="token operator">:</span> <span class="token function">elements</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>elements<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">first_free</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>first_free<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// leave s in a state in which it is safe to run the destructor.</span>s<span class="token punctuation">.</span>elements <span class="token operator">=</span> s<span class="token punctuation">.</span>first_free <span class="token operator">=</span> s<span class="token punctuation">.</span>cap <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrVec<span class="token operator">&amp;</span> StrVec<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>StrVec <span class="token operator">&amp;&amp;</span>rhs<span class="token punctuation">)</span> NOEXCEPT<span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elements <span class="token operator">=</span> rhs<span class="token punctuation">.</span>elements<span class="token punctuation">;</span>first_free <span class="token operator">=</span> rhs<span class="token punctuation">.</span>first_free<span class="token punctuation">;</span>cap <span class="token operator">=</span> rhs<span class="token punctuation">.</span>cap<span class="token punctuation">;</span>rhs<span class="token punctuation">.</span>elements <span class="token operator">=</span> rhs<span class="token punctuation">.</span>first_free <span class="token operator">=</span> rhs<span class="token punctuation">.</span>cap <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rhs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> std<span class="token double-colon punctuation">::</span><span class="token function">equal</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">operator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">lexicographical_compare</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> rhs <span class="token operator">&lt;</span> lhs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>rhs <span class="token operator">&lt;</span> lhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> StrVec <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">&lt;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrVec<span class="token operator">&amp;</span> StrVec<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">StrVec</span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_23.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>StrVec vec<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"capacity(reserve to 6): "</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"capacity(reserve to 4): "</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-EOF-"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-EOF-"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>StrVec vec_list<span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"pezy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> vec_list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> vec_list<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// Test operator==</span><span class="token keyword">const</span> StrVec const_vec_list <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"pezy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vec_list <span class="token operator">==</span> const_vec_list<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>str <span class="token operator">:</span> const_vec_list<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// Test operator&lt;</span><span class="token keyword">const</span> StrVec const_vec_list_small <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"pezy"</span><span class="token punctuation">,</span> <span class="token string">"ok"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>const_vec_list_small <span class="token operator">&lt;</span> const_vec_list<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-24"><a href="#练习14-24" class="headerlink" title="练习14.24"></a>练习14.24</h2><blockquote><p>你在7.5.1节的练习7.40中曾经选择并编写了一个类，你认为它应该含有拷贝赋值和移动赋值运算符吗？如果是，请实现它们。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DATE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MSC_VER</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOEXCEPT</span> <span class="token expression"><span class="token keyword">noexcept</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOEXCEPT</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span>  <span class="token keyword">bool</span>            <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span>  <span class="token keyword">bool</span>            <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span>  <span class="token keyword">bool</span>            <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span>  std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span>   <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>size_t Size<span class="token punctuation">;</span><span class="token comment">// default constructor</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token comment">// constructor taking Size as days</span><span class="token keyword">explicit</span> <span class="token function">Date</span><span class="token punctuation">(</span>Size days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// constructor taking three Size</span><span class="token function">Date</span><span class="token punctuation">(</span>Size d<span class="token punctuation">,</span> Size m<span class="token punctuation">,</span> Size y<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">day</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">month</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">year</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// constructor taking iostream</span><span class="token function">Date</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// copy constructor</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// move constructor</span><span class="token function">Date</span><span class="token punctuation">(</span>Date<span class="token operator">&amp;&amp;</span> d<span class="token punctuation">)</span> NOEXCEPT<span class="token punctuation">;</span><span class="token comment">// copy operator=</span>Date<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// move operator=</span>Date<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span>Date<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> NOEXCEPT<span class="token punctuation">;</span><span class="token comment">// destructor  --  in this case, user-defined destructor is not nessary.</span><span class="token operator">~</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destroying\n"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// members</span>Size <span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token comment">//not implemented yet.</span>Date<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">+=</span><span class="token punctuation">(</span>Size offset<span class="token punctuation">)</span><span class="token punctuation">;</span>Date<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">-=</span><span class="token punctuation">(</span>Size offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>Size    day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Size    month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Size    year <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">const</span> Date<span class="token double-colon punctuation">::</span>Size YtoD_400 <span class="token operator">=</span> <span class="token number">146097</span><span class="token punctuation">;</span>    <span class="token comment">//365*400 + 400/4 -3 == 146097</span><span class="token keyword">static</span> <span class="token keyword">const</span> Date<span class="token double-colon punctuation">::</span>Size YtoD_100 <span class="token operator">=</span> <span class="token number">36524</span><span class="token punctuation">;</span>    <span class="token comment">//365*100 + 100/4 -1 ==  36524</span><span class="token keyword">static</span> <span class="token keyword">const</span> Date<span class="token double-colon punctuation">::</span>Size YtoD_4 <span class="token operator">=</span> <span class="token number">1461</span><span class="token punctuation">;</span>    <span class="token comment">//365*4 + 1          ==   1461</span><span class="token keyword">static</span> <span class="token keyword">const</span> Date<span class="token double-colon punctuation">::</span>Size YtoD_1 <span class="token operator">=</span> <span class="token number">365</span><span class="token punctuation">;</span>    <span class="token comment">//365</span><span class="token comment">// normal year</span><span class="token keyword">static</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Date<span class="token double-colon punctuation">::</span>Size<span class="token operator">></span> monthsVec_n <span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// leap year</span><span class="token keyword">static</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Date<span class="token double-colon punctuation">::</span>Size<span class="token operator">></span> monthsVec_l <span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// non-member operators:  &lt;&lt;  >>  -   ==  !=  &lt;   &lt;=  >   >=</span><span class="token comment">//</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token generic-function"><span class="token function">operator</span> <span class="token generic class-name"><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token keyword">operator</span> <span class="token operator">>></span></span></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span><span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span><span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span><span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span><span class="token generic-function"><span class="token function">operator</span> <span class="token generic class-name"><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span><span class="token keyword">operator</span>  <span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span><span class="token keyword">operator</span> <span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>Date<span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> Date<span class="token double-colon punctuation">::</span>Size  rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>Date<span class="token keyword">operator</span>  <span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> Date<span class="token double-colon punctuation">::</span>Size  rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  utillities:</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>Date<span class="token double-colon punctuation">::</span>Size y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check if the date object passed in is valid</span><span class="token keyword">inline</span> <span class="token keyword">bool</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//    month == 1 3 5 7 8 10 12</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">||</span>d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>day <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>day <span class="token operator">></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//    month == 4 6 9 11</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>day <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>day <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//    month == 2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>day <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>day <span class="token operator">></span><span class="token number">29</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>day <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> d<span class="token punctuation">.</span>day <span class="token operator">></span><span class="token number">28</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>Date<span class="token double-colon punctuation">::</span>Size y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>y <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DATE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_24.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token comment">// constructor taking Size as days</span><span class="token comment">// the argument must be within (0, 2^32)</span><span class="token class-name">Date</span><span class="token double-colon punctuation">::</span><span class="token function">Date</span><span class="token punctuation">(</span>Size days<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// calculate the year</span>Size y400 <span class="token operator">=</span> days <span class="token operator">/</span> YtoD_400<span class="token punctuation">;</span>Size y100 <span class="token operator">=</span> <span class="token punctuation">(</span>days <span class="token operator">-</span> y400<span class="token operator">*</span>YtoD_400<span class="token punctuation">)</span> <span class="token operator">/</span> YtoD_100<span class="token punctuation">;</span>Size y4 <span class="token operator">=</span> <span class="token punctuation">(</span>days <span class="token operator">-</span> y400<span class="token operator">*</span>YtoD_400 <span class="token operator">-</span> y100<span class="token operator">*</span>YtoD_100<span class="token punctuation">)</span> <span class="token operator">/</span> YtoD_4<span class="token punctuation">;</span>Size y <span class="token operator">=</span> <span class="token punctuation">(</span>days <span class="token operator">-</span> y400<span class="token operator">*</span>YtoD_400 <span class="token operator">-</span> y100<span class="token operator">*</span>YtoD_100 <span class="token operator">-</span> y4<span class="token operator">*</span>YtoD_4<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">365</span><span class="token punctuation">;</span>Size d <span class="token operator">=</span> days <span class="token operator">-</span> y400<span class="token operator">*</span>YtoD_400 <span class="token operator">-</span> y100<span class="token operator">*</span>YtoD_100 <span class="token operator">-</span> y4<span class="token operator">*</span>YtoD_4 <span class="token operator">-</span> y <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">=</span> y400 <span class="token operator">*</span> <span class="token number">400</span> <span class="token operator">+</span> y100 <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> y4 <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token comment">// check if leap and choose the months vector accordingly</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Size<span class="token operator">></span>currYear<span class="token operator">=</span> <span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>year<span class="token punctuation">)</span> <span class="token operator">?</span> monthsVec_l <span class="token operator">:</span> monthsVec_n<span class="token punctuation">;</span><span class="token comment">// calculate day and month using find_if + lambda</span>Size D_accumu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> M_accumu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// @bug    fixed:  the variabbles above hade been declared inside the find_if as static</span><span class="token comment">//                 which caused the bug. It works fine now after being move outside.</span>std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation">(</span>currYear<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currYear<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Size m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>D_accumu <span class="token operator">+=</span> m<span class="token punctuation">;</span>M_accumu<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;</span> D_accumu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>month <span class="token operator">=</span> M_accumu<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>day <span class="token operator">=</span> d <span class="token operator">+</span> m <span class="token operator">-</span> D_accumu<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// construcotr taking iostream</span><span class="token class-name">Date</span><span class="token double-colon punctuation">::</span><span class="token function">Date</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>is <span class="token operator">>></span> day <span class="token operator">>></span> month <span class="token operator">>></span> year<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"Invalid input! Object is default initialized."</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"Invalid input! Object is default initialized."</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy constructor</span><span class="token class-name">Date</span><span class="token double-colon punctuation">::</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>d<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">day</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">month</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">year</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// move constructor</span><span class="token class-name">Date</span><span class="token double-colon punctuation">::</span><span class="token function">Date</span><span class="token punctuation">(</span>Date<span class="token operator">&amp;&amp;</span> d<span class="token punctuation">)</span> NOEXCEPT <span class="token operator">:</span><span class="token function">day</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">month</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">year</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy moving"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// copy operator=</span>Date <span class="token operator">&amp;</span>Date<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>day <span class="token operator">=</span> d<span class="token punctuation">.</span>day<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>month <span class="token operator">=</span> d<span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">=</span> d<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move operator=</span>Date <span class="token operator">&amp;</span>Date<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>Date<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> NOEXCEPT<span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>day <span class="token operator">=</span> rhs<span class="token punctuation">.</span>day<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>month <span class="token operator">=</span> rhs<span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">=</span> rhs<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"moving ="</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// conver to days</span>Date<span class="token double-colon punctuation">::</span>Size <span class="token class-name">Date</span><span class="token double-colon punctuation">::</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>Size result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>day<span class="token punctuation">;</span><span class="token comment">// check if leap and choose the months vector accordingly</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Size<span class="token operator">></span>currYear<span class="token operator">=</span> <span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>year<span class="token punctuation">)</span> <span class="token operator">?</span> monthsVec_l <span class="token operator">:</span> monthsVec_n<span class="token punctuation">;</span><span class="token comment">// calculate result + days by months</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> currYear<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> currYear<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-></span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>result <span class="token operator">+=</span> <span class="token operator">*</span>it<span class="token punctuation">;</span><span class="token comment">// calculate result + days by years</span>result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span>      <span class="token operator">*</span> YtoD_400<span class="token punctuation">;</span>result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token operator">*</span> YtoD_100<span class="token punctuation">;</span>result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token operator">*</span> YtoD_4<span class="token punctuation">;</span>result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>year <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token operator">*</span> YtoD_1<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// member operators:   +=  -=</span>Date <span class="token operator">&amp;</span>Date<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">+=</span><span class="token punctuation">(</span>Date<span class="token double-colon punctuation">::</span>Size offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Date <span class="token operator">&amp;</span>Date<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">-=</span><span class="token punctuation">(</span>Date<span class="token double-colon punctuation">::</span>Size offset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> offset<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// non-member operators:  &lt;&lt;  >>  -   ==  !=  &lt;   &lt;=  >   >=</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>day <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>month <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token keyword">operator</span> <span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> Date<span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Date input <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> input<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> rhs<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>day <span class="token operator">==</span> rhs<span class="token punctuation">.</span>day<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>month <span class="token operator">==</span> rhs<span class="token punctuation">.</span>month<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>year <span class="token operator">==</span> rhs<span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">lhs</span> <span class="token generic class-name"><span class="token operator">&lt;</span> rhs<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>lhs <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">&lt;=</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Date <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">&lt;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Date <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> Date<span class="token double-colon punctuation">::</span>Size rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                       <span class="token comment">//  ^^^ rhs must not be larger than 2^32-1</span><span class="token comment">// copy lhs</span>Date <span class="token function">result</span><span class="token punctuation">(</span>lhs<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">-=</span> rhs<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Date <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Date <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> Date<span class="token double-colon punctuation">::</span>Size rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                       <span class="token comment">//  ^^^ rhs must not be larger than 2^32-1</span><span class="token comment">// copy lhs</span>Date <span class="token function">result</span><span class="token punctuation">(</span>lhs<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">+=</span> rhs<span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_24.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Date <span class="token function">lhs</span><span class="token punctuation">(</span><span class="token number">9999999</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rhs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>lhs <span class="token operator">-=</span> <span class="token number">12000</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-25"><a href="#练习14-25" class="headerlink" title="练习14.25"></a>练习14.25</h2><blockquote><p>上题的这个类还需要定义其他赋值运算符吗？如果是，请实现它们；同时说明运算对象应该是什么类型并解释原因。</p></blockquote><p>解：</p><p>是。如上题。</p><h2 id="练习14-26"><a href="#练习14-26" class="headerlink" title="练习14.26"></a>练习14.26</h2><blockquote><p>为你的 <code>StrBlob</code> 类、<code>StrBlobPtr</code> 类、<code>StrVec</code> 类和 <code>String</code> 类定义下标运算符。</p></blockquote><p>解：</p><p>略</p><h2 id="练习14-27"><a href="#练习14-27" class="headerlink" title="练习14.27"></a>练习14.27</h2><blockquote><p>为你的 <code>StrBlobPtr</code> 类添加递增和递减运算符。</p></blockquote><p>解：</p><p>只显示添加的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> <span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    StrBlobPtr <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> StrBlobPtr<span class="token operator">&amp;</span> StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>curr<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr<span class="token operator">&amp;</span> StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token operator">--</span>curr<span class="token punctuation">,</span> <span class="token string">"decrement past begin of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    StrBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    StrBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">--</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr<span class="token operator">&amp;</span> StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    curr <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr<span class="token operator">&amp;</span> StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">-=</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    curr <span class="token operator">-=</span> n<span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    StrBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    ret <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> StrBlobPtr StrBlobPtr<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    StrBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    ret <span class="token operator">-=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-28"><a href="#练习14-28" class="headerlink" title="练习14.28"></a>练习14.28</h2><blockquote><p>为你的 <code>StrBlobPtr</code> 类添加加法和减法运算符，使其可以实现指针的算术运算。</p></blockquote><p>解：</p><p>参考14.27。</p><h2 id="练习14-29"><a href="#练习14-29" class="headerlink" title="练习14.29"></a>练习14.29</h2><blockquote><p>为什么不定义<code>const</code> 版本的递增和递减运算符？</p></blockquote><p>解：</p><p>因为递增和递减会改变对象本身，所以定义 <code>const</code> 版本的毫无意义。</p><h2 id="练习14-30"><a href="#练习14-30" class="headerlink" title="练习14.30"></a>练习14.30</h2><blockquote><p>为你的 <code>StrBlobPtr</code> 类和在12.1.6节练习12.22中定义的 <code>ConstStrBlobPtr</code> 的类分别添加解引用运算符和箭头运算符。注意：因为 <code>ConstStrBlobPtr</code> 的数据成员指向<code>const vector</code>，所以<code>ConstStrBlobPtr</code> 中的运算符必须返回常量引用。</p></blockquote><p>解：</p><p>略。</p><h2 id="练习14-31"><a href="#练习14-31" class="headerlink" title="练习14.31"></a>练习14.31</h2><blockquote><p>我们的 <code>StrBlobPtr</code> 类没有定义拷贝构造函数、赋值运算符以及析构函数，为什么？</p></blockquote><p>解：</p><p>因为使用合成的足够了。</p><h2 id="练习14-32"><a href="#练习14-32" class="headerlink" title="练习14.32"></a>练习14.32</h2><blockquote><p>定义一个类令其含有指向 <code>StrBlobPtr</code> 对象的指针，为这个类定义重载的箭头运算符。</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr_pointer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">StrBlobPtr_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">StrBlobPtr_pointer</span><span class="token punctuation">(</span>StrBlobPtr<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">pointer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    StrBlobPtr<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    StrBlobPtr<span class="token operator">*</span> pointer <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_32.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ex_14_30_StrBlob.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>StrBlobPtr<span class="token operator">&amp;</span>StrBlobPtr_pointer<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrBlobPtr<span class="token operator">*</span>StrBlobPtr_pointer<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-33"><a href="#练习14-33" class="headerlink" title="练习14.33"></a>练习14.33</h2><blockquote><p>一个重载的函数调用运算符应该接受几个运算对象？</p></blockquote><p>解：</p><p>一个重载的函数调用运算符接受的运算对象应该和该运算符拥有的操作数一样多。</p><h2 id="练习14-34"><a href="#练习14-34" class="headerlink" title="练习14.34"></a>练习14.34</h2><blockquote><p>定义一个函数对象类，令其执行<code>if-then-else</code> 的操作：该类的调用运算符接受三个形参，它首先检查第一个形参，如果成功返回第二个形参值；如果不成功返回第三个形参的值。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> iA<span class="token punctuation">,</span> <span class="token keyword">int</span> iB<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> b <span class="token operator">?</span> iA <span class="token operator">:</span> iB<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-35"><a href="#练习14-35" class="headerlink" title="练习14.35"></a>练习14.35</h2><blockquote><p>编写一个类似于 <code>PrintString</code> 的类，令其从 <code>istream</code> 中读取一行输入，然后返回一个表示我们所读内容的<code>string</code>。如果读取失败，返回空<code>string</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">class</span> <span class="token class-name">GetInput</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">GetInput</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">is</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> is <span class="token operator">?</span> str <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GetInput getInput<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-36"><a href="#练习14-36" class="headerlink" title="练习14.36"></a>练习14.36</h2><blockquote><p>使用前一个练习定义的类读取标准输入，将每一行保存为 <code>vector</code> 的一个元素。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">GetInput</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">GetInput</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>i <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">is</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> is <span class="token operator">?</span> str <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>GetInput getInput<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> vec<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string tmp<span class="token punctuation">;</span> <span class="token operator">!</span><span class="token punctuation">(</span>tmp <span class="token operator">=</span> <span class="token function">getInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>str <span class="token operator">:</span> vec<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-37"><a href="#练习14-37" class="headerlink" title="练习14.37"></a>练习14.37</h2><blockquote><p>编写一个类令其检查两个值是否相等。使用该对象及标准库算法编写程序，令其替换某个序列中具有给定值的所有实例。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">class</span> <span class="token class-name">IsEqual</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">IsEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> elem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> elem <span class="token operator">==</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">replace_if</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">IsEqual</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> vec<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-38"><a href="#练习14-38" class="headerlink" title="练习14.38"></a>练习14.38</h2><blockquote><p>编写一个类令其检查某个给定的 <code>string</code> 对象的长度是否与一个阈值相等。使用该对象编写程序，统计并报告在输入的文件中长度为1的单词有多少个，长度为2的单词有多少个、……、长度为10的单词有多少个。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">struct</span> <span class="token class-name">IsInRange</span><span class="token punctuation">&#123;</span><span class="token function">IsInRange</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t lower<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t upper<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_lower</span><span class="token punctuation">(</span>lower<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_upper</span><span class="token punctuation">(</span>upper<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> _lower <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> _upper<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">lower_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> _lower<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">upper_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> _upper<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>size_t _lower<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>size_t _upper<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//create predicates with various upper limits.</span>std<span class="token double-colon punctuation">::</span>size_t lower <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">auto</span> uppers <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">3u</span><span class="token punctuation">,</span> <span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">5u</span><span class="token punctuation">,</span> <span class="token number">6u</span><span class="token punctuation">,</span> <span class="token number">7u</span><span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">,</span> <span class="token number">9u</span><span class="token punctuation">,</span> <span class="token number">10u</span><span class="token punctuation">,</span> <span class="token number">11u</span><span class="token punctuation">,</span> <span class="token number">12u</span><span class="token punctuation">,</span> <span class="token number">13u</span><span class="token punctuation">,</span> <span class="token number">14u</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>IsInRange<span class="token operator">></span> predicates<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> upper <span class="token operator">:</span> uppers<span class="token punctuation">)</span>predicates<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>IsInRange<span class="token punctuation">&#123;</span> lower<span class="token punctuation">,</span> upper <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//create count_table to store counts </span>std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">></span> count_table<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> upper <span class="token operator">:</span> uppers<span class="token punctuation">)</span>count_table<span class="token punctuation">[</span>upper<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//read file and count</span>std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">fin</span><span class="token punctuation">(</span><span class="token string">"storyDataFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string word<span class="token punctuation">;</span> fin <span class="token operator">>></span> word<span class="token punctuation">;</span> <span class="token comment">/* */</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> is_size_in_range <span class="token operator">:</span> predicates<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_size_in_range</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">++</span>count_table<span class="token punctuation">[</span>is_size_in_range<span class="token punctuation">.</span><span class="token function">upper_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//print</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> pair <span class="token operator">:</span> count_table<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"count in range [1, "</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"] : "</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-39"><a href="#练习14-39" class="headerlink" title="练习14.39"></a>练习14.39</h2><blockquote><p>修改上一题的程序令其报告长度在1到9之间的单词有多少个、长度在10以上的单词有多少个。</p></blockquote><p>解：</p><p>参考14.38。</p><h2 id="练习14-40"><a href="#练习14-40" class="headerlink" title="练习14.40"></a>练习14.40</h2><blockquote><p>重新编写10.3.2节的<code>biggies</code> 函数，使用函数对象替换其中的 <code>lambda</code> 表达式。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ShorterString</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BiggerEqual</span><span class="token punctuation">&#123;</span>size_t sz_<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">BiggerEqual</span><span class="token punctuation">(</span>size_t sz<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">sz_</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> sz_<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Print</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string <span class="token keyword">const</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>string <span class="token function">make_plural</span><span class="token punctuation">(</span>size_t ctr<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> word<span class="token punctuation">,</span> string <span class="token keyword">const</span><span class="token operator">&amp;</span> ending<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>ctr <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> word <span class="token operator">+</span> ending <span class="token operator">:</span> word<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">elimDups</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sort</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> end_unique <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>words<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>end_unique<span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">biggies</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>words<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">elimDups</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stable_sort</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ShorterString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> wc <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">BiggerEqual</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> count <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> wc<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">make_plural</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">"word"</span><span class="token punctuation">,</span> <span class="token string">"s"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" of length "</span> <span class="token operator">&lt;&lt;</span> sz <span class="token operator">&lt;&lt;</span> <span class="token string">" or longer"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>wc<span class="token punctuation">,</span> words<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vec<span class="token punctuation">&#123;</span> <span class="token string">"fox"</span><span class="token punctuation">,</span> <span class="token string">"jumps"</span><span class="token punctuation">,</span> <span class="token string">"over"</span><span class="token punctuation">,</span> <span class="token string">"quick"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"slow"</span><span class="token punctuation">,</span> <span class="token string">"the"</span><span class="token punctuation">,</span> <span class="token string">"turtle"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">biggies</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-41"><a href="#练习14-41" class="headerlink" title="练习14.41"></a>练习14.41</h2><blockquote><p>你认为 C++ 11 标准为什么要增加 <code>lambda</code>？对于你自己来说，什么情况下会使用 <code>lambda</code>，什么情况下会使用类？</p></blockquote><p>解：</p><p>使用 <code>lambda</code> 是非常方便的，当需要使用一个函数，而这个函数不常使用并且简单时，使用<code>lambda</code> 是比较方便的选择。</p><h2 id="练习14-42"><a href="#练习14-42" class="headerlink" title="练习14.42"></a>练习14.42</h2><blockquote><p>使用标准库函数对象及适配器定义一条表达式，令其</p></blockquote><pre class="line-numbers language-none"><code class="language-none">(a) 统计大于1024的值有多少个。 (b) 找到第一个不等于pooh的字符串。(c) 将所有的值乘以2。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span><span class="token function">count_if</span><span class="token punctuation">(</span>ivec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _1<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation">(</span>svec<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svec<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">not_equal_to</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _1<span class="token punctuation">,</span> <span class="token string">"pooh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token function">transform</span><span class="token punctuation">(</span>ivec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ivec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">bind</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">multiplies</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> _1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习14-43"><a href="#练习14-43" class="headerlink" title="练习14.43"></a>练习14.43</h2><blockquote><p>使用标准库函数对象判断一个给定的<code>int</code>值是否能被 <code>int</code> 容器中的所有元素整除。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> input<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> input<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>modulus<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mod<span class="token punctuation">;</span><span class="token keyword">auto</span> predicator <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">mod</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> is_divisible <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">any_of</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> predicator<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>is_divisible <span class="token operator">?</span> <span class="token string">"Yes!"</span> <span class="token operator">:</span> <span class="token string">"No!"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-44"><a href="#练习14-44" class="headerlink" title="练习14.44"></a>练习14.44</h2><blockquote><p>编写一个简单的桌面计算器使其能处理二元运算。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span> </span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">auto</span> mod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">%</span> j<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Div</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> binops <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token string">"+"</span><span class="token punctuation">,</span> add <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                               <span class="token comment">// function pointer </span><span class="token punctuation">&#123;</span> <span class="token string">"-"</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">minus</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                 <span class="token comment">// library functor </span><span class="token punctuation">&#123;</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                             <span class="token comment">// user-defined functor </span><span class="token punctuation">&#123;</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token operator">*</span>j<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// unnamed lambda </span><span class="token punctuation">&#123;</span> <span class="token string">"%"</span><span class="token punctuation">,</span> mod <span class="token punctuation">&#125;</span>                                <span class="token comment">// named lambda object </span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Pls enter as: num operator num :\n"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">;</span> std<span class="token double-colon punctuation">::</span>string op<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> lhs <span class="token operator">>></span> op <span class="token operator">>></span> rhs<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> binops<span class="token punctuation">[</span>op<span class="token punctuation">]</span><span class="token punctuation">(</span>lhs<span class="token punctuation">,</span> rhs<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-45"><a href="#练习14-45" class="headerlink" title="练习14.45"></a>练习14.45</h2><blockquote><p>编写类型转换运算符将一个 <code>Sales_data</code> 对象分别转换成 <code>string</code> 和 <code>double</code>，你认为这些运算符的返回值应该是什么？</p></blockquote><p>解：</p><p>头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Sales_data</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenue</span><span class="token punctuation">(</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token keyword">operator</span> std<span class="token double-colon punctuation">::</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string bookNo<span class="token punctuation">;</span><span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> revenue <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Sales_data <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token double-colon punctuation">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> units_sold <span class="token operator">?</span> revenue <span class="token operator">/</span> units_sold <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习14-46"><a href="#练习14-46" class="headerlink" title="练习14.46"></a>练习14.46</h2><blockquote><p>你认为应该为 <code>Sales_data</code> 类定义上面两种类型转换运算符吗？应该把它们声明成 <code>explicit</code> 的吗？为什么？</p></blockquote><p>解：</p><p>上面的两种类型转换有歧义，应该声明成 <code>explicit</code> 的。</p><h2 id="练习14-47"><a href="#练习14-47" class="headerlink" title="练习14.47"></a>练习14.47</h2><blockquote><p>说明下面这两个类型转换运算符的区别。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Integral</span> <span class="token punctuation">&#123;</span><span class="token keyword">operator</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">operator</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>第一个无意义，会被编译器忽略。第二个合法。</p><h2 id="练习14-48"><a href="#练习14-48" class="headerlink" title="练习14.48"></a>练习14.48</h2><blockquote><p>你在7.5.1节的练习7.40中曾经选择并编写了一个类，你认为它应该含有向 <code>bool</code> 的类型转换运算符吗？如果是，解释原因并说明该运算符是否应该是 <code>explicit</code>的；如果不是，也请解释原因。</p></blockquote><p>解：</p><p><code>Date</code> 类应该含有向 <code>bool</code> 的类型转换运算符，并且应该声明为 <code>explicit</code> 的。</p><h2 id="练习14-49"><a href="#练习14-49" class="headerlink" title="练习14.49"></a>练习14.49</h2><blockquote><p>为上一题提到的类定义一个转换目标是 <code>bool</code> 的类型转换运算符，先不用在意这么做是否应该。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>year<span class="token operator">&lt;</span><span class="token number">4000</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习14-50"><a href="#练习14-50" class="headerlink" title="练习14.50"></a>练习14.50</h2><blockquote><p>在初始化 <code>ex1</code> 和 <code>ex2</code> 的过程中，可能用到哪些类类型的转换序列呢？说明初始化是否正确并解释原因。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">LongDouble</span> <span class="token punctuation">&#123;</span><span class="token function">LongDouble</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">operator</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">operator</span> <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>LongDouble ldObj<span class="token punctuation">;</span><span class="token keyword">int</span> ex1 <span class="token operator">=</span> ldObj<span class="token punctuation">;</span><span class="token keyword">float</span> ex2 <span class="token operator">=</span> ldObj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>ex1</code> 转换不合法，没有定义从 <code>LongDouble</code> 到 <code>int</code> 的转换，从<code>double</code>转换还是<code>float</code>转换存在二义性。<code>ex2</code> 合法。</p><h2 id="练习14-51"><a href="#练习14-51" class="headerlink" title="练习14.51"></a>练习14.51</h2><blockquote><p>在调用 <code>calc</code> 的过程中，可能用到哪些类型转换序列呢？说明最佳可行函数是如何被选出来的。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calc</span><span class="token punctuation">(</span>LongDouble<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> dval<span class="token punctuation">;</span><span class="token function">calc</span><span class="token punctuation">(</span>dval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用了哪个calc？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>最佳可行函数是 <code>void calc(int)</code>。</p><p>转换的优先级如下：</p><ol><li>精确匹配</li><li><code>const</code> 转换。</li><li>类型提升</li><li>算术转换</li><li>类类型转换</li></ol><h2 id="练习14-52"><a href="#练习14-52" class="headerlink" title="练习14.52"></a>练习14.52</h2><blockquote><p>在下面的加法表达式中分别选用了哪个<code>operator+</code>？列出候选函数、可行函数及为每个可行函数的实参执行的类型转换：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Longdouble</span> <span class="token punctuation">&#123;</span><span class="token comment">//用于演示的成员operator+;在通常情况下是个非成员</span>LongDouble <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> SmallInt<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其他成员与14.9.2节一致</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>LongDouble <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>LongDouble<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SmallInt si<span class="token punctuation">;</span>LongDouble ld<span class="token punctuation">;</span>ld <span class="token operator">=</span> si <span class="token operator">+</span> ld<span class="token punctuation">;</span>ld <span class="token operator">=</span> ld <span class="token operator">+</span> si<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p><code>ld = si + ld;</code> 不合法。<code>ld = ld + si</code> 两个都可以调用，但是第一个调用更精确一些。</p><h2 id="练习14-53"><a href="#练习14-53" class="headerlink" title="练习14.53"></a>练习14.53</h2><blockquote><p>假设我们已经定义了如第522页所示的<code>SmallInt</code>，判断下面的加法表达式是否合法。如果合法，使用了哪个加法运算符？如果不合法，应该怎样修改代码才能使其合法？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SmallInt si<span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> si <span class="token operator">+</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>不合法，存在二义性。</p><p>应该该为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SmallInt s1<span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token function">SmallInt</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp-primer课后答案17</title>
      <link href="2021/04/10/excersize/ch16/"/>
      <url>2021/04/10/excersize/ch16/</url>
      
        <content type="html"><![CDATA[<h1 id="第十六章-模板编程与泛型编程"><a href="#第十六章-模板编程与泛型编程" class="headerlink" title="第十六章 模板编程与泛型编程"></a>第十六章 模板编程与泛型编程</h1><h2 id="练习16-1"><a href="#练习16-1" class="headerlink" title="练习16.1"></a>练习16.1</h2><blockquote><p>给出实例化的定义。</p></blockquote><p>解：</p><p>当编译器实例化一个模版时，它使用实际的模版参数代替对应的模版参数来创建出模版的一个新“实例”。</p><h2 id="练习16-2"><a href="#练习16-2" class="headerlink" title="练习16.2"></a>练习16.2</h2><blockquote><p>编写并测试你自己版本的 <code>compare</code> 函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lhs <span class="token operator">&lt;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rhs <span class="token operator">&lt;</span> lhs<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-3"><a href="#练习16-3" class="headerlink" title="练习16.3"></a>练习16.3</h2><blockquote><p>对两个 <code>Sales_data</code> 对象调用你的 <code>compare</code> 函数，观察编译器在实例化过程中如何处理错误。</p></blockquote><p>解：</p><p><code>error: no match for &#39;operator&lt;&#39; </code></p><h2 id="练习16-4"><a href="#练习16-4" class="headerlink" title="练习16.4"></a>练习16.4</h2><blockquote><p>编写行为类似标准库 <code>find</code> 算法的模版。函数需要两个模版类型参数，一个表示函数的迭代器参数，另一个表示值的类型。使用你的函数在一个 <code>vector&lt;int&gt;</code> 和一个<code>list&lt;string&gt;</code>中查找给定值。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Iterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">Value</span><span class="token operator">></span>Iterator <span class="token function">find</span><span class="token punctuation">(</span>Iterator first<span class="token punctuation">,</span> Iterator last<span class="token punctuation">,</span> <span class="token keyword">const</span> Value<span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> first <span class="token operator">!=</span> last <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>first <span class="token operator">!=</span> value<span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-5"><a href="#练习16-5" class="headerlink" title="练习16.5"></a>练习16.5</h2><blockquote><p>为6.2.4节中的<code>print</code>函数编写模版版本，它接受一个数组的引用，能处理任意大小、任意元素类型的数组。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Array</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> Array<span class="token operator">&amp;</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> elem <span class="token operator">:</span> arr<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> elem <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-6"><a href="#练习16-6" class="headerlink" title="练习16.6"></a>练习16.6</h2><blockquote><p>你认为接受一个数组实参的标准库函数 <code>begin</code> 和 <code>end</code> 是如何工作的？定义你自己版本的 <code>begin</code> 和 <code>end</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> N<span class="token operator">></span>T<span class="token operator">*</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">T</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> N<span class="token operator">></span>T<span class="token operator">*</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">T</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> arr <span class="token operator">+</span> N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-7"><a href="#练习16-7" class="headerlink" title="练习16.7"></a>练习16.7</h2><blockquote><p>编写一个 <code>constexpr</code> 模版，返回给定数组的大小。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">N</span><span class="token operator">></span> <span class="token keyword">constexpr</span><span class="token keyword">unsigned</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token function">T</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-8"><a href="#练习16-8" class="headerlink" title="练习16.8"></a>练习16.8</h2><blockquote><p>在第97页的“关键概念”中，我们注意到，C++程序员喜欢使用 <code>!=</code> 而不喜欢 <code>&lt;</code> 。解释这个习惯的原因。</p></blockquote><p>解：</p><p>因为大多数类只定义了 <code>!=</code> 操作而没有定义 <code>&lt;</code> 操作，使用 <code>!=</code> 可以降低对要处理的类型的要求。</p><h2 id="练习16-9"><a href="#练习16-9" class="headerlink" title="练习16.9"></a>练习16.9</h2><blockquote><p>什么是函数模版，什么是类模版？</p></blockquote><p>解：</p><p>一个函数模版就是一个公式，可用来生成针对特定类型的函数版本。类模版是用来生成类的蓝图的，与函数模版的不同之处是，编译器不能为类模版推断模版参数类型。如果我们已经多次看到，为了使用类模版，我们必须在模版名后的尖括号中提供额外信息。</p><h2 id="练习16-10"><a href="#练习16-10" class="headerlink" title="练习16.10"></a>练习16.10</h2><blockquote><p>当一个类模版被实例化时，会发生什么？</p></blockquote><p>解：</p><p>一个类模版的每个实例都形成一个独立的类。</p><h2 id="练习16-11"><a href="#练习16-11" class="headerlink" title="练习16.11"></a>练习16.11</h2><blockquote><p>下面 <code>List</code> 的定义是错误的。应如何修改它？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">elemType</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">ListItem</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">elemType</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token generic-function"><span class="token function">List</span><span class="token generic class-name"><span class="token operator">&lt;</span>elemType<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token generic-function"><span class="token function">List</span><span class="token generic class-name"><span class="token operator">&lt;</span>elemType<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> List<span class="token operator">&lt;</span>elemType<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>elemType<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> List<span class="token operator">&lt;</span>elemType<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ListItem <span class="token operator">*</span>ptr<span class="token punctuation">,</span> elemType value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>ListItem <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>模版需要模版参数，应该修改为如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">elemType</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">ListItem</span><span class="token punctuation">;</span>  <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">elemType</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">List</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token generic-function"><span class="token function">List</span><span class="token generic class-name"><span class="token operator">&lt;</span>elemType<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token generic-function"><span class="token function">List</span><span class="token generic class-name"><span class="token operator">&lt;</span>elemType<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">const</span> List<span class="token operator">&lt;</span>elemType<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>elemType<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> List<span class="token operator">&lt;</span>elemType<span class="token operator">></span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ListItem<span class="token operator">&lt;</span>elemType<span class="token operator">></span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> elemType value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span><span class="token operator">:</span>    ListItem<span class="token operator">&lt;</span>elemType<span class="token operator">></span> <span class="token operator">*</span>front<span class="token punctuation">,</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-12"><a href="#练习16-12" class="headerlink" title="练习16.12"></a>练习16.12</h2><blockquote><p>编写你自己版本的 <code>Blob</code> 和 <code>BlobPtr</code> 模版，包含书中未定义的多个<code>const</code>成员。</p></blockquote><p>解：</p><p>Blob：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Blob</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">typedef</span> T value_type<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span>size_type size_type<span class="token punctuation">;</span><span class="token comment">// constructors</span><span class="token function">Blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Blob</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> il<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// number of elements in the Blob</span>size_type <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">bool</span>      <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token operator">-></span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// element access</span>T<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">>></span> data<span class="token punctuation">;</span><span class="token comment">// throw msg if data[i] isn't valid</span><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// constructors</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Blob</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> il<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">>></span></span></span><span class="token punctuation">(</span>il<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">check</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> data<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>T<span class="token operator">&amp;</span> <span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty Blob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"back on empty Blob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> data<span class="token operator">-></span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>T<span class="token operator">&amp;</span> Blob<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// if i is too big, check function will throw, preventing access to a nonexistent element</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"subscript out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> Blob<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_type i<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token comment">// if i is too big, check function will throw, preventing access to a nonexistent element</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"subscript out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"pop_back on empty Blob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data<span class="token operator">-></span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BlobPtr：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Blob.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">BlobPtr</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">BlobPtr</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">BlobPtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">curr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">BlobPtr</span><span class="token punctuation">(</span>Blob<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">wptr</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">curr</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"dereference past end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prefix</span>BlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// postfix</span>BlobPtr <span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BlobPtr <span class="token keyword">operator</span> <span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// returns  a shared_ptr to the vector if the check succeeds</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token function">check</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>weak_ptr<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">>></span> wptr<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>size_t curr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// prefix ++</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// if curr already points past the end of the container, can't increment it</span><span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>curr<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prefix --</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">--</span>curr<span class="token punctuation">;</span><span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"decrement past begin of BlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// postfix ++</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>BlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// postfix --</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>BlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>wptr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>wptr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"ptrs to different Blobs!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span>i <span class="token operator">==</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> BlobPtr<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>wptr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>wptr<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token function">runtime_error</span><span class="token punctuation">(</span><span class="token string">"ptrs to different Blobs!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> lhs<span class="token punctuation">.</span>i <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-13"><a href="#练习16-13" class="headerlink" title="练习16.13"></a>练习16.13</h2><blockquote><p>解释你为 <code>BlobPtr</code> 的相等和关系运算符选择哪种类型的友好关系？</p></blockquote><p>解：</p><p>这里需要与类型一一对应，所以就选择一对一友好关系。</p><h2 id="练习16-14"><a href="#练习16-14" class="headerlink" title="练习16.14"></a>练习16.14</h2><blockquote><p>编写 <code>Screen</code> 类模版，用非类型参数定义 <code>Screen</code> 的高和宽。</p></blockquote><p>解：</p><p>Screen</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> H<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> W<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">typedef</span> std<span class="token double-colon punctuation">::</span>string<span class="token double-colon punctuation">::</span>size_type pos<span class="token punctuation">;</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment">// needed because Screen has another constructor</span><span class="token comment">// cursor initialized to 0 by its in-class initializer</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">contents</span><span class="token punctuation">(</span>H <span class="token operator">*</span> W<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>              <span class="token comment">// get the character at the cursor</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token comment">// implicitly inline</span>Screen <span class="token operator">&amp;</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// can be made inline later</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream <span class="token operator">&amp;</span>os<span class="token punctuation">,</span> <span class="token keyword">const</span> Screen<span class="token operator">&lt;</span>H<span class="token punctuation">,</span> W<span class="token operator">></span> <span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span>height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> W<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream <span class="token operator">&amp;</span>is<span class="token punctuation">,</span> Screen <span class="token operator">&amp;</span>  c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">;</span>is <span class="token operator">>></span> a<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">temp</span><span class="token punctuation">(</span>H<span class="token operator">*</span>W<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>contents <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pos height <span class="token operator">=</span> H<span class="token punctuation">,</span> width <span class="token operator">=</span> W<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string contents<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">unsigned</span> H<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> W<span class="token operator">></span><span class="token keyword">inline</span> Screen<span class="token operator">&lt;</span>H<span class="token punctuation">,</span> W<span class="token operator">></span><span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token operator">&lt;</span>H<span class="token punctuation">,</span> W<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pos row <span class="token operator">=</span> r <span class="token operator">*</span> width<span class="token punctuation">;</span>cursor <span class="token operator">=</span> row <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-15"><a href="#练习16-15" class="headerlink" title="练习16.15"></a>练习16.15</h2><blockquote><p>为你的 <code>Screen</code> 模版实现输入和输出运算符。<code>Screen</code> 类需要哪些友元（如果需要的话）来令输入和输出运算符正确工作？解释每个友元声明（如果有的话）为什么是必要的。</p></blockquote><p>解：</p><p>类的 <code>operator&lt;&lt;</code> 和 <code>operator&gt;&gt;</code> 应该是类的友元。</p><h2 id="练习16-16"><a href="#练习16-16" class="headerlink" title="练习16.16"></a>练习16.16</h2><blockquote><p>将 <code>StrVec</code> 类重写为模版，命名为 <code>Vec</code>。</p></blockquote><p>解：</p><p>Vec:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token comment">/***  @brief a vector like class*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Vec</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">first_free</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Vec</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Vec</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vec<span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>Vec<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vec<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">Vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// memmbers</span><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> first_free <span class="token operator">-</span> element<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> cap <span class="token operator">-</span> element<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> element<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> first_free<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reserve</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">// data members</span>T<span class="token operator">*</span> element<span class="token punctuation">;</span>T<span class="token operator">*</span> first_free<span class="token punctuation">;</span>T<span class="token operator">*</span> cap<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>allocator<span class="token operator">&lt;</span>T<span class="token operator">></span> alloc<span class="token punctuation">;</span><span class="token comment">// utillities</span><span class="token keyword">void</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wy_alloc_n_move</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token punctuation">,</span> T<span class="token operator">*</span><span class="token operator">></span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>T<span class="token operator">*</span> b<span class="token punctuation">,</span> T<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// copy constructor</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Vec</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vec <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*** @brief newData is a pair of pointers pointing to newly allocated and copied*        from range : [b, e)*/</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token punctuation">,</span> T<span class="token operator">*</span><span class="token operator">></span> newData <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element <span class="token operator">=</span> newData<span class="token punctuation">.</span>first<span class="token punctuation">;</span>first_free <span class="token operator">=</span> cap <span class="token operator">=</span> newData<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// constructor that takes initializer_list&lt;T></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Vec</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>initializer_list<span class="token operator">&lt;</span>T<span class="token operator">></span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// allocate memory as large as l.size()</span>T<span class="token operator">*</span> <span class="token keyword">const</span> newData <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// copy elements from l to the address allocated</span>T<span class="token operator">*</span> p <span class="token operator">=</span> newData<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>t <span class="token operator">:</span> l<span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// build data structure</span>element <span class="token operator">=</span> newData<span class="token punctuation">;</span>first_free <span class="token operator">=</span> cap <span class="token operator">=</span> element <span class="token operator">+</span> l<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// operator =</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>Vec<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> Vec<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vec<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// allocate and copy first to protect against self_assignment</span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token punctuation">,</span> T<span class="token operator">*</span><span class="token operator">></span> newData <span class="token operator">=</span> <span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>rhs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rhs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// destroy and deallocate</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// update data structure</span>element <span class="token operator">=</span> newData<span class="token punctuation">.</span>first<span class="token punctuation">;</span>first_free <span class="token operator">=</span> cap <span class="token operator">=</span> newData<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// destructor</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>Vec<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @brief   allocate new memeory if nessary and push back the new T* @param t new T*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>first_free<span class="token operator">++</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @brief   preallocate enough memory for specified number of elements* @param n number of elements required*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">reserve</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// if n too small, just return without doing anything</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// allocate new memory and move data from old address to the new one</span><span class="token function">wy_alloc_n_move</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***  @brief  Resizes to the specified number of elements.*  @param  n  Number of elements the %vector should contain.**  This function will resize it to the specified*  number of elements.  If the number is smaller than the*  current size it is truncated, otherwise*  default constructed elements are appended.*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***  @brief  Resizes it to the specified number of elements.*  @param  __new_size  Number of elements it should contain.*  @param  __x  Data with which new elements should be populated.**  This function will resize it to the specified*  number of elements.  If the number is smaller than the*  current size the it is truncated, otherwise*  the it is extended and new elements are populated with*  given data.*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">resize</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// destroy the range [element+n, first_free) using destructor</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> element <span class="token operator">+</span> n<span class="token punctuation">;</span> p <span class="token operator">!=</span> first_free<span class="token punctuation">;</span><span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// update first_free to point to the new address</span>first_free <span class="token operator">=</span> element <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @brief   allocate new space for the given range and copy them into it* @param b* @param e* @return  a pair of pointers pointing to [first element , one past the last) in the new space*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token punctuation">,</span> T<span class="token operator">*</span><span class="token operator">></span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">alloc_n_copy</span><span class="token punctuation">(</span>T <span class="token operator">*</span>b<span class="token punctuation">,</span> T <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// calculate the size needed and allocate space accordingly</span>T<span class="token operator">*</span> data <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>e <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">uninitialized_copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class="token comment">// which copies the range[first, last) to the space to which</span><span class="token comment">// the starting address data is pointing.</span><span class="token comment">// This function returns a pointer to one past the last element</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @brief   destroy the elements and deallocate the space previously allocated.*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// if not nullptr</span><span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// destroy it in reverse order.</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">=</span> first_free<span class="token punctuation">;</span> p <span class="token operator">!=</span> element<span class="token punctuation">;</span><span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token operator">--</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>alloc<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @brief   allocate memory for spicified number of elements* @param n* @note    it's user's responsibility to ensure that @param n is greater than*          the current capacity.*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">wy_alloc_n_move</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// allocate as required.</span>std<span class="token double-colon punctuation">::</span>size_t newCapacity <span class="token operator">=</span> n<span class="token punctuation">;</span>T<span class="token operator">*</span> newData <span class="token operator">=</span> alloc<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// move the data from old place to the new one</span>T<span class="token operator">*</span> dest <span class="token operator">=</span> newData<span class="token punctuation">;</span>T<span class="token operator">*</span> old <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>dest<span class="token operator">++</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token operator">*</span>old<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// update data structure</span>element <span class="token operator">=</span> newData<span class="token punctuation">;</span>first_free <span class="token operator">=</span> dest<span class="token punctuation">;</span>cap <span class="token operator">=</span> element <span class="token operator">+</span> newCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** @brief   Double the capacity and using std::move move the original data to the newly*          allocated memory*/</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">reallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// calculate the new capacity required</span>std<span class="token double-colon punctuation">::</span>size_t newCapacity <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// allocate and move old data to the new space</span><span class="token function">wy_alloc_n_move</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-17"><a href="#练习16-17" class="headerlink" title="练习16.17"></a>练习16.17</h2><blockquote><p>声明为 <code>typename</code> 的类型参数和声明为 <code>class</code> 的类型参数有什么不同（如果有的话）？什么时候必须使用<code>typename</code>？</p></blockquote><p>解：</p><p>没有什么不同。当我们希望通知编译器一个名字表示类型时，必须使用关键字 <code>typename</code>，而不能使用 <code>class</code>。</p><h2 id="练习16-18"><a href="#练习16-18" class="headerlink" title="练习16.18"></a>练习16.18</h2><blockquote><p>解释下面每个函数模版声明并指出它们是否非法。更正你发现的每个错误。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> U<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">V</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> U<span class="token punctuation">,</span> V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> T <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">inline</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> T <span class="token function">foo</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token function">f4</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">typedef</span> <span class="token keyword">char</span> Ctype<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Ctype</span><span class="token operator">></span> Ctype <span class="token function">f5</span><span class="token punctuation">(</span>Ctype a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 非法。应该为 <code>template &lt;typename T, typename U, typename V&gt; void f1(T, U, V);</code>。</li><li>(b) 非法。应该为 <code>template &lt;typename T&gt; T f2(int &amp;t);</code></li><li>(c) 非法。应该为 <code>template &lt;typename T&gt; inline T foo(T, unsigned int*);</code></li><li>(d) 非法。应该为 <code>template &lt;typename T&gt; T f4(T, T);</code></li><li>(e) 非法。<code>Ctype</code> 被隐藏了。</li></ul><h2 id="练习16-19"><a href="#练习16-19" class="headerlink" title="练习16.19"></a>练习16.19</h2><blockquote><p>编写函数，接受一个容器的引用，打印容器中的元素。使用容器的 <code>size_type</code> 和 <code>size</code>成员来控制打印元素的循环。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> Container<span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token double-colon punctuation">::</span>size_type i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-20"><a href="#练习16-20" class="headerlink" title="练习16.20"></a>练习16.20</h2><blockquote><p>重写上一题的函数，使用<code>begin</code> 和 <code>end</code> 返回的迭代器来控制循环。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Container</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> Container<span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-21"><a href="#练习16-21" class="headerlink" title="练习16.21"></a>练习16.21</h2><blockquote><p>编写你自己的 <code>DebugDelete</code> 版本。</p></blockquote><p>解：</p><p>DebugDelete</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">DebugDelete</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">DebugDelete</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> s <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>cerr<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">os</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>T<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>os <span class="token operator">&lt;&lt;</span> <span class="token string">"deleting unique_ptr"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-22"><a href="#练习16-22" class="headerlink" title="练习16.22"></a>练习16.22</h2><blockquote><p>修改12.3节中你的 <code>TextQuery</code> 程序，令 <code>shared_ptr</code> 成员使用 <code>DebugDelete</code> 作为它们的删除器。</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-23"><a href="#练习16-23" class="headerlink" title="练习16.23"></a>练习16.23</h2><blockquote><p>预测在你的查询主程序中何时会执行调用运算符。如果你的预测和实际不符，确认你理解了原因。</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-24"><a href="#练习16-24" class="headerlink" title="练习16.24"></a>练习16.24</h2><blockquote><p>为你的 <code>Blob</code> 模版添加一个构造函数，它接受两个迭代器。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>    <span class="token comment">//for class</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">It</span><span class="token operator">></span>   <span class="token comment">//for this member</span><span class="token class-name">Blob</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">Blob</span><span class="token punctuation">(</span>It b<span class="token punctuation">,</span> It e<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">data</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">>></span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-25"><a href="#练习16-25" class="headerlink" title="练习16.25"></a>练习16.25</h2><blockquote><p>解释下面这些声明的含义。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">extern</span> <span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">vector</span><span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>前者是模版声明，后者是实例化定义。</p><h2 id="练习16-26"><a href="#练习16-26" class="headerlink" title="练习16.26"></a>练习16.26</h2><blockquote><p>假设 <code>NoDefault</code> 是一个没有默认构造函数的类，我们可以显式实例化 <code>vector&lt;NoDefualt&gt;</code>吗？如果不可以，解释为什么。</p></blockquote><p>解：</p><p>不可以。如</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>NoDefault<span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会使用 <code>NoDefault</code> 的默认构造函数，而 <code>NoDefault</code> 没有默认构造函数，因此是不可以的。</p><h2 id="练习16-27"><a href="#练习16-27" class="headerlink" title="练习16.27"></a>练习16.27</h2><blockquote><p>对下面每条带标签的语句，解释发生了什么样的实例化（如果有的话）。如果一个模版被实例化，解释为什么;如果未实例化，解释为什么没有。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>Stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//(a)</span><span class="token keyword">class</span> <span class="token class-name">Exercise</span> <span class="token punctuation">&#123;</span>Stack<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token operator">&amp;</span>rds<span class="token punctuation">;</span><span class="token comment">//(b)</span>Stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> si<span class="token punctuation">;</span><span class="token comment">//(c)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token operator">*</span>sc<span class="token punctuation">;</span><span class="token comment">//(d)</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token operator">*</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(e)</span><span class="token keyword">int</span> iObj <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(f)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>(a)、(b)、(c)、(f) 都发生了实例化，(d)、(e) 没有实例化。</p><h2 id="练习16-28"><a href="#练习16-28" class="headerlink" title="练习16.28"></a>练习16.28</h2><blockquote><p>编写你自己版本的 <code>shared_ptr</code> 和 <code>unique_ptr</code>。</p></blockquote><p>解：</p><p>shared_ptr</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delete.h"</span></span><span class="token keyword">namespace</span> cp5<span class="token punctuation">&#123;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">SharedPointer</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">swap</span><span class="token punctuation">(</span>SharedPointer<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> SharedPointer<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ref_count<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ref_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>deleter<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>deleter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">SharedPointer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//</span><span class="token comment">//  Default Ctor</span><span class="token comment">//</span><span class="token function">SharedPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ptr<span class="token punctuation">&#123;</span> <span class="token keyword">nullptr</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ref_count<span class="token punctuation">&#123;</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> deleter<span class="token punctuation">&#123;</span> cp5<span class="token double-colon punctuation">::</span>Delete<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Ctor that takes raw pointer</span><span class="token comment">//</span><span class="token keyword">explicit</span> <span class="token function">SharedPointer</span><span class="token punctuation">(</span>T<span class="token operator">*</span> raw_ptr<span class="token punctuation">)</span><span class="token operator">:</span> ptr<span class="token punctuation">&#123;</span> raw_ptr <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ref_count<span class="token punctuation">&#123;</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> deleter<span class="token punctuation">&#123;</span> cp5<span class="token double-colon punctuation">::</span>Delete<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Copy Ctor</span><span class="token comment">//</span><span class="token function">SharedPointer</span><span class="token punctuation">(</span>SharedPointer <span class="token keyword">const</span><span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token operator">:</span> ptr<span class="token punctuation">&#123;</span> other<span class="token punctuation">.</span>ptr <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ref_count<span class="token punctuation">&#123;</span> other<span class="token punctuation">.</span>ref_count <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> deleter<span class="token punctuation">&#123;</span> other<span class="token punctuation">.</span>deleter <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">++</span><span class="token operator">*</span>ref_count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Move Ctor</span><span class="token comment">//</span><span class="token function">SharedPointer</span><span class="token punctuation">(</span>SharedPointer <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token operator">:</span> ptr<span class="token punctuation">&#123;</span> other<span class="token punctuation">.</span>ptr <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ref_count<span class="token punctuation">&#123;</span> other<span class="token punctuation">.</span>ref_count <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> deleter<span class="token punctuation">&#123;</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>deleter<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>other<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>other<span class="token punctuation">.</span>ref_count <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Copy assignment</span><span class="token comment">//</span>SharedPointer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>SharedPointer <span class="token keyword">const</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//increment first to ensure safty for self-assignment</span><span class="token operator">++</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>ref_count<span class="token punctuation">;</span><span class="token function">decrement_and_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ptr <span class="token operator">=</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> ref_count <span class="token operator">=</span> rhs<span class="token punctuation">.</span>ref_count<span class="token punctuation">,</span> deleter <span class="token operator">=</span> rhs<span class="token punctuation">.</span>deleter<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Move assignment</span><span class="token comment">//</span>SharedPointer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>SharedPointer <span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span>cp5<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>rhs<span class="token punctuation">.</span><span class="token function">decrement_and_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Conversion operator</span><span class="token comment">//</span><span class="token keyword">operator</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> ptr <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Dereference</span><span class="token comment">//</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Arrow</span><span class="token comment">//</span>T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Use count</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">*</span>ref_count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Get underlying pointer</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Check if the unique user</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">*</span>refCount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Swap</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">swap</span><span class="token punctuation">(</span>SharedPointer<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">// Free the object pointed to, if unique</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">decrement_and_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">// Reset with the new raw pointer</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">reset</span><span class="token punctuation">(</span>T<span class="token operator">*</span> pointer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> pointer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">decrement_n_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ptr <span class="token operator">=</span> pointer<span class="token punctuation">;</span>ref_count <span class="token operator">=</span> <span class="token keyword">new</span> std<span class="token double-colon punctuation">::</span><span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Reset with raw pointer and deleter</span><span class="token comment">//</span><span class="token keyword">auto</span> <span class="token function">reset</span><span class="token punctuation">(</span>T <span class="token operator">*</span>pointer<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">&amp;</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">reset</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>deleter <span class="token operator">=</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token comment">//  Dtor</span><span class="token comment">//</span><span class="token operator">~</span><span class="token function">SharedPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">decrement_and_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>T<span class="token operator">*</span> ptr<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>size_t<span class="token operator">*</span> ref_count<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">></span> deleter<span class="token punctuation">;</span><span class="token keyword">auto</span> <span class="token function">decrement_and_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">--</span><span class="token operator">*</span>ref_count<span class="token punctuation">)</span><span class="token keyword">delete</span> ref_count<span class="token punctuation">,</span><span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ptr<span class="token punctuation">)</span><span class="token keyword">delete</span> ref_count<span class="token punctuation">;</span>ref_count <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//namespace</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unique_ptr:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"debugDelete.h"</span></span><span class="token comment">// forward declarations for friendship</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">unique_pointer</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">D</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token function">swap</span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***  @brief  std::unique_ptr like class template.*/</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">D</span> <span class="token operator">=</span> DebugDelete<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">unique_pointer</span><span class="token punctuation">&#123;</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">swap</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span></span></span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">// preventing copy and assignment</span><span class="token function">unique_pointer</span><span class="token punctuation">(</span><span class="token keyword">const</span> unique_pointer<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>unique_pointer<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> unique_pointer<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span><span class="token comment">// default constructor and one taking T*</span><span class="token function">unique_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span class="token keyword">explicit</span> <span class="token function">unique_pointer</span><span class="token punctuation">(</span>T<span class="token operator">*</span> up<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// move constructor</span><span class="token function">unique_pointer</span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&amp;&amp;</span> up<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>up<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> up<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// move assignment</span>unique_pointer<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token comment">// std::nullptr_t assignment</span>unique_pointer<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>nullptr_t n<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">;</span><span class="token comment">// operator overloaded :  *  ->  bool</span>T<span class="token operator">&amp;</span> <span class="token keyword">operator</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">operator</span> <span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ptr <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// return the underlying pointer</span>T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// swap member using swap friend</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// free and make it point to nullptr or to p's pointee.</span><span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span> <span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>T<span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span> <span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// return ptr and make ptr point to nullptr.</span>T<span class="token operator">*</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">unique_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>T<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>D  deleter <span class="token operator">=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// swap</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">D</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token function">swap</span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>swap<span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>deleter<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>deleter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// move assignment</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">D</span><span class="token operator">></span><span class="token keyword">inline</span> unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span>unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>unique_pointer<span class="token operator">&amp;&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span><span class="token comment">// prevent self-assignment</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>ptr <span class="token operator">!=</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// std::nullptr_t assignment</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">D</span><span class="token operator">></span><span class="token keyword">inline</span> unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token operator">&amp;</span>unique_pointer<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token keyword">operator</span> <span class="token operator">=</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>nullptr_t n<span class="token punctuation">)</span> <span class="token keyword">noexcept</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">deleter</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>   ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// relinquish contrul by returnning ptr and making ptr point to nullptr.</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">D</span><span class="token operator">></span><span class="token keyword">inline</span> T<span class="token operator">*</span><span class="token class-name">unique_pointer</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>T<span class="token operator">*</span> ret <span class="token operator">=</span> ptr<span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-29"><a href="#练习16-29" class="headerlink" title="练习16.29"></a>练习16.29</h2><blockquote><p>修改你的 <code>Blob</code> 类，用你自己的 <code>shared_ptr</code> 代替标准库中的版本。</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-30"><a href="#练习16-30" class="headerlink" title="练习16.30"></a>练习16.30</h2><blockquote><p>重新运行你的一些程序，验证你的 <code>shared_ptr</code> 类和修改后的 <code>Blob</code> 类。（注意：实现 <code>weak_ptr</code> 类型超出了本书范围，因此你不能将<code>BlobPtr</code>类与你修改后的<code>Blob</code>一起使用。）</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-31"><a href="#练习16-31" class="headerlink" title="练习16.31"></a>练习16.31</h2><blockquote><p>如果我们将 <code>DebugDelete</code> 与 <code>unique_ptr</code> 一起使用，解释编译器将删除器处理为内联形式的可能方式。</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-32"><a href="#练习16-32" class="headerlink" title="练习16.32"></a>练习16.32</h2><blockquote><p>在模版实参推断过程中发生了什么？</p></blockquote><p>解：</p><p>在模版实参推断过程中，编译器使用函数调用中的实参类型来寻找模版实参，用这些模版实参生成的函数版本与给定的函数调用最为匹配。</p><h2 id="练习16-33"><a href="#练习16-33" class="headerlink" title="练习16.33"></a>练习16.33</h2><blockquote><p>指出在模版实参推断过程中允许对函数实参进行的两种类型转换。</p></blockquote><p>解：</p><ul><li><code>const</code> 转换：可以将一个非 <code>const</code> 对象的引用（或指针）传递给一个 <code>const</code> 的引用（或指针）形参。</li><li>数组或函数指针转换：如果函数形参不是引用类型，则可以对数组或函数类型的实参应用正常的指针转换。一个数组实参可以转换为一个指向其首元素的指针。类似的，一个函数实参可以转换为一个该函数类型的指针。</li></ul><h2 id="练习16-34"><a href="#练习16-34" class="headerlink" title="练习16.34"></a>练习16.34</h2><blockquote><p>对下面的代码解释每个调用是否合法。如果合法，<code>T</code> 的类型是什么？如果不合法，为什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token string">"dad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 不合法。<code>compare(const char [3], const char [6])</code>, 两个实参类型不一致。</li><li>(b) 合法。<code>compare(const char [4], const char [4])</code>.</li></ul><h2 id="练习16-35"><a href="#练习16-35" class="headerlink" title="练习16.35"></a>练习16.35</h2><blockquote><p>下面调用中哪些是错误的（如果有的话）？如果调用合法，<code>T</code> 的类型是什么？如果调用不合法，问题何在？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> T <span class="token function">calc</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tempalte <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> T <span class="token function">fcn</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> d<span class="token punctuation">;</span> <span class="token keyword">float</span> f<span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">calc</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">fcn</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">fcn</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><ul><li>(a) 合法，类型为<code>char</code></li><li>(b) 合法，类型为<code>double</code></li><li>(c) 合法，类型为<code>char</code></li><li>(d) 不合法，这里无法确定T的类型是<code>float</code>还是<code>double</code></li></ul><h2 id="练习16-36"><a href="#练习16-36" class="headerlink" title="练习16.36"></a>练习16.36</h2><blockquote><p>进行下面的调用会发生什么：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token function">f1</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>cp1 <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">*</span>cp2 <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">f1</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">f1</span><span class="token punctuation">(</span>cp1<span class="token punctuation">,</span> cp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span>cp1<span class="token punctuation">,</span> cp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token function">f1</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> cp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> cp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 这个使用就不合法<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-37"><a href="#练习16-37" class="headerlink" title="练习16.37"></a>练习16.37</h2><blockquote><p>标准库 <code>max</code> 函数有两个参数，它返回实参中的较大者。此函数有一个模版类型参数。你能在调用 <code>max</code> 时传递给它一个 <code>int</code> 和一个 <code>double</code> 吗？如果可以，如何做？如果不可以，为什么？</p></blockquote><p>解：</p><p>可以。提供显式的模版实参：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">max</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习16-38"><a href="#练习16-38" class="headerlink" title="练习16.38"></a>练习16.38</h2><blockquote><p>当我们调用 <code>make_shared</code> 时，必须提供一个显示模版实参。解释为什么需要显式模版实参以及它是如果使用的。</p></blockquote><p>解：</p><p>如果不显示提供模版实参，那么 <code>make_shared</code> 无法推断要分配多大内存空间。</p><h2 id="练习16-39"><a href="#练习16-39" class="headerlink" title="练习16.39"></a>练习16.39</h2><blockquote><p>对16.1.1节 中的原始版本的 <code>compare</code> 函数，使用一个显式模版实参，使得可以向函数传递两个字符串字面量。</p></blockquote><p>解： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token generic-function"><span class="token function">compare</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习16-40"><a href="#练习16-40" class="headerlink" title="练习16.40"></a>练习16.40</h2><blockquote><p>下面的函数是否合法？如果不合法，为什么？如果合法，对可以传递的实参类型有什么限制（如果有的话）？返回类型是什么？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">It</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">fcn3</span><span class="token punctuation">(</span>It beg<span class="token punctuation">,</span> It end<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">*</span>beg <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理序列</span><span class="token keyword">return</span> <span class="token operator">*</span>beg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><p>合法。该类型需要支持 <code>+</code> 操作。</p><h2 id="练习16-41"><a href="#练习16-41" class="headerlink" title="练习16.41"></a>练习16.41</h2><blockquote><p>编写一个新的 <code>sum</code> 版本，它返回类型保证足够大，足以容纳加法结果。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">sum</span><span class="token punctuation">(</span>T lhs<span class="token punctuation">,</span> T rhs<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">decltype</span><span class="token punctuation">(</span> lhs <span class="token operator">+</span> rhs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lhs <span class="token operator">+</span> rhs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-42"><a href="#练习16-42" class="headerlink" title="练习16.42"></a>练习16.42</h2><blockquote><p>对下面每个调用，确定 <code>T</code> 和 <code>val</code> 的类型：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> ci <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token function">g</span><span class="token punctuation">(</span>i <span class="token operator">*</span> ci<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">int</span><span class="token operator">&amp;&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="练习16-43"><a href="#练习16-43" class="headerlink" title="练习16.43"></a>练习16.43</h2><blockquote><p>使用上一题定义的函数，如果我们调用<code>g(i = ci)</code>,<code>g</code> 的模版参数将是什么？</p></blockquote><p>解：</p><p><code>i = ci</code> 返回的是左值，因此 <code>g</code> 的模版参数是 <code>int&amp;</code></p><h2 id="练习16-44"><a href="#练习16-44" class="headerlink" title="练习16.44"></a>练习16.44</h2><blockquote><p>使用与第一题中相同的三个调用，如果 <code>g</code> 的函数参数声明为 <code>T</code>（而不是<code>T&amp;&amp;</code>），确定T的类型。如果<code>g</code>的函数参数是 <code>const T&amp;</code>呢？</p></blockquote><p>解：</p><p>当声明为<code>T</code>的时候，<code>T</code>的类型为<code>int&amp;</code>。<br>当声明为<code>const T&amp;</code>的时候，T的类型为<code>int&amp;</code>。</p><h2 id="练习16-45"><a href="#练习16-45" class="headerlink" title="练习16.45"></a>练习16.45</h2><blockquote><p>如果下面的模版，如果我们对一个像42这样的字面常量调用<code>g</code>，解释会发生什么？如果我们对一个<code>int</code> 类型的变量调用<code>g</code> 呢？</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> vector<span class="token operator">&lt;</span>T<span class="token operator">></span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解：</p><p>当使用字面常量，<code>T</code>将为<code>int</code>。<br>当使用<code>int</code>变量，<code>T</code>将为<code>int&amp;</code>。编译的时候将会报错，因为没有办法对这种类型进行内存分配，无法创建<code>vector&lt;int&amp;&gt;</code>。</p><h2 id="练习16-46"><a href="#练习16-46" class="headerlink" title="练习16.46"></a>练习16.46</h2><blockquote><p>解释下面的循环，它来自13.5节中的 <code>StrVec::reallocate</code>:</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>dest<span class="token operator">++</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token operator">*</span>elem<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解：</p><p>在每个循环中，对 <code>elem</code> 的解引用操作 <code>*</code> 当中，会返回一个左值，<code>std::move</code> 函数将该左值转换为右值，提供给 <code>construct</code> 函数。</p><h2 id="练习16-47"><a href="#练习16-47" class="headerlink" title="练习16.47"></a>练习16.47</h2><blockquote><p>编写你自己版本的翻转函数，通过调用接受左值和右值引用参数的函数来测试它。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">F</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">T2</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">flip</span><span class="token punctuation">(</span>F f<span class="token punctuation">,</span> T1<span class="token operator">&amp;&amp;</span> t1<span class="token punctuation">,</span> T2<span class="token operator">&amp;&amp;</span> t2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">f</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T2<span class="token operator">></span></span></span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T1<span class="token operator">></span></span></span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-48"><a href="#练习16-48" class="headerlink" title="练习16.48"></a>练习16.48</h2><blockquote><p>编写你自己版本的 <code>debug_rep</code> 函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>ostringstream ret<span class="token punctuation">;</span>    ret <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span>T<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>ostringstream ret<span class="token punctuation">;</span>    ret <span class="token operator">&lt;&lt;</span> <span class="token string">"pointer: "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        ret <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">debug_rep</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ret <span class="token operator">&lt;&lt;</span> <span class="token string">" null pointer"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-49"><a href="#练习16-49" class="headerlink" title="练习16.49"></a>练习16.49</h2><blockquote><p>解释下面每个调用会发生什么：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> ci <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>ci<span class="token punctuation">;</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">g</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">g</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">g</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">f</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">f</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">g</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//g(T )</span><span class="token function">g</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//g(T*)</span><span class="token function">g</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//g(T)   </span><span class="token function">g</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//g(T*)    </span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//f(T)</span><span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//f(T)</span><span class="token function">f</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//f(T)</span><span class="token function">f</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//f(const T*)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-50"><a href="#练习16-50" class="headerlink" title="练习16.50"></a>练习16.50</h2><blockquote><p>定义上一个练习中的函数，令它们打印一条身份信息。运行该练习中的代码。如果函数调用的行为与你预期不符，确定你理解了原因。</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-51"><a href="#练习16-51" class="headerlink" title="练习16.51"></a>练习16.51</h2><blockquote><p>调用本节中的每个 <code>foo</code>，确定 <code>sizeof...(Args)</code> 和 <code>sizeof...(rest)</code>分别返回什么。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token keyword">const</span> Args<span class="token operator">&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof...(Args): "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof...(rest): "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test_param_packet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    string s <span class="token operator">=</span> <span class="token string">"how now brown cow"</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">test_param_packet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">sizeof...(Args): 3sizeof...(rest): 3sizeof...(Args): 2sizeof...(rest): 2sizeof...(Args): 1sizeof...(rest): 1sizeof...(Args): 0sizeof...(rest): 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-52"><a href="#练习16-52" class="headerlink" title="练习16.52"></a>练习16.52</h2><blockquote><p>编写一个程序验证上一题的答案。</p></blockquote><p>解：</p><p>参考16.51。</p><h2 id="练习16-53"><a href="#练习16-53" class="headerlink" title="练习16.53"></a>练习16.53</h2><blockquote><p>编写你自己版本的 <code>print</code> 函数，并打印一个、两个及五个实参来测试它，要打印的每个实参都应有不同的类型。 </p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Printable</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> Printable <span class="token keyword">const</span><span class="token operator">&amp;</span> printable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> printable<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// recursion</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">Printable</span><span class="token punctuation">,</span> <span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> Printable <span class="token keyword">const</span><span class="token operator">&amp;</span> printable<span class="token punctuation">,</span> Args <span class="token keyword">const</span><span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">print</span><span class="token punctuation">(</span>os <span class="token operator">&lt;&lt;</span> printable <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">,</span> rest<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-54"><a href="#练习16-54" class="headerlink" title="练习16.54"></a>练习16.54</h2><blockquote><p>如果我们对一个没 <code>&lt;&lt;</code> 运算符的类型调用 <code>print</code>，会发生什么？</p></blockquote><p>解：</p><p>无法通过编译。</p><h2 id="练习16-55"><a href="#练习16-55" class="headerlink" title="练习16.55"></a>练习16.55</h2><blockquote><p>如果我们的可变参数版本 <code>print</code> 的定义之后声明非可变参数版本，解释可变参数的版本会如何执行。</p></blockquote><p>解：</p><p><code>error: no matching function for call to &#39;print(std::ostream&amp;)&#39;</code></p><h2 id="练习16-56"><a href="#练习16-56" class="headerlink" title="练习16.56"></a>练习16.56</h2><blockquote><p>编写并测试可变参数版本的 <code>errorMsg</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token function">errorMsg</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">print</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> <span class="token function">debug_rep</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-57"><a href="#练习16-57" class="headerlink" title="练习16.57"></a>练习16.57</h2><blockquote><p>比较你的可变参数版本的 <code>errorMsg</code> 和6.2.6节中的 <code>error_msg</code>函数。两种方法的优点和缺点各是什么？</p></blockquote><p>解：</p><p>可变参数版本有更好的灵活性。</p><h2 id="练习16-58"><a href="#练习16-58" class="headerlink" title="练习16.58"></a>练习16.58</h2><blockquote><p>为你的 <code>StrVec</code> 类及你为16.1.2节练习中编写的 <code>Vec</code> 类添加 <code>emplace_back</code> 函数。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>        <span class="token comment">//for the class  template</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span>  <span class="token comment">//for the member template</span><span class="token keyword">inline</span> <span class="token keyword">void</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">chk_n_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alloc<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>first_free<span class="token operator">++</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-59"><a href="#练习16-59" class="headerlink" title="练习16.59"></a>练习16.59</h2><blockquote><p>假定 <code>s</code> 是一个 <code>string</code>，解释调用 <code>svec.emplace_back(s)</code>会发生什么。</p></blockquote><p>解：</p><p>会在 <code>construst</code> 函数中转发扩展包。</p><h2 id="练习16-60"><a href="#练习16-60" class="headerlink" title="练习16.60"></a>练习16.60</h2><blockquote><p>解释 <code>make_shared</code> 是如何工作的。</p></blockquote><p>解：</p><p><code>make_shared</code> 是一个可变模版函数，它将参数包转发然后构造一个对象，再然后一个指向该对象的智能指针。</p><h2 id="练习16-61"><a href="#练习16-61" class="headerlink" title="练习16.61"></a>练习16.61</h2><blockquote><p>定义你自己版本的 <code>make_shared</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">></span><span class="token keyword">auto</span> <span class="token function">make_shared</span><span class="token punctuation">(</span>Args<span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token operator">-></span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>Args<span class="token operator">></span></span></span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-62"><a href="#练习16-62" class="headerlink" title="练习16.62"></a>练习16.62</h2><blockquote><p>定义你自己版本的 <code>hash&lt;Sales_data&gt;</code>, 并定义一个 <code>Sales_data</code> 对象的 <code>unorder_multise</code>。将多条交易记录保存到容器中，并打印其内容。</p></blockquote><p>解：</p><p>略</p><h2 id="练习16-63"><a href="#练习16-63" class="headerlink" title="练习16.63"></a>练习16.63</h2><blockquote><p>定义一个函数模版，统计一个给定值在一个<code>vecor</code>中出现的次数。测试你的函数，分别传递给它一个<code>double</code>的<code>vector</code>，一个<code>int</code>的<code>vector</code>以及一个<code>string</code>的<code>vector</code>。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token comment">// template</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>size_t  <span class="token function">count</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> vec<span class="token punctuation">,</span> T value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> count <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> elem  <span class="token operator">:</span> vec<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> elem<span class="token punctuation">)</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// template specialization</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>size_t <span class="token function">count</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> <span class="token keyword">const</span><span class="token operator">&amp;</span> vec<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> count <span class="token operator">=</span> <span class="token number">0u</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span><span class="token operator">&amp;</span> elem <span class="token operator">:</span> vec<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// for ex16.63</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> vd <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span>vd<span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>        <span class="token comment">// for ex16.64</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span> vcc <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">,</span> <span class="token string">"moophy"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span>vcc<span class="token punctuation">,</span> <span class="token string">"alan"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-64"><a href="#练习16-64" class="headerlink" title="练习16.64"></a>练习16.64</h2><blockquote><p>为上一题的模版编写特例化版本来处理<code>vector&lt;const char*&gt;</code>。编写程序使用这个特例化版本。</p></blockquote><p>解：</p><p>参考16.64。</p><h2 id="练习16-65"><a href="#练习16-65" class="headerlink" title="练习16.65"></a>练习16.65</h2><blockquote><p>在16.3节中我们定义了两个重载的 <code>debug_rep</code> 版本，一个接受 <code>const char*</code> 参数，另一个接受 <code>char *</code> 参数。将这两个函数重写为特例化版本。</p></blockquote><p>解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token comment">// template</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span>T<span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// template specialization T=const char*  ,  char*  respectively.</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span>      <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"alan"</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">debug_rep</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span>T<span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>ostringstream ret<span class="token punctuation">;</span>    ret <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// template specialization</span><span class="token comment">// T = const char*</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">ret</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// template specialization</span><span class="token comment">// T =       char*</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">debug_rep</span><span class="token punctuation">(</span>      <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">ret</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习16-66"><a href="#练习16-66" class="headerlink" title="练习16.66"></a>练习16.66</h2><blockquote><p>重载<code>debug_rep</code> 函数与特例化它相比，有何优点和缺点？</p></blockquote><p>解：</p><p>重载函数会改变函数匹配。</p><h2 id="练习16-67"><a href="#练习16-67" class="headerlink" title="练习16.67"></a>练习16.67</h2><blockquote><p>定义特例化版本会影响 <code>debug_rep</code> 的函数匹配吗？如果不影响，为什么？</p></blockquote><p>解：</p><p>不影响，特例化是模板的一个实例，并没有重载函数。</p>]]></content>
      
      
      <categories>
          
          <category> cpp-primer答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> exclude </tag>
            
            <tag> c++ </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
